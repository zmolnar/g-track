
build/gtrack.elf:     file format elf32-littlearm


Disassembly of section .vectors:

08000000 <_vectors>:
 8000000:	20000400 	.word	0x20000400
 8000004:	08000279 	.word	0x08000279
 8000008:	0800027b 	.word	0x0800027b
 800000c:	0800027b 	.word	0x0800027b
 8000010:	0800027b 	.word	0x0800027b
 8000014:	0800027b 	.word	0x0800027b
 8000018:	0800027b 	.word	0x0800027b
 800001c:	0800027b 	.word	0x0800027b
 8000020:	0800027b 	.word	0x0800027b
 8000024:	0800027b 	.word	0x0800027b
 8000028:	0800027b 	.word	0x0800027b
 800002c:	08003101 	.word	0x08003101
 8000030:	0800027b 	.word	0x0800027b
 8000034:	0800027b 	.word	0x0800027b
 8000038:	0800027b 	.word	0x0800027b
 800003c:	0800027b 	.word	0x0800027b
 8000040:	0800027b 	.word	0x0800027b
 8000044:	0800027b 	.word	0x0800027b
 8000048:	0800027b 	.word	0x0800027b
 800004c:	0800027b 	.word	0x0800027b
 8000050:	0800027b 	.word	0x0800027b
 8000054:	0800027b 	.word	0x0800027b
 8000058:	0800027b 	.word	0x0800027b
 800005c:	0800027b 	.word	0x0800027b
 8000060:	0800027b 	.word	0x0800027b
 8000064:	0800027b 	.word	0x0800027b
 8000068:	0800027b 	.word	0x0800027b
 800006c:	0800027b 	.word	0x0800027b
 8000070:	0800027b 	.word	0x0800027b
 8000074:	0800027b 	.word	0x0800027b
 8000078:	0800027b 	.word	0x0800027b
 800007c:	0800027b 	.word	0x0800027b
 8000080:	0800027b 	.word	0x0800027b
 8000084:	0800027b 	.word	0x0800027b
 8000088:	0800027b 	.word	0x0800027b
 800008c:	0800027b 	.word	0x0800027b
 8000090:	0800027b 	.word	0x0800027b
 8000094:	0800027b 	.word	0x0800027b
 8000098:	0800027b 	.word	0x0800027b
 800009c:	0800027b 	.word	0x0800027b
 80000a0:	0800027b 	.word	0x0800027b
 80000a4:	0800027b 	.word	0x0800027b
 80000a8:	0800027b 	.word	0x0800027b
 80000ac:	0800027b 	.word	0x0800027b
 80000b0:	080073e1 	.word	0x080073e1
 80000b4:	0800027b 	.word	0x0800027b
 80000b8:	0800027b 	.word	0x0800027b
 80000bc:	0800027b 	.word	0x0800027b
 80000c0:	0800027b 	.word	0x0800027b
 80000c4:	0800027b 	.word	0x0800027b
 80000c8:	0800027b 	.word	0x0800027b
 80000cc:	0800027b 	.word	0x0800027b
 80000d0:	0800027b 	.word	0x0800027b
 80000d4:	0800027b 	.word	0x0800027b
 80000d8:	08007261 	.word	0x08007261
 80000dc:	0800027b 	.word	0x0800027b
 80000e0:	0800027b 	.word	0x0800027b
 80000e4:	0800027b 	.word	0x0800027b
 80000e8:	0800027b 	.word	0x0800027b
 80000ec:	0800027b 	.word	0x0800027b
 80000f0:	0800027b 	.word	0x0800027b
 80000f4:	0800027b 	.word	0x0800027b
 80000f8:	0800027b 	.word	0x0800027b
 80000fc:	0800027b 	.word	0x0800027b
 8000100:	0800027b 	.word	0x0800027b
 8000104:	0800027b 	.word	0x0800027b
 8000108:	0800027b 	.word	0x0800027b
 800010c:	0800027b 	.word	0x0800027b
 8000110:	0800027b 	.word	0x0800027b
 8000114:	0800027b 	.word	0x0800027b
 8000118:	0800027b 	.word	0x0800027b
 800011c:	0800027b 	.word	0x0800027b
 8000120:	0800027b 	.word	0x0800027b
 8000124:	0800027b 	.word	0x0800027b
 8000128:	0800027b 	.word	0x0800027b
 800012c:	0800027b 	.word	0x0800027b
 8000130:	0800027b 	.word	0x0800027b
 8000134:	0800027b 	.word	0x0800027b
 8000138:	0800027b 	.word	0x0800027b
 800013c:	0800027b 	.word	0x0800027b
 8000140:	0800027b 	.word	0x0800027b
 8000144:	0800027b 	.word	0x0800027b
 8000148:	0800027b 	.word	0x0800027b
 800014c:	0800027b 	.word	0x0800027b
 8000150:	0800027b 	.word	0x0800027b
 8000154:	0800027b 	.word	0x0800027b
 8000158:	0800027b 	.word	0x0800027b
 800015c:	0800027b 	.word	0x0800027b
 8000160:	0800027b 	.word	0x0800027b
 8000164:	0800027b 	.word	0x0800027b
 8000168:	0800027b 	.word	0x0800027b
 800016c:	0800027b 	.word	0x0800027b
 8000170:	0800027b 	.word	0x0800027b
 8000174:	0800027b 	.word	0x0800027b
 8000178:	0800027b 	.word	0x0800027b
 800017c:	0800027b 	.word	0x0800027b
 8000180:	0800027b 	.word	0x0800027b
 8000184:	0800027b 	.word	0x0800027b
 8000188:	0800027b 	.word	0x0800027b
 800018c:	0800027b 	.word	0x0800027b
 8000190:	0800027b 	.word	0x0800027b
 8000194:	0800027b 	.word	0x0800027b
 8000198:	0800027b 	.word	0x0800027b
 800019c:	0800027b 	.word	0x0800027b

Disassembly of section .text:

080001a0 <_crt0_entry>:
                .align  2
                .thumb_func
                .global _crt0_entry
_crt0_entry:
                /* Interrupts are globally masked initially.*/
                cpsid   i
 80001a0:	b672      	cpsid	i

#if CRT0_FORCE_MSP_INIT == TRUE
                /* MSP stack pointers initialization.*/
                ldr     r0, =__main_stack_end__
 80001a2:	4827      	ldr	r0, [pc, #156]	; (8000240 <endfiniloop+0x4>)
                msr     MSP, r0
 80001a4:	f380 8808 	msr	MSP, r0
#endif

                /* PSP stack pointers initialization.*/
                ldr     r0, =__process_stack_end__
 80001a8:	4826      	ldr	r0, [pc, #152]	; (8000244 <endfiniloop+0x8>)
                msr     PSP, r0
 80001aa:	f380 8809 	msr	PSP, r0

#if CRT0_VTOR_INIT == TRUE
                ldr     r0, =_vectors
 80001ae:	4826      	ldr	r0, [pc, #152]	; (8000248 <endfiniloop+0xc>)
                movw    r1, #SCB_VTOR & 0xFFFF
 80001b0:	f64e 5108 	movw	r1, #60680	; 0xed08
                movt    r1, #SCB_VTOR >> 16
 80001b4:	f2ce 0100 	movt	r1, #57344	; 0xe000
                str     r0, [r1]
 80001b8:	6008      	str	r0, [r1, #0]

                /* Enforcing FPCA bit in the CONTROL register.*/
                movs    r0, #CRT0_CONTROL_INIT | CONTROL_FPCA

#else
                movs    r0, #CRT0_CONTROL_INIT
 80001ba:	2002      	movs	r0, #2
#endif

                /* CONTROL register initialization as configured.*/
                msr     CONTROL, r0
 80001bc:	f380 8814 	msr	CONTROL, r0
                isb
 80001c0:	f3bf 8f6f 	isb	sy

#if CRT0_INIT_CORE == TRUE
                /* Core initialization.*/
                bl      __core_init
 80001c4:	f007 f9a4 	bl	8007510 <__core_init>
#endif

                /* Early initialization.*/
                bl      __early_init
 80001c8:	f006 ff62 	bl	8007090 <__early_init>

#if CRT0_INIT_STACKS == TRUE
                ldr     r0, =CRT0_STACKS_FILL_PATTERN
 80001cc:	f04f 3055 	mov.w	r0, #1431655765	; 0x55555555
                /* Main Stack initialization. Note, it assumes that the
                   stack size is a multiple of 4 so the linker file must
                   ensure this.*/
                ldr     r1, =__main_stack_base__
 80001d0:	491e      	ldr	r1, [pc, #120]	; (800024c <endfiniloop+0x10>)
                ldr     r2, =__main_stack_end__
 80001d2:	4a1b      	ldr	r2, [pc, #108]	; (8000240 <endfiniloop+0x4>)

080001d4 <msloop>:
msloop:
                cmp     r1, r2
 80001d4:	4291      	cmp	r1, r2
                itt     lo
 80001d6:	bf3c      	itt	cc
                strlo   r0, [r1], #4
 80001d8:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     msloop
 80001dc:	e7fa      	bcc.n	80001d4 <msloop>

                /* Process Stack initialization. Note, it assumes that the
                   stack size is a multiple of 4 so the linker file must
                   ensure this.*/
                ldr     r1, =__process_stack_base__
 80001de:	491c      	ldr	r1, [pc, #112]	; (8000250 <endfiniloop+0x14>)
                ldr     r2, =__process_stack_end__
 80001e0:	4a18      	ldr	r2, [pc, #96]	; (8000244 <endfiniloop+0x8>)

080001e2 <psloop>:
psloop:
                cmp     r1, r2
 80001e2:	4291      	cmp	r1, r2
                itt     lo
 80001e4:	bf3c      	itt	cc
                strlo   r0, [r1], #4
 80001e6:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     psloop
 80001ea:	e7fa      	bcc.n	80001e2 <psloop>
#endif

#if CRT0_INIT_DATA == TRUE
                /* Data initialization. Note, it assumes that the DATA size
                  is a multiple of 4 so the linker file must ensure this.*/
                ldr     r1, =_textdata_start
 80001ec:	4919      	ldr	r1, [pc, #100]	; (8000254 <endfiniloop+0x18>)
                ldr     r2, =_data_start
 80001ee:	4a1a      	ldr	r2, [pc, #104]	; (8000258 <endfiniloop+0x1c>)
                ldr     r3, =_data_end
 80001f0:	4b1a      	ldr	r3, [pc, #104]	; (800025c <endfiniloop+0x20>)

080001f2 <dloop>:
dloop:
                cmp     r2, r3
 80001f2:	429a      	cmp	r2, r3
                ittt    lo
 80001f4:	bf3e      	ittt	cc
                ldrlo   r0, [r1], #4
 80001f6:	f851 0b04 	ldrcc.w	r0, [r1], #4
                strlo   r0, [r2], #4
 80001fa:	f842 0b04 	strcc.w	r0, [r2], #4
                blo     dloop
 80001fe:	e7f8      	bcc.n	80001f2 <dloop>
#endif

#if CRT0_INIT_BSS == TRUE
                /* BSS initialization. Note, it assumes that the DATA size
                  is a multiple of 4 so the linker file must ensure this.*/
                movs    r0, #0
 8000200:	2000      	movs	r0, #0
                ldr     r1, =_bss_start
 8000202:	4917      	ldr	r1, [pc, #92]	; (8000260 <endfiniloop+0x24>)
                ldr     r2, =_bss_end
 8000204:	4a17      	ldr	r2, [pc, #92]	; (8000264 <endfiniloop+0x28>)

08000206 <bloop>:
bloop:
                cmp     r1, r2
 8000206:	4291      	cmp	r1, r2
                itt     lo
 8000208:	bf3c      	itt	cc
                strlo   r0, [r1], #4
 800020a:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     bloop
 800020e:	e7fa      	bcc.n	8000206 <bloop>
#endif

#if CRT0_INIT_RAM_AREAS == TRUE
                /* RAM areas initialization.*/
                bl      __init_ram_areas
 8000210:	f007 f936 	bl	8007480 <__init_ram_areas>
#endif

                /* Late initialization..*/
                bl      __late_init
 8000214:	f007 f974 	bl	8007500 <__late_init>

#if CRT0_CALL_CONSTRUCTORS == TRUE
                /* Constructors invocation.*/
                ldr     r4, =__init_array_start
 8000218:	4c13      	ldr	r4, [pc, #76]	; (8000268 <endfiniloop+0x2c>)
                ldr     r5, =__init_array_end
 800021a:	4d14      	ldr	r5, [pc, #80]	; (800026c <endfiniloop+0x30>)

0800021c <initloop>:
initloop:
                cmp     r4, r5
 800021c:	42ac      	cmp	r4, r5
                bge     endinitloop
 800021e:	da03      	bge.n	8000228 <endinitloop>
                ldr     r1, [r4], #4
 8000220:	f854 1b04 	ldr.w	r1, [r4], #4
                blx     r1
 8000224:	4788      	blx	r1
                b       initloop
 8000226:	e7f9      	b.n	800021c <initloop>

08000228 <endinitloop>:
endinitloop:
#endif

                /* Main program invocation, r0 contains the returned value.*/
                bl      main
 8000228:	f002 fd5a 	bl	8002ce0 <main>

#if CRT0_CALL_DESTRUCTORS == TRUE
                /* Destructors invocation.*/
                ldr     r4, =__fini_array_start
 800022c:	4c10      	ldr	r4, [pc, #64]	; (8000270 <endfiniloop+0x34>)
                ldr     r5, =__fini_array_end
 800022e:	4d11      	ldr	r5, [pc, #68]	; (8000274 <endfiniloop+0x38>)

08000230 <finiloop>:
finiloop:
                cmp     r4, r5
 8000230:	42ac      	cmp	r4, r5
                bge     endfiniloop
 8000232:	da03      	bge.n	800023c <endfiniloop>
                ldr     r1, [r4], #4
 8000234:	f854 1b04 	ldr.w	r1, [r4], #4
                blx     r1
 8000238:	4788      	blx	r1
                b       finiloop
 800023a:	e7f9      	b.n	8000230 <finiloop>

0800023c <endfiniloop>:
endfiniloop:
#endif

                /* Branching to the defined exit handler.*/
                b       __default_exit
 800023c:	f007 b958 	b.w	80074f0 <__default_exit>
                ldr     r0, =__main_stack_end__
 8000240:	20000400 	.word	0x20000400
                ldr     r0, =__process_stack_end__
 8000244:	20000800 	.word	0x20000800
                ldr     r0, =_vectors
 8000248:	08000000 	.word	0x08000000
                ldr     r1, =__main_stack_base__
 800024c:	20000000 	.word	0x20000000
                ldr     r1, =__process_stack_base__
 8000250:	20000400 	.word	0x20000400
                ldr     r1, =_textdata_start
 8000254:	08009890 	.word	0x08009890
                ldr     r2, =_data_start
 8000258:	20000800 	.word	0x20000800
                ldr     r3, =_data_end
 800025c:	2000088c 	.word	0x2000088c
                ldr     r1, =_bss_start
 8000260:	20000890 	.word	0x20000890
                ldr     r2, =_bss_end
 8000264:	200013f8 	.word	0x200013f8
                ldr     r4, =__init_array_start
 8000268:	080001a0 	.word	0x080001a0
                ldr     r5, =__init_array_end
 800026c:	080001a0 	.word	0x080001a0
                ldr     r4, =__fini_array_start
 8000270:	080001a0 	.word	0x080001a0
                ldr     r5, =__fini_array_end
 8000274:	080001a0 	.word	0x080001a0

08000278 <Reset_Handler>:

        .align      2
        .thumb_func
        .weak       Reset_Handler
Reset_Handler:
         b          _crt0_entry
 8000278:	e792      	b.n	80001a0 <_crt0_entry>

0800027a <BusFault_Handler>:
        .thumb_func
Vector3F8:
        .thumb_func
Vector3FC:
#endif
        bl          _unhandled_exception
 800027a:	f000 f800 	bl	800027e <_unhandled_exception>

0800027e <_unhandled_exception>:

        .thumb_func
        .weak       _unhandled_exception
_unhandled_exception:
.stay:
        b           .stay
 800027e:	e7fe      	b.n	800027e <_unhandled_exception>

08000280 <_port_switch>:
 * Performs a context switch between two threads.
 *--------------------------------------------------------------------------*/
                .thumb_func
                .globl  _port_switch
_port_switch:
                push    {r4, r5, r6, r7, r8, r9, r10, r11, lr}
 8000280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#if CORTEX_USE_FPU
                vpush   {s16-s31}
#endif

                str     sp, [r1, #CONTEXT_OFFSET]
 8000284:	f8c1 d00c 	str.w	sp, [r1, #12]
#if (CORTEX_SIMPLIFIED_PRIORITY == FALSE) &&                                \
    ((CORTEX_MODEL == 3) || (CORTEX_MODEL == 4))
                /* Workaround for ARM errata 752419, only applied if
                   condition exists for it to be triggered.*/
                ldr     r3, [r0, #CONTEXT_OFFSET]
 8000288:	68c3      	ldr	r3, [r0, #12]
                mov     sp, r3
 800028a:	469d      	mov	sp, r3
#endif

#if CORTEX_USE_FPU
                vpop    {s16-s31}
#endif
                pop     {r4, r5, r6, r7, r8, r9, r10, r11, pc}
 800028c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000290 <_port_thread_start>:
                bl      _stats_stop_measure_crit_thd
#endif
#if CORTEX_SIMPLIFIED_PRIORITY
                cpsie   i
#else
                movs    r3, #0              /* CORTEX_BASEPRI_DISABLED */
 8000290:	2300      	movs	r3, #0
                msr     BASEPRI, r3
 8000292:	f383 8811 	msr	BASEPRI, r3
#endif
                mov     r0, r5
 8000296:	4628      	mov	r0, r5
                blx     r4
 8000298:	47a0      	blx	r4
#if defined(_CHIBIOS_RT_CONF_)
                movs    r0, #0              /* MSG_OK */
 800029a:	2000      	movs	r0, #0
                bl      chThdExit
 800029c:	f002 ff40 	bl	8003120 <chThdExit>

080002a0 <_port_switch_from_isr>:
                bl      _stats_start_measure_crit_thd
#endif
#if CH_DBG_SYSTEM_STATE_CHECK
                bl      _dbg_check_lock
#endif
                bl      chSchDoReschedule
 80002a0:	f002 ff6e 	bl	8003180 <chSchDoReschedule>

080002a4 <_port_exit_from_isr>:
                movt    r3, #:upper16:SCB_ICSR
                mov     r2, ICSR_PENDSVSET
                str     r2, [r3, #0]
                cpsie   i
#else /* !CORTEX_SIMPLIFIED_PRIORITY */
                svc     #0
 80002a4:	df00      	svc	0
#endif /* !CORTEX_SIMPLIFIED_PRIORITY */
.L1:            b       .L1
 80002a6:	e7fe      	b.n	80002a6 <_port_exit_from_isr+0x2>

080002a8 <memcpy>:
 80002a8:	4684      	mov	ip, r0
 80002aa:	ea41 0300 	orr.w	r3, r1, r0
 80002ae:	f013 0303 	ands.w	r3, r3, #3
 80002b2:	d16d      	bne.n	8000390 <memcpy+0xe8>
 80002b4:	3a40      	subs	r2, #64	; 0x40
 80002b6:	d341      	bcc.n	800033c <memcpy+0x94>
 80002b8:	f851 3b04 	ldr.w	r3, [r1], #4
 80002bc:	f840 3b04 	str.w	r3, [r0], #4
 80002c0:	f851 3b04 	ldr.w	r3, [r1], #4
 80002c4:	f840 3b04 	str.w	r3, [r0], #4
 80002c8:	f851 3b04 	ldr.w	r3, [r1], #4
 80002cc:	f840 3b04 	str.w	r3, [r0], #4
 80002d0:	f851 3b04 	ldr.w	r3, [r1], #4
 80002d4:	f840 3b04 	str.w	r3, [r0], #4
 80002d8:	f851 3b04 	ldr.w	r3, [r1], #4
 80002dc:	f840 3b04 	str.w	r3, [r0], #4
 80002e0:	f851 3b04 	ldr.w	r3, [r1], #4
 80002e4:	f840 3b04 	str.w	r3, [r0], #4
 80002e8:	f851 3b04 	ldr.w	r3, [r1], #4
 80002ec:	f840 3b04 	str.w	r3, [r0], #4
 80002f0:	f851 3b04 	ldr.w	r3, [r1], #4
 80002f4:	f840 3b04 	str.w	r3, [r0], #4
 80002f8:	f851 3b04 	ldr.w	r3, [r1], #4
 80002fc:	f840 3b04 	str.w	r3, [r0], #4
 8000300:	f851 3b04 	ldr.w	r3, [r1], #4
 8000304:	f840 3b04 	str.w	r3, [r0], #4
 8000308:	f851 3b04 	ldr.w	r3, [r1], #4
 800030c:	f840 3b04 	str.w	r3, [r0], #4
 8000310:	f851 3b04 	ldr.w	r3, [r1], #4
 8000314:	f840 3b04 	str.w	r3, [r0], #4
 8000318:	f851 3b04 	ldr.w	r3, [r1], #4
 800031c:	f840 3b04 	str.w	r3, [r0], #4
 8000320:	f851 3b04 	ldr.w	r3, [r1], #4
 8000324:	f840 3b04 	str.w	r3, [r0], #4
 8000328:	f851 3b04 	ldr.w	r3, [r1], #4
 800032c:	f840 3b04 	str.w	r3, [r0], #4
 8000330:	f851 3b04 	ldr.w	r3, [r1], #4
 8000334:	f840 3b04 	str.w	r3, [r0], #4
 8000338:	3a40      	subs	r2, #64	; 0x40
 800033a:	d2bd      	bcs.n	80002b8 <memcpy+0x10>
 800033c:	3230      	adds	r2, #48	; 0x30
 800033e:	d311      	bcc.n	8000364 <memcpy+0xbc>
 8000340:	f851 3b04 	ldr.w	r3, [r1], #4
 8000344:	f840 3b04 	str.w	r3, [r0], #4
 8000348:	f851 3b04 	ldr.w	r3, [r1], #4
 800034c:	f840 3b04 	str.w	r3, [r0], #4
 8000350:	f851 3b04 	ldr.w	r3, [r1], #4
 8000354:	f840 3b04 	str.w	r3, [r0], #4
 8000358:	f851 3b04 	ldr.w	r3, [r1], #4
 800035c:	f840 3b04 	str.w	r3, [r0], #4
 8000360:	3a10      	subs	r2, #16
 8000362:	d2ed      	bcs.n	8000340 <memcpy+0x98>
 8000364:	320c      	adds	r2, #12
 8000366:	d305      	bcc.n	8000374 <memcpy+0xcc>
 8000368:	f851 3b04 	ldr.w	r3, [r1], #4
 800036c:	f840 3b04 	str.w	r3, [r0], #4
 8000370:	3a04      	subs	r2, #4
 8000372:	d2f9      	bcs.n	8000368 <memcpy+0xc0>
 8000374:	3204      	adds	r2, #4
 8000376:	d008      	beq.n	800038a <memcpy+0xe2>
 8000378:	07d2      	lsls	r2, r2, #31
 800037a:	bf1c      	itt	ne
 800037c:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8000380:	f800 3b01 	strbne.w	r3, [r0], #1
 8000384:	d301      	bcc.n	800038a <memcpy+0xe2>
 8000386:	880b      	ldrh	r3, [r1, #0]
 8000388:	8003      	strh	r3, [r0, #0]
 800038a:	4660      	mov	r0, ip
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop
 8000390:	2a08      	cmp	r2, #8
 8000392:	d313      	bcc.n	80003bc <memcpy+0x114>
 8000394:	078b      	lsls	r3, r1, #30
 8000396:	d08d      	beq.n	80002b4 <memcpy+0xc>
 8000398:	f010 0303 	ands.w	r3, r0, #3
 800039c:	d08a      	beq.n	80002b4 <memcpy+0xc>
 800039e:	f1c3 0304 	rsb	r3, r3, #4
 80003a2:	1ad2      	subs	r2, r2, r3
 80003a4:	07db      	lsls	r3, r3, #31
 80003a6:	bf1c      	itt	ne
 80003a8:	f811 3b01 	ldrbne.w	r3, [r1], #1
 80003ac:	f800 3b01 	strbne.w	r3, [r0], #1
 80003b0:	d380      	bcc.n	80002b4 <memcpy+0xc>
 80003b2:	f831 3b02 	ldrh.w	r3, [r1], #2
 80003b6:	f820 3b02 	strh.w	r3, [r0], #2
 80003ba:	e77b      	b.n	80002b4 <memcpy+0xc>
 80003bc:	3a04      	subs	r2, #4
 80003be:	d3d9      	bcc.n	8000374 <memcpy+0xcc>
 80003c0:	3a01      	subs	r2, #1
 80003c2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80003c6:	f800 3b01 	strb.w	r3, [r0], #1
 80003ca:	d2f9      	bcs.n	80003c0 <memcpy+0x118>
 80003cc:	780b      	ldrb	r3, [r1, #0]
 80003ce:	7003      	strb	r3, [r0, #0]
 80003d0:	784b      	ldrb	r3, [r1, #1]
 80003d2:	7043      	strb	r3, [r0, #1]
 80003d4:	788b      	ldrb	r3, [r1, #2]
 80003d6:	7083      	strb	r3, [r0, #2]
 80003d8:	4660      	mov	r0, ip
 80003da:	4770      	bx	lr
 80003dc:	0000      	movs	r0, r0
	...

080003e0 <chTMStartMeasurementX.constprop.63>:
 *
 * @return              The realtime counter value.
 */
static inline rtcnt_t port_rt_get_counter_value(void) {

  return DWT->CYCCNT;
 80003e0:	4b01      	ldr	r3, [pc, #4]	; (80003e8 <chTMStartMeasurementX.constprop.63+0x8>)
 80003e2:	685b      	ldr	r3, [r3, #4]
 *
 * @xclass
 */
NOINLINE void chTMStartMeasurementX(time_measurement_t *tmp) {

  tmp->last = chSysGetRealtimeCounterX();
 80003e4:	6083      	str	r3, [r0, #8]
}
 80003e6:	4770      	bx	lr
 80003e8:	e0001000 	.word	0xe0001000
 80003ec:	00000000 	.word	0x00000000

080003f0 <chMtxTryLock.constprop.53>:
  \details Assigns the given value to the Base Priority register.
  \param [in]    basePri  Base Priority value to set
 */
__STATIC_FORCEINLINE void __set_BASEPRI(uint32_t basePri)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 80003f0:	2320      	movs	r3, #32
 80003f2:	f383 8811 	msr	BASEPRI, r3
bool chMtxTryLockS(mutex_t *mp) {

  chDbgCheckClassS();
  chDbgCheck(mp != NULL);

  if (mp->owner != NULL) {
 80003f6:	4b09      	ldr	r3, [pc, #36]	; (800041c <chMtxTryLock.constprop.53+0x2c>)
 80003f8:	689a      	ldr	r2, [r3, #8]
 80003fa:	b122      	cbz	r2, 8000406 <chMtxTryLock.constprop.53+0x16>
    if (mp->owner == currp) {
      mp->cnt++;
      return true;
    }
#endif
    return false;
 80003fc:	2000      	movs	r0, #0
 80003fe:	2300      	movs	r3, #0
 8000400:	f383 8811 	msr	BASEPRI, r3
}
 8000404:	4770      	bx	lr

  chDbgAssert(mp->cnt == (cnt_t)0, "counter is not zero");

  mp->cnt++;
#endif
  mp->owner = currp;
 8000406:	4a06      	ldr	r2, [pc, #24]	; (8000420 <chMtxTryLock.constprop.53+0x30>)
 8000408:	6992      	ldr	r2, [r2, #24]
 800040a:	609a      	str	r2, [r3, #8]
  mp->next = currp->mtxlist;
 800040c:	6b91      	ldr	r1, [r2, #56]	; 0x38
 800040e:	60d9      	str	r1, [r3, #12]
  currp->mtxlist = mp;
 8000410:	6393      	str	r3, [r2, #56]	; 0x38
 8000412:	2001      	movs	r0, #1
 8000414:	2300      	movs	r3, #0
 8000416:	f383 8811 	msr	BASEPRI, r3
}
 800041a:	4770      	bx	lr
 800041c:	2000082c 	.word	0x2000082c
 8000420:	200008f0 	.word	0x200008f0
	...

08000430 <chEvtGetAndClearEvents.constprop.43>:
 8000430:	2320      	movs	r3, #32
 8000432:	f383 8811 	msr	BASEPRI, r3
 * @iclass
 */
eventmask_t chEvtGetAndClearEventsI(eventmask_t events) {
  eventmask_t m;

  m = currp->epending & events;
 8000436:	4b04      	ldr	r3, [pc, #16]	; (8000448 <chEvtGetAndClearEvents.constprop.43+0x18>)
 8000438:	699a      	ldr	r2, [r3, #24]
  currp->epending &= ~events;
 800043a:	2300      	movs	r3, #0
  m = currp->epending & events;
 800043c:	6b50      	ldr	r0, [r2, #52]	; 0x34
  currp->epending &= ~events;
 800043e:	6353      	str	r3, [r2, #52]	; 0x34
 8000440:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  m = chEvtGetAndClearEventsI(events);
  chSysUnlock();

  return m;
}
 8000444:	4770      	bx	lr
 8000446:	bf00      	nop
 8000448:	200008f0 	.word	0x200008f0
 800044c:	00000000 	.word	0x00000000

08000450 <_test_assert_time_window.constprop.2>:
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 8000450:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 */
static inline bool chTimeIsInRangeX(systime_t time,
                                    systime_t start,
                                    systime_t end) {

  return (bool)((time - start) < (end - start));
 8000454:	1a09      	subs	r1, r1, r0
 8000456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000458:	1a1b      	subs	r3, r3, r0
  return true;
}

bool _test_assert(bool condition, const char *msg) {

  if (!condition)
 800045a:	428b      	cmp	r3, r1
 800045c:	d308      	bcc.n	8000470 <_test_assert_time_window.constprop.2+0x20>
  test_failure_message = msg;
 800045e:	4905      	ldr	r1, [pc, #20]	; (8000474 <_test_assert_time_window.constprop.2+0x24>)
  test_local_fail      = true;
 8000460:	4a05      	ldr	r2, [pc, #20]	; (8000478 <_test_assert_time_window.constprop.2+0x28>)
  test_global_fail     = true;
 8000462:	4b06      	ldr	r3, [pc, #24]	; (800047c <_test_assert_time_window.constprop.2+0x2c>)
  test_failure_message = msg;
 8000464:	4806      	ldr	r0, [pc, #24]	; (8000480 <_test_assert_time_window.constprop.2+0x30>)
 8000466:	6008      	str	r0, [r1, #0]
  test_local_fail      = true;
 8000468:	2001      	movs	r0, #1
 800046a:	7010      	strb	r0, [r2, #0]
  test_global_fail     = true;
 800046c:	7018      	strb	r0, [r3, #0]
 800046e:	4770      	bx	lr
    return _test_fail(msg);
  return false;
 8000470:	2000      	movs	r0, #0
                              systime_t end,
                              const char *msg) {

  return _test_assert(osalTimeIsInRangeX(osalOsGetSystemTimeX(), start, end),
                      msg);
}
 8000472:	4770      	bx	lr
 8000474:	200011ac 	.word	0x200011ac
 8000478:	20001250 	.word	0x20001250
 800047c:	200011b0 	.word	0x200011b0
 8000480:	080076ac 	.word	0x080076ac
	...

08000490 <chCoreAllocAlignedWithOffset>:
 *
 * @api
 */
void *chCoreAllocAlignedWithOffset(size_t size,
                                   unsigned align,
                                   size_t offset) {
 8000490:	b4f0      	push	{r4, r5, r6, r7}
 8000492:	2320      	movs	r3, #32
 8000494:	f383 8811 	msr	BASEPRI, r3
  p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.nextmem + offset, align);
 8000498:	4d0d      	ldr	r5, [pc, #52]	; (80004d0 <chCoreAllocAlignedWithOffset+0x40>)
  if ((next > ch_memcore.endmem) || (next < ch_memcore.nextmem)) {
 800049a:	e9d5 7400 	ldrd	r7, r4, [r5]
 800049e:	1e4e      	subs	r6, r1, #1
  p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.nextmem + offset, align);
 80004a0:	443a      	add	r2, r7
  size = MEM_ALIGN_NEXT(size, align);
 80004a2:	1983      	adds	r3, r0, r6
 80004a4:	4249      	negs	r1, r1
  p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.nextmem + offset, align);
 80004a6:	1990      	adds	r0, r2, r6
  size = MEM_ALIGN_NEXT(size, align);
 80004a8:	400b      	ands	r3, r1
  p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.nextmem + offset, align);
 80004aa:	4008      	ands	r0, r1
  next = p + size;
 80004ac:	4403      	add	r3, r0
  if ((next > ch_memcore.endmem) || (next < ch_memcore.nextmem)) {
 80004ae:	42a3      	cmp	r3, r4
 80004b0:	d807      	bhi.n	80004c2 <chCoreAllocAlignedWithOffset+0x32>
 80004b2:	429f      	cmp	r7, r3
 80004b4:	d805      	bhi.n	80004c2 <chCoreAllocAlignedWithOffset+0x32>
  ch_memcore.nextmem = next;
 80004b6:	602b      	str	r3, [r5, #0]
 80004b8:	2300      	movs	r3, #0
 80004ba:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  p = chCoreAllocAlignedWithOffsetI(size, align, offset);
  chSysUnlock();

  return p;
}
 80004be:	bcf0      	pop	{r4, r5, r6, r7}
 80004c0:	4770      	bx	lr
    return NULL;
 80004c2:	2000      	movs	r0, #0
 80004c4:	2300      	movs	r3, #0
 80004c6:	f383 8811 	msr	BASEPRI, r3
}
 80004ca:	bcf0      	pop	{r4, r5, r6, r7}
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop
 80004d0:	20000a88 	.word	0x20000a88
	...

080004e0 <notify2>:

#if STM32_SERIAL_USE_USART2 || defined(__DOXYGEN__)
static void notify2(io_queue_t *qp) {

  (void)qp;
  USART2->CR1 |= USART_CR1_TXEIE | USART_CR1_TCIE;
 80004e0:	4a02      	ldr	r2, [pc, #8]	; (80004ec <notify2+0xc>)
 80004e2:	6813      	ldr	r3, [r2, #0]
 80004e4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80004e8:	6013      	str	r3, [r2, #0]
}
 80004ea:	4770      	bx	lr
 80004ec:	40004400 	.word	0x40004400

080004f0 <oslib_test_003_001_setup>:
 * @param[in] size      heap size
 *
 * @init
 */
void chHeapObjectInit(memory_heap_t *heapp, void *buf, size_t size) {
  heap_header_t *hp = (heap_header_t *)MEM_ALIGN_NEXT(buf, CH_HEAP_ALIGNMENT);
 80004f0:	4b0b      	ldr	r3, [pc, #44]	; (8000520 <oslib_test_003_001_setup+0x30>)
  /*lint -save -e9033 [10.8] Required cast operations.*/
  size -= (size_t)((uint8_t *)hp - (uint8_t *)buf);
  /*lint restore*/

  /* Initializing the heap header.*/
  heapp->provider = NULL;
 80004f2:	4a0c      	ldr	r2, [pc, #48]	; (8000524 <oslib_test_003_001_setup+0x34>)
  heap_header_t *hp = (heap_header_t *)MEM_ALIGN_NEXT(buf, CH_HEAP_ALIGNMENT);
 80004f4:	1dd9      	adds	r1, r3, #7
 80004f6:	f021 0107 	bic.w	r1, r1, #7
  size -= (size_t)((uint8_t *)hp - (uint8_t *)buf);
 80004fa:	1acb      	subs	r3, r1, r3
  H_NEXT(&heapp->header) = hp;
  H_PAGES(&heapp->header) = 0;
  H_NEXT(hp) = NULL;
  H_PAGES(hp) = (size - sizeof (heap_header_t)) / CH_HEAP_ALIGNMENT;
 80004fc:	f1c3 0378 	rsb	r3, r3, #120	; 0x78
 * - [3.1.10] Testing final conditions. The heap geometry must be the
 *   same than the one registered at beginning.
 * .
 */

static void oslib_test_003_001_setup(void) {
 8000500:	b410      	push	{r4}
  heapp->provider = NULL;
 8000502:	2000      	movs	r0, #0
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->next = (thread_t *)tqp;
 8000504:	f102 040c 	add.w	r4, r2, #12
  H_PAGES(hp) = (size - sizeof (heap_header_t)) / CH_HEAP_ALIGNMENT;
 8000508:	08db      	lsrs	r3, r3, #3
 800050a:	604b      	str	r3, [r1, #4]
  H_NEXT(&heapp->header) = hp;
 800050c:	6051      	str	r1, [r2, #4]
  H_NEXT(hp) = NULL;
 800050e:	6008      	str	r0, [r1, #0]
  tqp->prev = (thread_t *)tqp;
 8000510:	e9c2 4403 	strd	r4, r4, [r2, #12]
  heapp->provider = NULL;
 8000514:	6010      	str	r0, [r2, #0]
  H_PAGES(&heapp->header) = 0;
 8000516:	6090      	str	r0, [r2, #8]
  mp->owner = NULL;
 8000518:	6150      	str	r0, [r2, #20]
  chHeapObjectInit(&test_heap, test_heap_buffer, sizeof(test_heap_buffer));
}
 800051a:	bc10      	pop	{r4}
 800051c:	4770      	bx	lr
 800051e:	bf00      	nop
 8000520:	200011d0 	.word	0x200011d0
 8000524:	200011b4 	.word	0x200011b4
	...

08000530 <oslib_test_002_003_setup>:
void chPoolObjectInitAligned(memory_pool_t *mp, size_t size,
                             unsigned align, memgetfunc_t provider) {

  chDbgCheck((mp != NULL) && (size >= sizeof(void *)));

  mp->next = NULL;
 8000530:	4b05      	ldr	r3, [pc, #20]	; (8000548 <oslib_test_002_003_setup+0x18>)
 8000532:	2200      	movs	r2, #0
  mp->object_size = size;
 8000534:	2104      	movs	r1, #4
 8000536:	e9c3 3300 	strd	r3, r3, [r3]
  mp->next = NULL;
 800053a:	60da      	str	r2, [r3, #12]
  mp->align = align;
  mp->provider = provider;
 800053c:	619a      	str	r2, [r3, #24]
void chSemObjectInit(semaphore_t *sp, cnt_t n) {

  chDbgCheck((sp != NULL) && (n >= (cnt_t)0));

  queue_init(&sp->queue);
  sp->cnt = n;
 800053e:	609a      	str	r2, [r3, #8]
  mp->align = align;
 8000540:	e9c3 1104 	strd	r1, r1, [r3, #16]
 * .
 */

static void oslib_test_002_003_setup(void) {
  chGuardedPoolObjectInit(&gmp1, sizeof (uint32_t));
}
 8000544:	4770      	bx	lr
 8000546:	bf00      	nop
 8000548:	20000810 	.word	0x20000810
 800054c:	00000000 	.word	0x00000000

08000550 <oslib_test_002_002_setup>:
 8000550:	f7ff bfee 	b.w	8000530 <oslib_test_002_003_setup>
	...

08000560 <null_provider>:
}
 8000560:	2000      	movs	r0, #0
 8000562:	4770      	bx	lr
	...

08000570 <oslib_test_002_001_setup>:
  mp->next = NULL;
 8000570:	4b03      	ldr	r3, [pc, #12]	; (8000580 <oslib_test_002_001_setup+0x10>)
 8000572:	2100      	movs	r1, #0
  mp->object_size = size;
 8000574:	2204      	movs	r2, #4
  mp->next = NULL;
 8000576:	6019      	str	r1, [r3, #0]
  mp->provider = provider;
 8000578:	60d9      	str	r1, [r3, #12]
  mp->align = align;
 800057a:	e9c3 2201 	strd	r2, r2, [r3, #4]
}
 800057e:	4770      	bx	lr
 8000580:	20000874 	.word	0x20000874
	...

08000590 <oslib_test_001_003_setup>:
 *   active state.
 * - [1.3.4] Testing chMBFetchTimeout() and chMBFetchI() timeout.
 * .
 */

static void oslib_test_001_003_setup(void) {
 8000590:	b430      	push	{r4, r5}
 */
void chMBObjectInit(mailbox_t *mbp, msg_t *buf, size_t n) {

  chDbgCheck((mbp != NULL) && (buf != NULL) && (n > (size_t)0));

  mbp->buffer = buf;
 8000592:	4b0a      	ldr	r3, [pc, #40]	; (80005bc <oslib_test_001_003_setup+0x2c>)
 8000594:	4a0a      	ldr	r2, [pc, #40]	; (80005c0 <oslib_test_001_003_setup+0x30>)
 8000596:	601a      	str	r2, [r3, #0]
  mbp->rdptr  = buf;
  mbp->wrptr  = buf;
  mbp->top    = &buf[n];
 8000598:	f102 0510 	add.w	r5, r2, #16
  tqp->next = (thread_t *)tqp;
 800059c:	f103 0418 	add.w	r4, r3, #24
  mbp->cnt    = (size_t)0;
 80005a0:	2100      	movs	r1, #0
 80005a2:	f103 0020 	add.w	r0, r3, #32
  mbp->top    = &buf[n];
 80005a6:	605d      	str	r5, [r3, #4]
  tqp->prev = (thread_t *)tqp;
 80005a8:	e9c3 4406 	strd	r4, r4, [r3, #24]
  mbp->wrptr  = buf;
 80005ac:	e9c3 2202 	strd	r2, r2, [r3, #8]
 80005b0:	e9c3 0008 	strd	r0, r0, [r3, #32]
  mbp->cnt    = (size_t)0;
 80005b4:	6119      	str	r1, [r3, #16]
  mbp->reset  = false;
 80005b6:	7519      	strb	r1, [r3, #20]
  chMBObjectInit(&mb1, mb_buffer, MB_SIZE);
}
 80005b8:	bc30      	pop	{r4, r5}
 80005ba:	4770      	bx	lr
 80005bc:	2000084c 	.word	0x2000084c
 80005c0:	20000ac8 	.word	0x20000ac8
	...

080005d0 <oslib_test_001_002_setup>:
 80005d0:	f7ff bfde 	b.w	8000590 <oslib_test_001_003_setup>
	...

080005e0 <oslib_test_001_001_setup>:
 80005e0:	f7ff bfd6 	b.w	8000590 <oslib_test_001_003_setup>
	...

080005f0 <rt_test_010_011_setup>:
  tqp->next = (thread_t *)tqp;
 80005f0:	4b02      	ldr	r3, [pc, #8]	; (80005fc <rt_test_010_011_setup+0xc>)
 80005f2:	2200      	movs	r2, #0
  tqp->prev = (thread_t *)tqp;
 80005f4:	e9c3 3300 	strd	r3, r3, [r3]
 80005f8:	609a      	str	r2, [r3, #8]
 * .
 */

static void rt_test_010_011_setup(void) {
  chMtxObjectInit(&mtx1);
}
 80005fa:	4770      	bx	lr
 80005fc:	20000ae8 	.word	0x20000ae8

08000600 <rt_test_010_010_setup>:
  tqp->next = (thread_t *)tqp;
 8000600:	4b02      	ldr	r3, [pc, #8]	; (800060c <rt_test_010_010_setup+0xc>)
 8000602:	2201      	movs	r2, #1
  tqp->prev = (thread_t *)tqp;
 8000604:	e9c3 3300 	strd	r3, r3, [r3]
 8000608:	609a      	str	r2, [r3, #8]
}
 800060a:	4770      	bx	lr
 800060c:	20000b34 	.word	0x20000b34

08000610 <tmo>:
static void tmo(void *param) {(void)param;}
 8000610:	4770      	bx	lr
 8000612:	bf00      	nop
	...

08000620 <rt_test_010_007_setup>:
  tqp->next = (thread_t *)tqp;
 8000620:	4b02      	ldr	r3, [pc, #8]	; (800062c <rt_test_010_007_setup+0xc>)
 8000622:	2200      	movs	r2, #0
  tqp->prev = (thread_t *)tqp;
 8000624:	e9c3 3300 	strd	r3, r3, [r3]
 8000628:	609a      	str	r2, [r3, #8]
}
 800062a:	4770      	bx	lr
 800062c:	20000b34 	.word	0x20000b34

08000630 <rt_test_009_002_setup>:
  mp->next = NULL;
 8000630:	4b04      	ldr	r3, [pc, #16]	; (8000644 <rt_test_009_002_setup+0x14>)
 8000632:	2200      	movs	r2, #0
  mp->object_size = size;
 8000634:	f44f 70a4 	mov.w	r0, #328	; 0x148
  mp->align = align;
 8000638:	2104      	movs	r1, #4
 800063a:	e9c3 0101 	strd	r0, r1, [r3, #4]
  mp->next = NULL;
 800063e:	601a      	str	r2, [r3, #0]
  mp->provider = provider;
 8000640:	60da      	str	r2, [r3, #12]
 * .
 */

static void rt_test_009_002_setup(void) {
  chPoolObjectInit(&mp1, THD_WORKING_AREA_SIZE(THREADS_STACK_SIZE), NULL);
}
 8000642:	4770      	bx	lr
 8000644:	20000ad8 	.word	0x20000ad8
	...

08000650 <rt_test_009_001_setup>:
  heap_header_t *hp = (heap_header_t *)MEM_ALIGN_NEXT(buf, CH_HEAP_ALIGNMENT);
 8000650:	4b0b      	ldr	r3, [pc, #44]	; (8000680 <rt_test_009_001_setup+0x30>)
  heapp->provider = NULL;
 8000652:	4a0c      	ldr	r2, [pc, #48]	; (8000684 <rt_test_009_001_setup+0x34>)
  heap_header_t *hp = (heap_header_t *)MEM_ALIGN_NEXT(buf, CH_HEAP_ALIGNMENT);
 8000654:	1dd9      	adds	r1, r3, #7
 8000656:	f021 0107 	bic.w	r1, r1, #7
  size -= (size_t)((uint8_t *)hp - (uint8_t *)buf);
 800065a:	1acb      	subs	r3, r1, r3
  H_PAGES(hp) = (size - sizeof (heap_header_t)) / CH_HEAP_ALIGNMENT;
 800065c:	f5c3 63cc 	rsb	r3, r3, #1632	; 0x660
static void rt_test_009_001_setup(void) {
 8000660:	b410      	push	{r4}
  heapp->provider = NULL;
 8000662:	2000      	movs	r0, #0
  tqp->next = (thread_t *)tqp;
 8000664:	f102 040c 	add.w	r4, r2, #12
  H_PAGES(hp) = (size - sizeof (heap_header_t)) / CH_HEAP_ALIGNMENT;
 8000668:	08db      	lsrs	r3, r3, #3
 800066a:	604b      	str	r3, [r1, #4]
  H_NEXT(&heapp->header) = hp;
 800066c:	6051      	str	r1, [r2, #4]
  H_NEXT(hp) = NULL;
 800066e:	6008      	str	r0, [r1, #0]
  tqp->prev = (thread_t *)tqp;
 8000670:	e9c2 4403 	strd	r4, r4, [r2, #12]
  heapp->provider = NULL;
 8000674:	6010      	str	r0, [r2, #0]
  H_PAGES(&heapp->header) = 0;
 8000676:	6090      	str	r0, [r2, #8]
 8000678:	6150      	str	r0, [r2, #20]
}
 800067a:	bc10      	pop	{r4}
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop
 8000680:	20000b40 	.word	0x20000b40
 8000684:	20000aac 	.word	0x20000aac
	...

08000690 <rt_test_008_007_setup>:
 *   has been emptied.
 * - [8.7.4] Unregistering from the Event Sources.
 * .
 */

static void rt_test_008_007_setup(void) {
 8000690:	b508      	push	{r3, lr}
  chEvtGetAndClearEvents(ALL_EVENTS);
 8000692:	f7ff fecd 	bl	8000430 <chEvtGetAndClearEvents.constprop.43>
 *
 * @init
 */
static inline void chEvtObjectInit(event_source_t *esp) {

  esp->next = (event_listener_t *)esp;
 8000696:	4a02      	ldr	r2, [pc, #8]	; (80006a0 <rt_test_008_007_setup+0x10>)
 8000698:	4b02      	ldr	r3, [pc, #8]	; (80006a4 <rt_test_008_007_setup+0x14>)
 800069a:	6012      	str	r2, [r2, #0]
 800069c:	601b      	str	r3, [r3, #0]
  chEvtObjectInit(&es1);
  chEvtObjectInit(&es2);
}
 800069e:	bd08      	pop	{r3, pc}
 80006a0:	20000808 	.word	0x20000808
 80006a4:	2000080c 	.word	0x2000080c
	...

080006b0 <rt_test_008_006_setup>:
  chEvtGetAndClearEvents(ALL_EVENTS);
 80006b0:	f7ff bebe 	b.w	8000430 <chEvtGetAndClearEvents.constprop.43>
	...

080006c0 <rt_test_008_005_setup>:
 80006c0:	f7ff bff6 	b.w	80006b0 <rt_test_008_006_setup>
	...

080006d0 <rt_test_008_004_setup>:
 80006d0:	f7ff bfee 	b.w	80006b0 <rt_test_008_006_setup>
	...

080006e0 <rt_test_008_003_setup>:
 80006e0:	f7ff bfe6 	b.w	80006b0 <rt_test_008_006_setup>
	...

080006f0 <rt_test_008_002_setup>:
 80006f0:	f7ff bfde 	b.w	80006b0 <rt_test_008_006_setup>
	...

08000700 <rt_test_006_009_setup>:
  tqp->next = (thread_t *)tqp;
 8000700:	4906      	ldr	r1, [pc, #24]	; (800071c <rt_test_006_009_setup+0x1c>)
 8000702:	4a07      	ldr	r2, [pc, #28]	; (8000720 <rt_test_006_009_setup+0x20>)
 8000704:	4b07      	ldr	r3, [pc, #28]	; (8000724 <rt_test_006_009_setup+0x24>)
 8000706:	6009      	str	r1, [r1, #0]
 8000708:	2000      	movs	r0, #0
  tqp->prev = (thread_t *)tqp;
 800070a:	6049      	str	r1, [r1, #4]
 800070c:	e9c2 2200 	strd	r2, r2, [r2]
 8000710:	6090      	str	r0, [r2, #8]
 8000712:	6098      	str	r0, [r3, #8]
 8000714:	e9c3 3300 	strd	r3, r3, [r3]

static void rt_test_006_009_setup(void) {
  chCondObjectInit(&c1);
  chMtxObjectInit(&m1);
  chMtxObjectInit(&m2);
}
 8000718:	4770      	bx	lr
 800071a:	bf00      	nop
 800071c:	20000800 	.word	0x20000800
 8000720:	2000082c 	.word	0x2000082c
 8000724:	2000083c 	.word	0x2000083c
	...

08000730 <rt_test_006_008_setup>:
  tqp->next = (thread_t *)tqp;
 8000730:	4a04      	ldr	r2, [pc, #16]	; (8000744 <rt_test_006_008_setup+0x14>)
 8000732:	4b05      	ldr	r3, [pc, #20]	; (8000748 <rt_test_006_008_setup+0x18>)
 8000734:	6012      	str	r2, [r2, #0]
 8000736:	2100      	movs	r1, #0
  tqp->prev = (thread_t *)tqp;
 8000738:	6052      	str	r2, [r2, #4]
 800073a:	e9c3 3300 	strd	r3, r3, [r3]
 800073e:	6099      	str	r1, [r3, #8]
}
 8000740:	4770      	bx	lr
 8000742:	bf00      	nop
 8000744:	20000800 	.word	0x20000800
 8000748:	2000082c 	.word	0x2000082c
 800074c:	00000000 	.word	0x00000000

08000750 <rt_test_006_007_setup>:
 8000750:	f7ff bfee 	b.w	8000730 <rt_test_006_008_setup>
	...

08000760 <rt_test_006_005_setup>:
  tqp->next = (thread_t *)tqp;
 8000760:	4b02      	ldr	r3, [pc, #8]	; (800076c <rt_test_006_005_setup+0xc>)
 8000762:	2200      	movs	r2, #0
  tqp->prev = (thread_t *)tqp;
 8000764:	e9c3 3300 	strd	r3, r3, [r3]
 8000768:	609a      	str	r2, [r3, #8]
}
 800076a:	4770      	bx	lr
 800076c:	2000082c 	.word	0x2000082c

08000770 <rt_test_006_004_setup>:
  tqp->next = (thread_t *)tqp;
 8000770:	4a04      	ldr	r2, [pc, #16]	; (8000784 <rt_test_006_004_setup+0x14>)
 8000772:	4b05      	ldr	r3, [pc, #20]	; (8000788 <rt_test_006_004_setup+0x18>)
 8000774:	6012      	str	r2, [r2, #0]
 8000776:	2100      	movs	r1, #0
 8000778:	e9c2 2101 	strd	r2, r1, [r2, #4]
 800077c:	6099      	str	r1, [r3, #8]
  tqp->prev = (thread_t *)tqp;
 800077e:	e9c3 3300 	strd	r3, r3, [r3]
}
 8000782:	4770      	bx	lr
 8000784:	2000082c 	.word	0x2000082c
 8000788:	2000083c 	.word	0x2000083c
 800078c:	00000000 	.word	0x00000000

08000790 <rt_test_006_001_setup>:
 8000790:	f7ff bfe6 	b.w	8000760 <rt_test_006_005_setup>
	...

080007a0 <rt_test_005_005_setup>:
  tqp->next = (thread_t *)tqp;
 80007a0:	4b02      	ldr	r3, [pc, #8]	; (80007ac <rt_test_005_005_setup+0xc>)
 80007a2:	2200      	movs	r2, #0
  tqp->prev = (thread_t *)tqp;
 80007a4:	e9c3 3300 	strd	r3, r3, [r3]
 80007a8:	609a      	str	r2, [r3, #8]
 * .
 */

static void rt_test_005_005_setup(void) {
  chSemObjectInit(&sem1, 0);
}
 80007aa:	4770      	bx	lr
 80007ac:	20000b28 	.word	0x20000b28

080007b0 <rt_test_005_004_setup>:
 80007b0:	f7ff bff6 	b.w	80007a0 <rt_test_005_005_setup>
	...

080007c0 <rt_test_005_003_setup>:
 80007c0:	f7ff bfee 	b.w	80007a0 <rt_test_005_005_setup>
	...

080007d0 <rt_test_005_002_setup>:
 80007d0:	f7ff bfe6 	b.w	80007a0 <rt_test_005_005_setup>
	...

080007e0 <rt_test_005_001_setup>:
  tqp->next = (thread_t *)tqp;
 80007e0:	4b02      	ldr	r3, [pc, #8]	; (80007ec <rt_test_005_001_setup+0xc>)
 80007e2:	2201      	movs	r2, #1
  tqp->prev = (thread_t *)tqp;
 80007e4:	e9c3 3300 	strd	r3, r3, [r3]
 80007e8:	609a      	str	r2, [r3, #8]
}
 80007ea:	4770      	bx	lr
 80007ec:	20000b28 	.word	0x20000b28

080007f0 <rt_test_004_001_setup>:
 *   the state of the reference are tested.
 * .
 */

static void rt_test_004_001_setup(void) {
  tr1 = NULL;
 80007f0:	4b01      	ldr	r3, [pc, #4]	; (80007f8 <rt_test_004_001_setup+0x8>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	601a      	str	r2, [r3, #0]
}
 80007f6:	4770      	bx	lr
 80007f8:	20001280 	.word	0x20001280
 80007fc:	00000000 	.word	0x00000000

08000800 <_test_assert>:
  if (!condition)
 8000800:	b948      	cbnz	r0, 8000816 <_test_assert+0x16>
bool _test_assert(bool condition, const char *msg) {
 8000802:	b410      	push	{r4}
  test_global_fail     = true;
 8000804:	4a05      	ldr	r2, [pc, #20]	; (800081c <_test_assert+0x1c>)
  test_local_fail      = true;
 8000806:	4c06      	ldr	r4, [pc, #24]	; (8000820 <_test_assert+0x20>)
  test_failure_message = msg;
 8000808:	4b06      	ldr	r3, [pc, #24]	; (8000824 <_test_assert+0x24>)
  test_local_fail      = true;
 800080a:	2001      	movs	r0, #1
 800080c:	7020      	strb	r0, [r4, #0]
  test_global_fail     = true;
 800080e:	7010      	strb	r0, [r2, #0]
  test_failure_message = msg;
 8000810:	6019      	str	r1, [r3, #0]
}
 8000812:	bc10      	pop	{r4}
 8000814:	4770      	bx	lr
  return false;
 8000816:	2000      	movs	r0, #0
}
 8000818:	4770      	bx	lr
 800081a:	bf00      	nop
 800081c:	200011b0 	.word	0x200011b0
 8000820:	20001250 	.word	0x20001250
 8000824:	200011ac 	.word	0x200011ac
	...

08000830 <rt_test_002_004_execute>:

static void rt_test_002_004_execute(void) {

  /* [2.4.1] A System Tick Counter increment is expected, the test
     simply hangs if it does not happen.*/
  test_set_step(1);
 8000830:	4b04      	ldr	r3, [pc, #16]	; (8000844 <rt_test_002_004_execute+0x14>)
 8000832:	2101      	movs	r1, #1
 8000834:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000838:	6019      	str	r1, [r3, #0]
 800083a:	6a51      	ldr	r1, [r2, #36]	; 0x24
 800083c:	6a53      	ldr	r3, [r2, #36]	; 0x24
  {
    systime_t time = chVTGetSystemTimeX();
    while (time == chVTGetSystemTimeX()) {
 800083e:	4299      	cmp	r1, r3
 8000840:	d0fc      	beq.n	800083c <rt_test_002_004_execute+0xc>
#if defined(SIMULATOR)
      _sim_check_for_interrupts();
#endif
    }
  }
}
 8000842:	4770      	bx	lr
 8000844:	20001254 	.word	0x20001254
	...

08000850 <rt_test_002_003_execute>:
  test_set_step(1);
 8000850:	4b07      	ldr	r3, [pc, #28]	; (8000870 <rt_test_002_003_execute+0x20>)
 8000852:	2201      	movs	r2, #1
 8000854:	601a      	str	r2, [r3, #0]
 8000856:	2320      	movs	r3, #32
 8000858:	f383 8811 	msr	BASEPRI, r3
  __ASM volatile ("cpsie i" : : : "memory");
 800085c:	b662      	cpsie	i
  __ASM volatile ("cpsid i" : : : "memory");
 800085e:	b672      	cpsid	i
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8000860:	f383 8811 	msr	BASEPRI, r3
  __ASM volatile ("cpsie i" : : : "memory");
 8000864:	b662      	cpsie	i
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8000866:	2300      	movs	r3, #0
 8000868:	f383 8811 	msr	BASEPRI, r3
  __ASM volatile ("cpsie i" : : : "memory");
 800086c:	b662      	cpsie	i
}
 800086e:	4770      	bx	lr
 8000870:	20001254 	.word	0x20001254
	...

08000880 <test_terminate_threads>:
                         test_buffer + (WA_SIZE * 4)};

/*
 * Sets a termination request in all the test-spawned threads.
 */
void test_terminate_threads(void) {
 8000880:	4b0b      	ldr	r3, [pc, #44]	; (80008b0 <test_terminate_threads+0x30>)
 8000882:	b430      	push	{r4, r5}
 8000884:	f103 0014 	add.w	r0, r3, #20
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8000888:	2520      	movs	r5, #32
 800088a:	2400      	movs	r4, #0
  unsigned i;

  for (i = 0; i < MAX_THREADS; i++)
    if (threads[i])
 800088c:	f853 2b04 	ldr.w	r2, [r3], #4
 8000890:	b14a      	cbz	r2, 80008a6 <test_terminate_threads+0x26>
 8000892:	f385 8811 	msr	BASEPRI, r5
 * @api
 */
void chThdTerminate(thread_t *tp) {

  chSysLock();
  tp->flags |= CH_FLAG_TERMINATE;
 8000896:	f892 1021 	ldrb.w	r1, [r2, #33]	; 0x21
 800089a:	f041 0104 	orr.w	r1, r1, #4
 800089e:	f882 1021 	strb.w	r1, [r2, #33]	; 0x21
 80008a2:	f384 8811 	msr	BASEPRI, r4
  for (i = 0; i < MAX_THREADS; i++)
 80008a6:	4283      	cmp	r3, r0
 80008a8:	d1f0      	bne.n	800088c <test_terminate_threads+0xc>
      chThdTerminate(threads[i]);
}
 80008aa:	bc30      	pop	{r4, r5}
 80008ac:	4770      	bx	lr
 80008ae:	bf00      	nop
 80008b0:	2000126c 	.word	0x2000126c
	...

080008c0 <test_printn.part.0>:

  if (!n)
    streamPut(test_chp, '0');
  else {
    p = buf;
    while (n)
 80008c0:	b320      	cbz	r0, 800090c <test_printn.part.0+0x4c>
void test_printn(uint32_t n) {
 80008c2:	b570      	push	{r4, r5, r6, lr}
 80008c4:	b084      	sub	sp, #16
    p = buf;
 80008c6:	466d      	mov	r5, sp
 80008c8:	462c      	mov	r4, r5
      *p++ = (n % 10) + '0', n /= 10;
 80008ca:	4e11      	ldr	r6, [pc, #68]	; (8000910 <test_printn.part.0+0x50>)
 80008cc:	e000      	b.n	80008d0 <test_printn.part.0+0x10>
    while (n)
 80008ce:	4614      	mov	r4, r2
      *p++ = (n % 10) + '0', n /= 10;
 80008d0:	fba6 2300 	umull	r2, r3, r6, r0
 80008d4:	08db      	lsrs	r3, r3, #3
 80008d6:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 80008da:	eba0 0041 	sub.w	r0, r0, r1, lsl #1
 80008de:	f100 0130 	add.w	r1, r0, #48	; 0x30
 80008e2:	4622      	mov	r2, r4
 80008e4:	b2c9      	uxtb	r1, r1
 80008e6:	f802 1b01 	strb.w	r1, [r2], #1
    while (n)
 80008ea:	4618      	mov	r0, r3
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d1ee      	bne.n	80008ce <test_printn.part.0+0xe>
    while (p > buf)
 80008f0:	42aa      	cmp	r2, r5
 80008f2:	d909      	bls.n	8000908 <test_printn.part.0+0x48>
 80008f4:	4e07      	ldr	r6, [pc, #28]	; (8000914 <test_printn.part.0+0x54>)
 80008f6:	e001      	b.n	80008fc <test_printn.part.0+0x3c>
 80008f8:	f814 1d01 	ldrb.w	r1, [r4, #-1]!
      streamPut(test_chp, *--p);
 80008fc:	6830      	ldr	r0, [r6, #0]
 80008fe:	6803      	ldr	r3, [r0, #0]
 8000900:	68db      	ldr	r3, [r3, #12]
 8000902:	4798      	blx	r3
    while (p > buf)
 8000904:	42a5      	cmp	r5, r4
 8000906:	d1f7      	bne.n	80008f8 <test_printn.part.0+0x38>
  }
}
 8000908:	b004      	add	sp, #16
 800090a:	bd70      	pop	{r4, r5, r6, pc}
 800090c:	4770      	bx	lr
 800090e:	bf00      	nop
 8000910:	cccccccd 	.word	0xcccccccd
 8000914:	200011a8 	.word	0x200011a8
	...

08000920 <test_printn>:
  if (!n)
 8000920:	b928      	cbnz	r0, 800092e <test_printn+0xe>
    streamPut(test_chp, '0');
 8000922:	4b04      	ldr	r3, [pc, #16]	; (8000934 <test_printn+0x14>)
 8000924:	6818      	ldr	r0, [r3, #0]
 8000926:	6803      	ldr	r3, [r0, #0]
 8000928:	2130      	movs	r1, #48	; 0x30
 800092a:	68db      	ldr	r3, [r3, #12]
 800092c:	4718      	bx	r3
 800092e:	f7ff bfc7 	b.w	80008c0 <test_printn.part.0>
 8000932:	bf00      	nop
 8000934:	200011a8 	.word	0x200011a8
	...

08000940 <test_emit_token>:
 8000940:	2320      	movs	r3, #32
 8000942:	f383 8811 	msr	BASEPRI, r3
 * @api
 */
void test_emit_token(char token) {

  osalSysLock();
  if (test_tokp < &test_tokens_buffer[TEST_MAX_TOKENS])
 8000946:	4a06      	ldr	r2, [pc, #24]	; (8000960 <test_emit_token+0x20>)
 8000948:	4906      	ldr	r1, [pc, #24]	; (8000964 <test_emit_token+0x24>)
 800094a:	6813      	ldr	r3, [r2, #0]
 800094c:	428b      	cmp	r3, r1
 800094e:	d202      	bcs.n	8000956 <test_emit_token+0x16>
    *test_tokp++ = token;
 8000950:	1c59      	adds	r1, r3, #1
 8000952:	7018      	strb	r0, [r3, #0]
 8000954:	6011      	str	r1, [r2, #0]
 8000956:	2300      	movs	r3, #0
 8000958:	f383 8811 	msr	BASEPRI, r3
  osalSysUnlock();
}
 800095c:	4770      	bx	lr
 800095e:	bf00      	nop
 8000960:	20001268 	.word	0x20001268
 8000964:	20001268 	.word	0x20001268
	...

08000970 <h3>:
static void h3(eventid_t id) {(void)id;test_emit_token('C');}
 8000970:	2043      	movs	r0, #67	; 0x43
 8000972:	f7ff bfe5 	b.w	8000940 <test_emit_token>
 8000976:	bf00      	nop
	...

08000980 <h2>:
static void h2(eventid_t id) {(void)id;test_emit_token('B');}
 8000980:	2042      	movs	r0, #66	; 0x42
 8000982:	f7ff bfdd 	b.w	8000940 <test_emit_token>
 8000986:	bf00      	nop
	...

08000990 <h1>:
static void h1(eventid_t id) {(void)id;test_emit_token('A');}
 8000990:	2041      	movs	r0, #65	; 0x41
 8000992:	f7ff bfd5 	b.w	8000940 <test_emit_token>
 8000996:	bf00      	nop
	...

080009a0 <thread>:
 * Shared code.
 ****************************************************************************/

static THD_FUNCTION(thread, p) {

  test_emit_token(*(char *)p);
 80009a0:	7800      	ldrb	r0, [r0, #0]
 80009a2:	f7ff bfcd 	b.w	8000940 <test_emit_token>
 80009a6:	bf00      	nop
	...

080009b0 <dyn_thread1>:
 80009b0:	f7ff bff6 	b.w	80009a0 <thread>
	...

080009c0 <test_println>:
void test_println(const char *msgp) {
 80009c0:	b570      	push	{r4, r5, r6, lr}
  while (*msgp)
 80009c2:	7801      	ldrb	r1, [r0, #0]
 80009c4:	b189      	cbz	r1, 80009ea <test_println+0x2a>
 80009c6:	4d0a      	ldr	r5, [pc, #40]	; (80009f0 <test_println+0x30>)
 80009c8:	4604      	mov	r4, r0
    streamPut(test_chp, *msgp++);
 80009ca:	6828      	ldr	r0, [r5, #0]
 80009cc:	6803      	ldr	r3, [r0, #0]
 80009ce:	68db      	ldr	r3, [r3, #12]
 80009d0:	4798      	blx	r3
  while (*msgp)
 80009d2:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 80009d6:	2900      	cmp	r1, #0
 80009d8:	d1f7      	bne.n	80009ca <test_println+0xa>
  streamWrite(test_chp, (const uint8_t *)"\r\n", 2);
 80009da:	6828      	ldr	r0, [r5, #0]
 80009dc:	4905      	ldr	r1, [pc, #20]	; (80009f4 <test_println+0x34>)
 80009de:	6803      	ldr	r3, [r0, #0]
 80009e0:	2202      	movs	r2, #2
 80009e2:	685b      	ldr	r3, [r3, #4]
}
 80009e4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  streamWrite(test_chp, (const uint8_t *)"\r\n", 2);
 80009e8:	4718      	bx	r3
 80009ea:	4d01      	ldr	r5, [pc, #4]	; (80009f0 <test_println+0x30>)
 80009ec:	e7f5      	b.n	80009da <test_println+0x1a>
 80009ee:	bf00      	nop
 80009f0:	200011a8 	.word	0x200011a8
 80009f4:	08009850 	.word	0x08009850
	...

08000a00 <test_print>:
  while (*msgp)
 8000a00:	7801      	ldrb	r1, [r0, #0]
 8000a02:	b159      	cbz	r1, 8000a1c <test_print+0x1c>
void test_print(const char *msgp) {
 8000a04:	b538      	push	{r3, r4, r5, lr}
 8000a06:	4d06      	ldr	r5, [pc, #24]	; (8000a20 <test_print+0x20>)
 8000a08:	4604      	mov	r4, r0
    streamPut(test_chp, *msgp++);
 8000a0a:	6828      	ldr	r0, [r5, #0]
 8000a0c:	6803      	ldr	r3, [r0, #0]
 8000a0e:	68db      	ldr	r3, [r3, #12]
 8000a10:	4798      	blx	r3
  while (*msgp)
 8000a12:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 8000a16:	2900      	cmp	r1, #0
 8000a18:	d1f7      	bne.n	8000a0a <test_print+0xa>
}
 8000a1a:	bd38      	pop	{r3, r4, r5, pc}
 8000a1c:	4770      	bx	lr
 8000a1e:	bf00      	nop
 8000a20:	200011a8 	.word	0x200011a8
	...

08000a30 <_test_assert_sequence>:
bool _test_assert_sequence(char *expected, const char *msg) {
 8000a30:	b4f0      	push	{r4, r5, r6, r7}
  while (cp < test_tokp) {
 8000a32:	4e0d      	ldr	r6, [pc, #52]	; (8000a68 <_test_assert_sequence+0x38>)
  char *cp = test_tokens_buffer;
 8000a34:	4f0d      	ldr	r7, [pc, #52]	; (8000a6c <_test_assert_sequence+0x3c>)
  while (cp < test_tokp) {
 8000a36:	6835      	ldr	r5, [r6, #0]
 8000a38:	1e42      	subs	r2, r0, #1
  char *cp = test_tokens_buffer;
 8000a3a:	463b      	mov	r3, r7
 8000a3c:	e003      	b.n	8000a46 <_test_assert_sequence+0x16>
    if (*cp++ != *expected++)
 8000a3e:	f813 4b01 	ldrb.w	r4, [r3], #1
 8000a42:	4284      	cmp	r4, r0
 8000a44:	d107      	bne.n	8000a56 <_test_assert_sequence+0x26>
  while (cp < test_tokp) {
 8000a46:	429d      	cmp	r5, r3
 8000a48:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8000a4c:	d8f7      	bhi.n	8000a3e <_test_assert_sequence+0xe>
  if (*expected)
 8000a4e:	b910      	cbnz	r0, 8000a56 <_test_assert_sequence+0x26>
  test_tokp = test_tokens_buffer;
 8000a50:	6037      	str	r7, [r6, #0]
}
 8000a52:	bcf0      	pop	{r4, r5, r6, r7}
 8000a54:	4770      	bx	lr
  test_local_fail      = true;
 8000a56:	4c06      	ldr	r4, [pc, #24]	; (8000a70 <_test_assert_sequence+0x40>)
  test_global_fail     = true;
 8000a58:	4a06      	ldr	r2, [pc, #24]	; (8000a74 <_test_assert_sequence+0x44>)
  test_failure_message = msg;
 8000a5a:	4b07      	ldr	r3, [pc, #28]	; (8000a78 <_test_assert_sequence+0x48>)
  test_local_fail      = true;
 8000a5c:	2001      	movs	r0, #1
 8000a5e:	7020      	strb	r0, [r4, #0]
  test_global_fail     = true;
 8000a60:	7010      	strb	r0, [r2, #0]
  test_failure_message = msg;
 8000a62:	6019      	str	r1, [r3, #0]
}
 8000a64:	bcf0      	pop	{r4, r5, r6, r7}
 8000a66:	4770      	bx	lr
 8000a68:	20001268 	.word	0x20001268
 8000a6c:	20001258 	.word	0x20001258
 8000a70:	20001250 	.word	0x20001250
 8000a74:	200011b0 	.word	0x200011b0
 8000a78:	200011ac 	.word	0x200011ac
 8000a7c:	00000000 	.word	0x00000000

08000a80 <rt_test_008_002_execute>:
static void rt_test_008_002_execute(void) {
 8000a80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  test_set_step(1);
 8000a82:	4b0f      	ldr	r3, [pc, #60]	; (8000ac0 <rt_test_008_002_execute+0x40>)
 8000a84:	4f0f      	ldr	r7, [pc, #60]	; (8000ac4 <rt_test_008_002_execute+0x44>)
 8000a86:	2601      	movs	r6, #1
 8000a88:	601e      	str	r6, [r3, #0]
 8000a8a:	2507      	movs	r5, #7
void chEvtDispatch(const evhandler_t *handlers, eventmask_t events) {
  eventid_t eid;

  chDbgCheck(handlers != NULL);

  eid = (eventid_t)0;
 8000a8c:	2400      	movs	r4, #0
  while (events != (eventmask_t)0) {
    if ((events & EVENT_MASK(eid)) != (eventmask_t)0) {
 8000a8e:	fa25 f304 	lsr.w	r3, r5, r4
 8000a92:	f013 0f01 	tst.w	r3, #1
      chDbgAssert(handlers[eid] != NULL, "null handler");
      events &= ~EVENT_MASK(eid);
 8000a96:	fa06 f204 	lsl.w	r2, r6, r4
      handlers[eid](eid);
 8000a9a:	4620      	mov	r0, r4
    if ((events & EVENT_MASK(eid)) != (eventmask_t)0) {
 8000a9c:	d00d      	beq.n	8000aba <rt_test_008_002_execute+0x3a>
      handlers[eid](eid);
 8000a9e:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
      events &= ~EVENT_MASK(eid);
 8000aa2:	ea25 0502 	bic.w	r5, r5, r2
    }
    eid++;
 8000aa6:	3401      	adds	r4, #1
      handlers[eid](eid);
 8000aa8:	4798      	blx	r3
  while (events != (eventmask_t)0) {
 8000aaa:	2d00      	cmp	r5, #0
 8000aac:	d1ef      	bne.n	8000a8e <rt_test_008_002_execute+0xe>
    test_assert_sequence("ABC", "invalid sequence");
 8000aae:	4906      	ldr	r1, [pc, #24]	; (8000ac8 <rt_test_008_002_execute+0x48>)
 8000ab0:	4806      	ldr	r0, [pc, #24]	; (8000acc <rt_test_008_002_execute+0x4c>)
}
 8000ab2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    test_assert_sequence("ABC", "invalid sequence");
 8000ab6:	f7ff bfbb 	b.w	8000a30 <_test_assert_sequence>
    eid++;
 8000aba:	3401      	adds	r4, #1
 8000abc:	e7e7      	b.n	8000a8e <rt_test_008_002_execute+0xe>
 8000abe:	bf00      	nop
 8000ac0:	20001254 	.word	0x20001254
 8000ac4:	08007708 	.word	0x08007708
 8000ac8:	08008950 	.word	0x08008950
 8000acc:	08008964 	.word	0x08008964

08000ad0 <print_line>:
static void print_line(void) {
 8000ad0:	b570      	push	{r4, r5, r6, lr}
 8000ad2:	4d08      	ldr	r5, [pc, #32]	; (8000af4 <print_line+0x24>)
 8000ad4:	244c      	movs	r4, #76	; 0x4c
    streamPut(test_chp, '-');
 8000ad6:	6828      	ldr	r0, [r5, #0]
 8000ad8:	6803      	ldr	r3, [r0, #0]
 8000ada:	212d      	movs	r1, #45	; 0x2d
 8000adc:	68db      	ldr	r3, [r3, #12]
 8000ade:	4798      	blx	r3
  for (i = 0; i < 76; i++)
 8000ae0:	3c01      	subs	r4, #1
 8000ae2:	d1f8      	bne.n	8000ad6 <print_line+0x6>
  streamWrite(test_chp, (const uint8_t *)"\r\n", 2);
 8000ae4:	6828      	ldr	r0, [r5, #0]
 8000ae6:	4904      	ldr	r1, [pc, #16]	; (8000af8 <print_line+0x28>)
 8000ae8:	6803      	ldr	r3, [r0, #0]
 8000aea:	2202      	movs	r2, #2
 8000aec:	685b      	ldr	r3, [r3, #4]
}
 8000aee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  streamWrite(test_chp, (const uint8_t *)"\r\n", 2);
 8000af2:	4718      	bx	r3
 8000af4:	200011a8 	.word	0x200011a8
 8000af8:	08009850 	.word	0x08009850
 8000afc:	00000000 	.word	0x00000000

08000b00 <_port_irq_epilogue>:
 8000b00:	2320      	movs	r3, #32
 8000b02:	f383 8811 	msr	BASEPRI, r3
 * @brief   Exception exit redirection to _port_switch_from_isr().
 */
void _port_irq_epilogue(void) {

  port_lock_from_isr();
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
 8000b06:	4b0f      	ldr	r3, [pc, #60]	; (8000b44 <_port_irq_epilogue+0x44>)
 8000b08:	685b      	ldr	r3, [r3, #4]
 8000b0a:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 8000b0e:	d102      	bne.n	8000b16 <_port_irq_epilogue+0x16>
 8000b10:	f383 8811 	msr	BASEPRI, r3
    /* Note, returning without unlocking is intentional, this is done in
       order to keep the rest of the context switch atomic.*/
    return;
  }
  port_unlock_from_isr();
}
 8000b14:	4770      	bx	lr
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 8000b16:	f3ef 8309 	mrs	r3, PSP
    ctxp->xpsr = (regarm_t)0x01000000;
 8000b1a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000b1e:	f843 2c04 	str.w	r2, [r3, #-4]
    ctxp--;
 8000b22:	f1a3 0220 	sub.w	r2, r3, #32
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 8000b26:	f382 8809 	msr	PSP, r2
 * @retval false        if preemption is not required.
 *
 * @special
 */
bool chSchIsPreemptionRequired(void) {
  tprio_t p1 = firstprio(&ch.rlist.queue);
 8000b2a:	4a07      	ldr	r2, [pc, #28]	; (8000b48 <_port_irq_epilogue+0x48>)
 8000b2c:	6811      	ldr	r1, [r2, #0]
  tprio_t p2 = currp->prio;
 8000b2e:	6992      	ldr	r2, [r2, #24]
    if (chSchIsPreemptionRequired()) {
 8000b30:	6889      	ldr	r1, [r1, #8]
 8000b32:	6892      	ldr	r2, [r2, #8]
 8000b34:	4291      	cmp	r1, r2
      ctxp->pc = (regarm_t)_port_switch_from_isr;
 8000b36:	bf8c      	ite	hi
 8000b38:	4a04      	ldrhi	r2, [pc, #16]	; (8000b4c <_port_irq_epilogue+0x4c>)
      ctxp->pc = (regarm_t)_port_exit_from_isr;
 8000b3a:	4a05      	ldrls	r2, [pc, #20]	; (8000b50 <_port_irq_epilogue+0x50>)
 8000b3c:	f843 2c08 	str.w	r2, [r3, #-8]
 8000b40:	4770      	bx	lr
 8000b42:	bf00      	nop
 8000b44:	e000ed00 	.word	0xe000ed00
 8000b48:	200008f0 	.word	0x200008f0
 8000b4c:	080002a1 	.word	0x080002a1
 8000b50:	080002a4 	.word	0x080002a4
	...

08000b60 <chCoreAllocAlignedI>:
 * @return              A pointer to the allocated memory block.
 * @retval NULL         allocation failed, core memory exhausted.
 *
 * @iclass
 */
static inline void *chCoreAllocAlignedI(size_t size, unsigned align) {
 8000b60:	b470      	push	{r4, r5, r6}
  p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.nextmem + offset, align);
 8000b62:	4c0b      	ldr	r4, [pc, #44]	; (8000b90 <chCoreAllocAlignedI+0x30>)
  if ((next > ch_memcore.endmem) || (next < ch_memcore.nextmem)) {
 8000b64:	e9d4 6300 	ldrd	r6, r3, [r4]
  p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.nextmem + offset, align);
 8000b68:	1e72      	subs	r2, r6, #1
  size = MEM_ALIGN_NEXT(size, align);
 8000b6a:	424d      	negs	r5, r1
  p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.nextmem + offset, align);
 8000b6c:	440a      	add	r2, r1
  size = MEM_ALIGN_NEXT(size, align);
 8000b6e:	3901      	subs	r1, #1
 8000b70:	4401      	add	r1, r0
 8000b72:	4029      	ands	r1, r5
  p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.nextmem + offset, align);
 8000b74:	ea02 0005 	and.w	r0, r2, r5
  next = p + size;
 8000b78:	4401      	add	r1, r0
  if ((next > ch_memcore.endmem) || (next < ch_memcore.nextmem)) {
 8000b7a:	4299      	cmp	r1, r3
 8000b7c:	d804      	bhi.n	8000b88 <chCoreAllocAlignedI+0x28>
 8000b7e:	428e      	cmp	r6, r1
 8000b80:	d802      	bhi.n	8000b88 <chCoreAllocAlignedI+0x28>
  ch_memcore.nextmem = next;
 8000b82:	6021      	str	r1, [r4, #0]

  return chCoreAllocAlignedWithOffsetI(size, align, 0U);
}
 8000b84:	bc70      	pop	{r4, r5, r6}
 8000b86:	4770      	bx	lr
    return NULL;
 8000b88:	2000      	movs	r0, #0
 8000b8a:	bc70      	pop	{r4, r5, r6}
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop
 8000b90:	20000a88 	.word	0x20000a88
	...

08000ba0 <chPoolAlloc>:
 * @return              The pointer to the allocated object.
 * @retval NULL         if pool is empty.
 *
 * @api
 */
void *chPoolAlloc(memory_pool_t *mp) {
 8000ba0:	b508      	push	{r3, lr}
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8000ba2:	2220      	movs	r2, #32
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	f382 8811 	msr	BASEPRI, r2
  objp = mp->next;
 8000baa:	6800      	ldr	r0, [r0, #0]
  if (objp != NULL) {
 8000bac:	b128      	cbz	r0, 8000bba <chPoolAlloc+0x1a>
    mp->next = mp->next->next;
 8000bae:	6802      	ldr	r2, [r0, #0]
 8000bb0:	601a      	str	r2, [r3, #0]
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  objp = chPoolAllocI(mp);
  chSysUnlock();

  return objp;
}
 8000bb8:	bd08      	pop	{r3, pc}
  else if (mp->provider != NULL) {
 8000bba:	68da      	ldr	r2, [r3, #12]
 8000bbc:	2a00      	cmp	r2, #0
 8000bbe:	d0f8      	beq.n	8000bb2 <chPoolAlloc+0x12>
    objp = mp->provider(mp->object_size, mp->align);
 8000bc0:	e9d3 0101 	ldrd	r0, r1, [r3, #4]
 8000bc4:	4790      	blx	r2
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	f383 8811 	msr	BASEPRI, r3
}
 8000bcc:	bd08      	pop	{r3, pc}
 8000bce:	bf00      	nop

08000bd0 <oslib_test_002_001_execute>:
static void oslib_test_002_001_execute(void) {
 8000bd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  test_set_step(1);
 8000bd4:	4e3a      	ldr	r6, [pc, #232]	; (8000cc0 <oslib_test_002_001_execute+0xf0>)
 8000bd6:	4b3b      	ldr	r3, [pc, #236]	; (8000cc4 <oslib_test_002_001_execute+0xf4>)
 8000bd8:	4c3b      	ldr	r4, [pc, #236]	; (8000cc8 <oslib_test_002_001_execute+0xf8>)
 8000bda:	2201      	movs	r2, #1
 8000bdc:	6032      	str	r2, [r6, #0]
 8000bde:	2520      	movs	r5, #32
 8000be0:	2204      	movs	r2, #4
 8000be2:	2000      	movs	r0, #0
 8000be4:	f385 8811 	msr	BASEPRI, r5
  chDbgCheck((mp != NULL) && (objp != NULL));

  chDbgAssert(((size_t)objp & MEM_ALIGN_MASK(mp->align)) == 0U,
              "unaligned object");

  php->next = mp->next;
 8000be8:	6821      	ldr	r1, [r4, #0]
 8000bea:	6019      	str	r1, [r3, #0]
  mp->next = php;
 8000bec:	6023      	str	r3, [r4, #0]
 8000bee:	f380 8811 	msr	BASEPRI, r0
    p = (void *)(((uint8_t *)p) + mp->object_size);
 8000bf2:	6861      	ldr	r1, [r4, #4]
  while (n != 0U) {
 8000bf4:	3a01      	subs	r2, #1
    p = (void *)(((uint8_t *)p) + mp->object_size);
 8000bf6:	440b      	add	r3, r1
  while (n != 0U) {
 8000bf8:	d1f4      	bne.n	8000be4 <oslib_test_002_001_execute+0x14>
  test_set_step(2);
 8000bfa:	2302      	movs	r3, #2
      test_assert(chPoolAlloc(&mp1) != NULL, "list empty");
 8000bfc:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 8000cc8 <oslib_test_002_001_execute+0xf8>
 8000c00:	4f32      	ldr	r7, [pc, #200]	; (8000ccc <oslib_test_002_001_execute+0xfc>)
  test_set_step(2);
 8000c02:	6033      	str	r3, [r6, #0]
 8000c04:	2504      	movs	r5, #4
      test_assert(chPoolAlloc(&mp1) != NULL, "list empty");
 8000c06:	4640      	mov	r0, r8
 8000c08:	f7ff ffca 	bl	8000ba0 <chPoolAlloc>
 8000c0c:	3000      	adds	r0, #0
 8000c0e:	bf18      	it	ne
 8000c10:	2001      	movne	r0, #1
 8000c12:	4639      	mov	r1, r7
 8000c14:	f7ff fdf4 	bl	8000800 <_test_assert>
 8000c18:	2800      	cmp	r0, #0
 8000c1a:	d13c      	bne.n	8000c96 <oslib_test_002_001_execute+0xc6>
    for (i = 0; i < MEMORY_POOL_SIZE; i++)
 8000c1c:	3d01      	subs	r5, #1
 8000c1e:	d1f2      	bne.n	8000c06 <oslib_test_002_001_execute+0x36>
  test_set_step(3);
 8000c20:	2303      	movs	r3, #3
    test_assert(chPoolAlloc(&mp1) == NULL, "list not empty");
 8000c22:	4829      	ldr	r0, [pc, #164]	; (8000cc8 <oslib_test_002_001_execute+0xf8>)
  test_set_step(3);
 8000c24:	6033      	str	r3, [r6, #0]
    test_assert(chPoolAlloc(&mp1) == NULL, "list not empty");
 8000c26:	f7ff ffbb 	bl	8000ba0 <chPoolAlloc>
 8000c2a:	fab0 f080 	clz	r0, r0
 8000c2e:	0940      	lsrs	r0, r0, #5
 8000c30:	4927      	ldr	r1, [pc, #156]	; (8000cd0 <oslib_test_002_001_execute+0x100>)
 8000c32:	f7ff fde5 	bl	8000800 <_test_assert>
 8000c36:	bb70      	cbnz	r0, 8000c96 <oslib_test_002_001_execute+0xc6>
 8000c38:	4b22      	ldr	r3, [pc, #136]	; (8000cc4 <oslib_test_002_001_execute+0xf4>)
  test_set_step(4);
 8000c3a:	2204      	movs	r2, #4
 8000c3c:	f103 0710 	add.w	r7, r3, #16
 8000c40:	6032      	str	r2, [r6, #0]
 8000c42:	2020      	movs	r0, #32
      chPoolFree(&mp1, &objects[i]);
 8000c44:	461a      	mov	r2, r3
 8000c46:	f380 8811 	msr	BASEPRI, r0
  php->next = mp->next;
 8000c4a:	6821      	ldr	r1, [r4, #0]
 8000c4c:	f843 1b04 	str.w	r1, [r3], #4
  mp->next = php;
 8000c50:	6022      	str	r2, [r4, #0]
 8000c52:	f385 8811 	msr	BASEPRI, r5
    for (i = 0; i < MEMORY_POOL_SIZE; i++)
 8000c56:	429f      	cmp	r7, r3
 8000c58:	d1f4      	bne.n	8000c44 <oslib_test_002_001_execute+0x74>
  test_set_step(5);
 8000c5a:	2305      	movs	r3, #5
      test_assert(chPoolAlloc(&mp1) != NULL, "list empty");
 8000c5c:	f8df 8068 	ldr.w	r8, [pc, #104]	; 8000cc8 <oslib_test_002_001_execute+0xf8>
 8000c60:	4f1a      	ldr	r7, [pc, #104]	; (8000ccc <oslib_test_002_001_execute+0xfc>)
  test_set_step(5);
 8000c62:	6033      	str	r3, [r6, #0]
 8000c64:	2504      	movs	r5, #4
      test_assert(chPoolAlloc(&mp1) != NULL, "list empty");
 8000c66:	4640      	mov	r0, r8
 8000c68:	f7ff ff9a 	bl	8000ba0 <chPoolAlloc>
 8000c6c:	3000      	adds	r0, #0
 8000c6e:	bf18      	it	ne
 8000c70:	2001      	movne	r0, #1
 8000c72:	4639      	mov	r1, r7
 8000c74:	f7ff fdc4 	bl	8000800 <_test_assert>
 8000c78:	b968      	cbnz	r0, 8000c96 <oslib_test_002_001_execute+0xc6>
    for (i = 0; i < MEMORY_POOL_SIZE; i++)
 8000c7a:	3d01      	subs	r5, #1
 8000c7c:	d1f3      	bne.n	8000c66 <oslib_test_002_001_execute+0x96>
  test_set_step(6);
 8000c7e:	2306      	movs	r3, #6
    test_assert(chPoolAlloc(&mp1) == NULL, "list not empty");
 8000c80:	4811      	ldr	r0, [pc, #68]	; (8000cc8 <oslib_test_002_001_execute+0xf8>)
  test_set_step(6);
 8000c82:	6033      	str	r3, [r6, #0]
    test_assert(chPoolAlloc(&mp1) == NULL, "list not empty");
 8000c84:	f7ff ff8c 	bl	8000ba0 <chPoolAlloc>
 8000c88:	fab0 f080 	clz	r0, r0
 8000c8c:	0940      	lsrs	r0, r0, #5
 8000c8e:	4910      	ldr	r1, [pc, #64]	; (8000cd0 <oslib_test_002_001_execute+0x100>)
 8000c90:	f7ff fdb6 	bl	8000800 <_test_assert>
 8000c94:	b108      	cbz	r0, 8000c9a <oslib_test_002_001_execute+0xca>
}
 8000c96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  test_set_step(7);
 8000c9a:	2107      	movs	r1, #7
  mp->object_size = size;
 8000c9c:	2304      	movs	r3, #4
  mp->provider = provider;
 8000c9e:	4a0d      	ldr	r2, [pc, #52]	; (8000cd4 <oslib_test_002_001_execute+0x104>)
    test_assert(chPoolAlloc(&mp1) == NULL, "provider returned memory");
 8000ca0:	4809      	ldr	r0, [pc, #36]	; (8000cc8 <oslib_test_002_001_execute+0xf8>)
  test_set_step(7);
 8000ca2:	6031      	str	r1, [r6, #0]
  mp->next = NULL;
 8000ca4:	6025      	str	r5, [r4, #0]
  mp->align = align;
 8000ca6:	e9c4 3301 	strd	r3, r3, [r4, #4]
  mp->provider = provider;
 8000caa:	60e2      	str	r2, [r4, #12]
    test_assert(chPoolAlloc(&mp1) == NULL, "provider returned memory");
 8000cac:	f7ff ff78 	bl	8000ba0 <chPoolAlloc>
 8000cb0:	fab0 f080 	clz	r0, r0
 8000cb4:	0940      	lsrs	r0, r0, #5
 8000cb6:	4908      	ldr	r1, [pc, #32]	; (8000cd8 <oslib_test_002_001_execute+0x108>)
}
 8000cb8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    test_assert(chPoolAlloc(&mp1) == NULL, "provider returned memory");
 8000cbc:	f7ff bda0 	b.w	8000800 <_test_assert>
 8000cc0:	20001254 	.word	0x20001254
 8000cc4:	20000af8 	.word	0x20000af8
 8000cc8:	20000874 	.word	0x20000874
 8000ccc:	08007850 	.word	0x08007850
 8000cd0:	0800785c 	.word	0x0800785c
 8000cd4:	08000561 	.word	0x08000561
 8000cd8:	0800786c 	.word	0x0800786c
 8000cdc:	00000000 	.word	0x00000000

08000ce0 <chEvtAddEvents>:
 8000ce0:	2320      	movs	r3, #32
 8000ce2:	f383 8811 	msr	BASEPRI, r3
 *
 * @iclass
 */
static inline eventmask_t chEvtAddEventsI(eventmask_t events) {

  return currp->epending |= events;
 8000ce6:	4b04      	ldr	r3, [pc, #16]	; (8000cf8 <chEvtAddEvents+0x18>)
 8000ce8:	699b      	ldr	r3, [r3, #24]
 8000cea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000cec:	4310      	orrs	r0, r2
 8000cee:	6358      	str	r0, [r3, #52]	; 0x34
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	f383 8811 	msr	BASEPRI, r3
}
 8000cf6:	4770      	bx	lr
 8000cf8:	200008f0 	.word	0x200008f0
 8000cfc:	00000000 	.word	0x00000000

08000d00 <chEvtUnregister>:
 8000d00:	2320      	movs	r3, #32
 8000d02:	f383 8811 	msr	BASEPRI, r3
  p = (event_listener_t *)esp;
 8000d06:	4602      	mov	r2, r0
 8000d08:	e002      	b.n	8000d10 <chEvtUnregister+0x10>
    if (p->next == elp) {
 8000d0a:	428b      	cmp	r3, r1
 8000d0c:	d007      	beq.n	8000d1e <chEvtUnregister+0x1e>
 8000d0e:	461a      	mov	r2, r3
  while (p->next != (event_listener_t *)esp) {
 8000d10:	6813      	ldr	r3, [r2, #0]
 8000d12:	4283      	cmp	r3, r0
 8000d14:	d1f9      	bne.n	8000d0a <chEvtUnregister+0xa>
 8000d16:	2300      	movs	r3, #0
 8000d18:	f383 8811 	msr	BASEPRI, r3
}
 8000d1c:	4770      	bx	lr
      p->next = elp->next;
 8000d1e:	680b      	ldr	r3, [r1, #0]
 8000d20:	6013      	str	r3, [r2, #0]
 8000d22:	2300      	movs	r3, #0
 8000d24:	f383 8811 	msr	BASEPRI, r3
}
 8000d28:	4770      	bx	lr
 8000d2a:	bf00      	nop
 8000d2c:	0000      	movs	r0, r0
	...

08000d30 <rt_test_008_001_execute>:
static void rt_test_008_001_execute(void) {
 8000d30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  esp->next = (event_listener_t *)esp;
 8000d34:	4c36      	ldr	r4, [pc, #216]	; (8000e10 <rt_test_008_001_execute+0xe0>)
  test_set_step(2);
 8000d36:	f8df 90e8 	ldr.w	r9, [pc, #232]	; 8000e20 <rt_test_008_001_execute+0xf0>
 8000d3a:	6024      	str	r4, [r4, #0]
 8000d3c:	2102      	movs	r1, #2
static void rt_test_008_001_execute(void) {
 8000d3e:	b08a      	sub	sp, #40	; 0x28
  test_set_step(2);
 8000d40:	f8c9 1000 	str.w	r1, [r9]
 8000d44:	2620      	movs	r6, #32
 8000d46:	f386 8811 	msr	BASEPRI, r6
  elp->listener = currp;
 8000d4a:	4832      	ldr	r0, [pc, #200]	; (8000e14 <rt_test_008_001_execute+0xe4>)
  elp->next     = esp->next;
 8000d4c:	6823      	ldr	r3, [r4, #0]
 8000d4e:	af0a      	add	r7, sp, #40	; 0x28
  elp->events   = events;
 8000d50:	2201      	movs	r2, #1
  elp->next     = esp->next;
 8000d52:	f847 3d14 	str.w	r3, [r7, #-20]!
  elp->listener = currp;
 8000d56:	6983      	ldr	r3, [r0, #24]
 8000d58:	9306      	str	r3, [sp, #24]
  elp->flags    = (eventflags_t)0;
 8000d5a:	2500      	movs	r5, #0
  elp->wflags   = wflags;
 8000d5c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  elp->events   = events;
 8000d60:	9207      	str	r2, [sp, #28]
  esp->next     = elp;
 8000d62:	6027      	str	r7, [r4, #0]
  elp->wflags   = wflags;
 8000d64:	e9cd 5308 	strd	r5, r3, [sp, #32]
 8000d68:	f385 8811 	msr	BASEPRI, r5
 8000d6c:	f386 8811 	msr	BASEPRI, r6
  elp->next     = esp->next;
 8000d70:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 8000d74:	6822      	ldr	r2, [r4, #0]
 8000d76:	f848 2d28 	str.w	r2, [r8, #-40]!
  elp->listener = currp;
 8000d7a:	6982      	ldr	r2, [r0, #24]
  esp->next     = elp;
 8000d7c:	f8c4 8000 	str.w	r8, [r4]
  elp->events   = events;
 8000d80:	e9cd 2101 	strd	r2, r1, [sp, #4]
  elp->wflags   = wflags;
 8000d84:	e9cd 5303 	strd	r5, r3, [sp, #12]
 8000d88:	f385 8811 	msr	BASEPRI, r5
 8000d8c:	f386 8811 	msr	BASEPRI, r6
  return (bool)(esp != (event_source_t *)esp->next);
 8000d90:	6820      	ldr	r0, [r4, #0]
    test_assert_lock(chEvtIsListeningI(&es1), "no listener");
 8000d92:	4921      	ldr	r1, [pc, #132]	; (8000e18 <rt_test_008_001_execute+0xe8>)
 8000d94:	1b00      	subs	r0, r0, r4
 8000d96:	bf18      	it	ne
 8000d98:	2001      	movne	r0, #1
 8000d9a:	f7ff fd31 	bl	8000800 <_test_assert>
 8000d9e:	b120      	cbz	r0, 8000daa <rt_test_008_001_execute+0x7a>
 8000da0:	f385 8811 	msr	BASEPRI, r5
}
 8000da4:	b00a      	add	sp, #40	; 0x28
 8000da6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000daa:	4682      	mov	sl, r0
 8000dac:	f380 8811 	msr	BASEPRI, r0
  test_set_step(3);
 8000db0:	2303      	movs	r3, #3
    chEvtUnregister(&es1, &el1);
 8000db2:	4639      	mov	r1, r7
 8000db4:	4620      	mov	r0, r4
  test_set_step(3);
 8000db6:	f8c9 3000 	str.w	r3, [r9]
    chEvtUnregister(&es1, &el1);
 8000dba:	f7ff ffa1 	bl	8000d00 <chEvtUnregister>
 8000dbe:	f386 8811 	msr	BASEPRI, r6
 8000dc2:	6820      	ldr	r0, [r4, #0]
    test_assert_lock(chEvtIsListeningI(&es1), "no listener");
 8000dc4:	4914      	ldr	r1, [pc, #80]	; (8000e18 <rt_test_008_001_execute+0xe8>)
 8000dc6:	1b00      	subs	r0, r0, r4
 8000dc8:	bf18      	it	ne
 8000dca:	2001      	movne	r0, #1
 8000dcc:	f7ff fd18 	bl	8000800 <_test_assert>
 8000dd0:	4605      	mov	r5, r0
 8000dd2:	b120      	cbz	r0, 8000dde <rt_test_008_001_execute+0xae>
 8000dd4:	f38a 8811 	msr	BASEPRI, sl
}
 8000dd8:	b00a      	add	sp, #40	; 0x28
 8000dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dde:	f380 8811 	msr	BASEPRI, r0
  test_set_step(4);
 8000de2:	2304      	movs	r3, #4
    chEvtUnregister(&es1, &el2);
 8000de4:	4641      	mov	r1, r8
 8000de6:	4620      	mov	r0, r4
  test_set_step(4);
 8000de8:	f8c9 3000 	str.w	r3, [r9]
    chEvtUnregister(&es1, &el2);
 8000dec:	f7ff ff88 	bl	8000d00 <chEvtUnregister>
 8000df0:	f386 8811 	msr	BASEPRI, r6
    test_assert_lock(!chEvtIsListeningI(&es1), "stuck listener");
 8000df4:	6820      	ldr	r0, [r4, #0]
 8000df6:	4909      	ldr	r1, [pc, #36]	; (8000e1c <rt_test_008_001_execute+0xec>)
 8000df8:	1b00      	subs	r0, r0, r4
 8000dfa:	fab0 f080 	clz	r0, r0
 8000dfe:	0940      	lsrs	r0, r0, #5
 8000e00:	f7ff fcfe 	bl	8000800 <_test_assert>
 8000e04:	2800      	cmp	r0, #0
 8000e06:	d1cb      	bne.n	8000da0 <rt_test_008_001_execute+0x70>
 8000e08:	f380 8811 	msr	BASEPRI, r0
 8000e0c:	e7ca      	b.n	8000da4 <rt_test_008_001_execute+0x74>
 8000e0e:	bf00      	nop
 8000e10:	20000808 	.word	0x20000808
 8000e14:	200008f0 	.word	0x200008f0
 8000e18:	08008924 	.word	0x08008924
 8000e1c:	08008930 	.word	0x08008930
 8000e20:	20001254 	.word	0x20001254
	...

08000e30 <chTMStopMeasurementX>:
 8000e30:	4b0e      	ldr	r3, [pc, #56]	; (8000e6c <chTMStopMeasurementX+0x3c>)
 *
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
 8000e32:	4a0f      	ldr	r2, [pc, #60]	; (8000e70 <chTMStopMeasurementX+0x40>)
 8000e34:	685b      	ldr	r3, [r3, #4]
  tmp->n++;
 8000e36:	68c1      	ldr	r1, [r0, #12]
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {
 8000e38:	b4f0      	push	{r4, r5, r6, r7}
  tmp->last = (now - tmp->last) - offset;
 8000e3a:	6884      	ldr	r4, [r0, #8]
  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
 8000e3c:	6f56      	ldr	r6, [r2, #116]	; 0x74
  if (tmp->last > tmp->worst) {
 8000e3e:	6842      	ldr	r2, [r0, #4]
  tmp->last = (now - tmp->last) - offset;
 8000e40:	1b1b      	subs	r3, r3, r4
  tmp->cumulative += (rttime_t)tmp->last;
 8000e42:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
  tmp->last = (now - tmp->last) - offset;
 8000e46:	1b9b      	subs	r3, r3, r6
  tmp->cumulative += (rttime_t)tmp->last;
 8000e48:	18e6      	adds	r6, r4, r3
 8000e4a:	f145 0700 	adc.w	r7, r5, #0
  if (tmp->last > tmp->worst) {
 8000e4e:	4293      	cmp	r3, r2
  if (tmp->last < tmp->best) {
 8000e50:	6802      	ldr	r2, [r0, #0]
    tmp->worst = tmp->last;
 8000e52:	bf88      	it	hi
 8000e54:	6043      	strhi	r3, [r0, #4]
  tmp->n++;
 8000e56:	3101      	adds	r1, #1
  if (tmp->last < tmp->best) {
 8000e58:	4293      	cmp	r3, r2
  tmp->cumulative += (rttime_t)tmp->last;
 8000e5a:	e9c0 6704 	strd	r6, r7, [r0, #16]
  tmp->last = (now - tmp->last) - offset;
 8000e5e:	e9c0 3102 	strd	r3, r1, [r0, #8]
    tmp->best = tmp->last;
 8000e62:	bf38      	it	cc
 8000e64:	6003      	strcc	r3, [r0, #0]
}
 8000e66:	bcf0      	pop	{r4, r5, r6, r7}
 8000e68:	4770      	bx	lr
 8000e6a:	bf00      	nop
 8000e6c:	e0001000 	.word	0xe0001000
 8000e70:	200008f0 	.word	0x200008f0
	...

08000e80 <chThdCreateSuspendedI>:
  tp = (thread_t *)((uint8_t *)tdp->wend -
 8000e80:	6883      	ldr	r3, [r0, #8]
  tp->wabase = tdp->wbase;
 8000e82:	6841      	ldr	r1, [r0, #4]
  REG_INSERT(tp);
 8000e84:	4a1a      	ldr	r2, [pc, #104]	; (8000ef0 <chThdCreateSuspendedI+0x70>)
thread_t *chThdCreateSuspendedI(const thread_descriptor_t *tdp) {
 8000e86:	b4f0      	push	{r4, r5, r6, r7}
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 8000e88:	e9d0 7504 	ldrd	r7, r5, [r0, #16]
  tp->state     = CH_STATE_WTSTART;
 8000e8c:	2602      	movs	r6, #2
  tp->wabase = tdp->wbase;
 8000e8e:	f843 1c2c 	str.w	r1, [r3, #-44]
  tp->refs      = (trefs_t)1;
 8000e92:	2401      	movs	r4, #1
  tp->flags     = CH_FLAG_MODE_STATIC;
 8000e94:	2100      	movs	r1, #0
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 8000e96:	e943 751b 	strd	r7, r5, [r3, #-108]	; 0x6c
  return _thread_init(tp, tdp->name, tdp->prio);
 8000e9a:	6805      	ldr	r5, [r0, #0]
 8000e9c:	68c0      	ldr	r0, [r0, #12]
  tp->flags     = CH_FLAG_MODE_STATIC;
 8000e9e:	f803 1c27 	strb.w	r1, [r3, #-39]
  tp->state     = CH_STATE_WTSTART;
 8000ea2:	f803 6c28 	strb.w	r6, [r3, #-40]
  tp->refs      = (trefs_t)1;
 8000ea6:	f803 4c26 	strb.w	r4, [r3, #-38]
  REG_INSERT(tp);
 8000eaa:	f843 2c38 	str.w	r2, [r3, #-56]
 8000eae:	6954      	ldr	r4, [r2, #20]
  tp->prio      = prio;
 8000eb0:	f843 0c40 	str.w	r0, [r3, #-64]
  tp->realprio  = prio;
 8000eb4:	f843 0c0c 	str.w	r0, [r3, #-12]
  tp->name      = name;
 8000eb8:	f843 5c30 	str.w	r5, [r3, #-48]
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 8000ebc:	f1a3 006c 	sub.w	r0, r3, #108	; 0x6c
 8000ec0:	4d0c      	ldr	r5, [pc, #48]	; (8000ef4 <chThdCreateSuspendedI+0x74>)
 8000ec2:	f843 0c3c 	str.w	r0, [r3, #-60]
 8000ec6:	f843 5c4c 	str.w	r5, [r3, #-76]
  tp = (thread_t *)((uint8_t *)tdp->wend -
 8000eca:	f1a3 0048 	sub.w	r0, r3, #72	; 0x48
  tp->epending  = (eventmask_t)0;
 8000ece:	e943 1105 	strd	r1, r1, [r3, #-20]
  list_init(&tp->waiting);
 8000ed2:	f1a3 0520 	sub.w	r5, r3, #32
  queue_init(&tp->msgqueue);
 8000ed6:	f1a3 011c 	sub.w	r1, r3, #28
  REG_INSERT(tp);
 8000eda:	f843 4c34 	str.w	r4, [r3, #-52]
 8000ede:	6120      	str	r0, [r4, #16]
 8000ee0:	6150      	str	r0, [r2, #20]
  tqp->next = (thread_t *)tqp;
 8000ee2:	e943 5108 	strd	r5, r1, [r3, #-32]
  tqp->prev = (thread_t *)tqp;
 8000ee6:	f843 1c18 	str.w	r1, [r3, #-24]
}
 8000eea:	bcf0      	pop	{r4, r5, r6, r7}
 8000eec:	4770      	bx	lr
 8000eee:	bf00      	nop
 8000ef0:	200008f0 	.word	0x200008f0
 8000ef4:	08000291 	.word	0x08000291
	...

08000f00 <wakeup>:
 8000f00:	2320      	movs	r3, #32
 8000f02:	f383 8811 	msr	BASEPRI, r3
  switch (tp->state) {
 8000f06:	f890 3020 	ldrb.w	r3, [r0, #32]
 8000f0a:	2b07      	cmp	r3, #7
 8000f0c:	d80e      	bhi.n	8000f2c <wakeup+0x2c>
 8000f0e:	e8df f003 	tbb	[pc, r3]
 8000f12:	0d28      	.short	0x0d28
 8000f14:	0408240d 	.word	0x0408240d
 8000f18:	080d      	.short	0x080d
    chSemFastSignalI(tp->u.wtsemp);
 8000f1a:	6a42      	ldr	r2, [r0, #36]	; 0x24
 */
static inline void chSemFastSignalI(semaphore_t *sp) {

  chDbgCheckClassI();

  sp->cnt++;
 8000f1c:	6893      	ldr	r3, [r2, #8]
 8000f1e:	3301      	adds	r3, #1
 8000f20:	6093      	str	r3, [r2, #8]
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->queue.prev->queue.next = tp->queue.next;
 8000f22:	e9d0 2300 	ldrd	r2, r3, [r0]
 8000f26:	601a      	str	r2, [r3, #0]
  tp->queue.next->queue.prev = tp->queue.prev;
 8000f28:	6802      	ldr	r2, [r0, #0]
 8000f2a:	6053      	str	r3, [r2, #4]
static void wakeup(void *p) {
 8000f2c:	b410      	push	{r4}
  tp->state = CH_STATE_READY;
 8000f2e:	2200      	movs	r2, #0
  tp->u.rdymsg = MSG_TIMEOUT;
 8000f30:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
  } while (cp->prio >= tp->prio);
 8000f34:	6881      	ldr	r1, [r0, #8]
  cp = (thread_t *)&ch.rlist.queue;
 8000f36:	4b0d      	ldr	r3, [pc, #52]	; (8000f6c <wakeup+0x6c>)
  tp->u.rdymsg = MSG_TIMEOUT;
 8000f38:	6244      	str	r4, [r0, #36]	; 0x24
  tp->state = CH_STATE_READY;
 8000f3a:	f880 2020 	strb.w	r2, [r0, #32]
    cp = cp->queue.next;
 8000f3e:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
 8000f40:	689a      	ldr	r2, [r3, #8]
 8000f42:	428a      	cmp	r2, r1
 8000f44:	d2fb      	bcs.n	8000f3e <wakeup+0x3e>
  tp->queue.prev             = cp->queue.prev;
 8000f46:	685a      	ldr	r2, [r3, #4]
 8000f48:	2100      	movs	r1, #0
 8000f4a:	e9c0 3200 	strd	r3, r2, [r0]
  tp->queue.prev->queue.next = tp;
 8000f4e:	6010      	str	r0, [r2, #0]
  cp->queue.prev             = tp;
 8000f50:	6058      	str	r0, [r3, #4]
 8000f52:	f381 8811 	msr	BASEPRI, r1
}
 8000f56:	bc10      	pop	{r4}
 8000f58:	4770      	bx	lr
    *tp->u.wttrp = NULL;
 8000f5a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	601a      	str	r2, [r3, #0]
 8000f60:	e7e4      	b.n	8000f2c <wakeup+0x2c>
 8000f62:	2300      	movs	r3, #0
 8000f64:	f383 8811 	msr	BASEPRI, r3
 8000f68:	4770      	bx	lr
 8000f6a:	bf00      	nop
 8000f6c:	200008f0 	.word	0x200008f0

08000f70 <chSchReadyI>:
thread_t *chSchReadyI(thread_t *tp) {
 8000f70:	4601      	mov	r1, r0
  tp->state = CH_STATE_READY;
 8000f72:	2200      	movs	r2, #0
  cp = (thread_t *)&ch.rlist.queue;
 8000f74:	4b07      	ldr	r3, [pc, #28]	; (8000f94 <chSchReadyI+0x24>)
  } while (cp->prio >= tp->prio);
 8000f76:	6880      	ldr	r0, [r0, #8]
  tp->state = CH_STATE_READY;
 8000f78:	f881 2020 	strb.w	r2, [r1, #32]
    cp = cp->queue.next;
 8000f7c:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
 8000f7e:	689a      	ldr	r2, [r3, #8]
 8000f80:	4282      	cmp	r2, r0
 8000f82:	d2fb      	bcs.n	8000f7c <chSchReadyI+0xc>
  tp->queue.prev             = cp->queue.prev;
 8000f84:	685a      	ldr	r2, [r3, #4]
}
 8000f86:	4608      	mov	r0, r1
  tp->queue.prev             = cp->queue.prev;
 8000f88:	e9c1 3200 	strd	r3, r2, [r1]
  tp->queue.prev->queue.next = tp;
 8000f8c:	6011      	str	r1, [r2, #0]
  cp->queue.prev             = tp;
 8000f8e:	6059      	str	r1, [r3, #4]
}
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop
 8000f94:	200008f0 	.word	0x200008f0
	...

08000fa0 <chThdDequeueNextI.constprop.75>:
  return (bool)(tqp->next != (const thread_t *)tqp);
 8000fa0:	6803      	ldr	r3, [r0, #0]
 *
 * @iclass
 */
void chThdDequeueNextI(threads_queue_t *tqp, msg_t msg) {

  if (queue_notempty(tqp)) {
 8000fa2:	4298      	cmp	r0, r3
 8000fa4:	d007      	beq.n	8000fb6 <chThdDequeueNextI.constprop.75+0x16>
  tqp->next             = tp->queue.next;
 8000fa6:	681a      	ldr	r2, [r3, #0]
 8000fa8:	6002      	str	r2, [r0, #0]

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->state == CH_STATE_QUEUED, "invalid state");

  tp->u.rdymsg = msg;
 8000faa:	2100      	movs	r1, #0
  tqp->next->queue.prev = (thread_t *)tqp;
 8000fac:	6050      	str	r0, [r2, #4]
  (void) chSchReadyI(tp);
 8000fae:	4618      	mov	r0, r3
  tp->u.rdymsg = msg;
 8000fb0:	6259      	str	r1, [r3, #36]	; 0x24
  (void) chSchReadyI(tp);
 8000fb2:	f7ff bfdd 	b.w	8000f70 <chSchReadyI>
    chThdDoDequeueNextI(tqp, msg);
  }
}
 8000fb6:	4770      	bx	lr
	...

08000fc0 <chMBPostI.constprop.26>:

  chDbgCheckClassI();
  chDbgCheck(mbp != NULL);

  /* If the mailbox is in reset state then returns immediately.*/
  if (mbp->reset) {
 8000fc0:	4b0f      	ldr	r3, [pc, #60]	; (8001000 <chMBPostI.constprop.26+0x40>)
 8000fc2:	7d1a      	ldrb	r2, [r3, #20]
 8000fc4:	b9b2      	cbnz	r2, 8000ff4 <chMBPostI.constprop.26+0x34>
msg_t chMBPostI(mailbox_t *mbp, msg_t msg) {
 8000fc6:	b570      	push	{r4, r5, r6, lr}
 */
static inline size_t chMBGetFreeCountI(const mailbox_t *mbp) {

  chDbgCheckClassI();

  return chMBGetSizeI(mbp) - chMBGetUsedCountI(mbp);
 8000fc8:	e9d3 6100 	ldrd	r6, r1, [r3]
 8000fcc:	691a      	ldr	r2, [r3, #16]
  return (size_t)(mbp->top - mbp->buffer);
 8000fce:	1b8c      	subs	r4, r1, r6
    return MSG_RESET;
  }

  /* Is there a free message slot in queue? if so then post.*/
  if (chMBGetFreeCountI(mbp) > (size_t)0) {
 8000fd0:	ebb2 0fa4 	cmp.w	r2, r4, asr #2
 8000fd4:	d011      	beq.n	8000ffa <chMBPostI.constprop.26+0x3a>
    *mbp->wrptr++ = msg;
 8000fd6:	689d      	ldr	r5, [r3, #8]
 8000fd8:	1d2c      	adds	r4, r5, #4
 8000fda:	609c      	str	r4, [r3, #8]
    if (mbp->wrptr >= mbp->top) {
 8000fdc:	42a1      	cmp	r1, r4
    *mbp->wrptr++ = msg;
 8000fde:	6028      	str	r0, [r5, #0]
      mbp->wrptr = mbp->buffer;
    }
    mbp->cnt++;
 8000fe0:	f102 0201 	add.w	r2, r2, #1

    /* If there is a reader waiting then makes it ready.*/
    chThdDequeueNextI(&mbp->qr, MSG_OK);
 8000fe4:	4807      	ldr	r0, [pc, #28]	; (8001004 <chMBPostI.constprop.26+0x44>)
      mbp->wrptr = mbp->buffer;
 8000fe6:	bf98      	it	ls
 8000fe8:	609e      	strls	r6, [r3, #8]
    mbp->cnt++;
 8000fea:	611a      	str	r2, [r3, #16]
    chThdDequeueNextI(&mbp->qr, MSG_OK);
 8000fec:	f7ff ffd8 	bl	8000fa0 <chThdDequeueNextI.constprop.75>

    return MSG_OK;
 8000ff0:	2000      	movs	r0, #0
  }

  /* No space, immediate timeout.*/
  return MSG_TIMEOUT;
}
 8000ff2:	bd70      	pop	{r4, r5, r6, pc}
    return MSG_RESET;
 8000ff4:	f06f 0001 	mvn.w	r0, #1
}
 8000ff8:	4770      	bx	lr
  return MSG_TIMEOUT;
 8000ffa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8000ffe:	bd70      	pop	{r4, r5, r6, pc}
 8001000:	2000084c 	.word	0x2000084c
 8001004:	2000086c 	.word	0x2000086c
	...

08001010 <chMBPostAheadI.constprop.23>:
 * @retval MSG_TIMEOUT  if the mailbox is full and the message cannot be
 *                      posted.
 *
 * @iclass
 */
msg_t chMBPostAheadI(mailbox_t *mbp, msg_t msg) {
 8001010:	b538      	push	{r3, r4, r5, lr}

  chDbgCheckClassI();
  chDbgCheck(mbp != NULL);

  /* If the mailbox is in reset state then returns immediately.*/
  if (mbp->reset) {
 8001012:	4b0f      	ldr	r3, [pc, #60]	; (8001050 <chMBPostAheadI.constprop.23+0x40>)
 8001014:	7d1a      	ldrb	r2, [r3, #20]
 8001016:	b9a2      	cbnz	r2, 8001042 <chMBPostAheadI.constprop.23+0x32>
  return chMBGetSizeI(mbp) - chMBGetUsedCountI(mbp);
 8001018:	e9d3 4500 	ldrd	r4, r5, [r3]
 800101c:	6919      	ldr	r1, [r3, #16]
  return (size_t)(mbp->top - mbp->buffer);
 800101e:	1b2a      	subs	r2, r5, r4
    return MSG_RESET;
  }

  /* Is there a free message slot in queue? if so then post.*/
  if (chMBGetFreeCountI(mbp) > (size_t)0) {
 8001020:	ebb1 0fa2 	cmp.w	r1, r2, asr #2
 8001024:	d010      	beq.n	8001048 <chMBPostAheadI.constprop.23+0x38>
    if (--mbp->rdptr < mbp->buffer) {
 8001026:	68da      	ldr	r2, [r3, #12]
 8001028:	3a04      	subs	r2, #4
 800102a:	4294      	cmp	r4, r2
      mbp->rdptr = mbp->top - 1;
 800102c:	bf88      	it	hi
 800102e:	1f2a      	subhi	r2, r5, #4
 8001030:	60da      	str	r2, [r3, #12]
    }
    *mbp->rdptr = msg;
    mbp->cnt++;
 8001032:	3101      	adds	r1, #1
    *mbp->rdptr = msg;
 8001034:	6010      	str	r0, [r2, #0]

    /* If there is a reader waiting then makes it ready.*/
    chThdDequeueNextI(&mbp->qr, MSG_OK);
 8001036:	4807      	ldr	r0, [pc, #28]	; (8001054 <chMBPostAheadI.constprop.23+0x44>)
    mbp->cnt++;
 8001038:	6119      	str	r1, [r3, #16]
    chThdDequeueNextI(&mbp->qr, MSG_OK);
 800103a:	f7ff ffb1 	bl	8000fa0 <chThdDequeueNextI.constprop.75>

    return MSG_OK;
 800103e:	2000      	movs	r0, #0
  }

  /* No space, immediate timeout.*/
  return MSG_TIMEOUT;
}
 8001040:	bd38      	pop	{r3, r4, r5, pc}
    return MSG_RESET;
 8001042:	f06f 0001 	mvn.w	r0, #1
}
 8001046:	bd38      	pop	{r3, r4, r5, pc}
  return MSG_TIMEOUT;
 8001048:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 800104c:	bd38      	pop	{r3, r4, r5, pc}
 800104e:	bf00      	nop
 8001050:	2000084c 	.word	0x2000084c
 8001054:	2000086c 	.word	0x2000086c
	...

08001060 <chMBFetchI.constprop.20>:
 * @retval MSG_TIMEOUT  if the mailbox is empty and a message cannot be
 *                      fetched.
 *
 * @iclass
 */
msg_t chMBFetchI(mailbox_t *mbp, msg_t *msgp) {
 8001060:	b538      	push	{r3, r4, r5, lr}

  chDbgCheckClassI();
  chDbgCheck((mbp != NULL) && (msgp != NULL));

  /* If the mailbox is in reset state then returns immediately.*/
  if (mbp->reset) {
 8001062:	4b0f      	ldr	r3, [pc, #60]	; (80010a0 <chMBFetchI.constprop.20+0x40>)
 8001064:	7d1a      	ldrb	r2, [r3, #20]
 8001066:	b9a2      	cbnz	r2, 8001092 <chMBFetchI.constprop.20+0x32>
    return MSG_RESET;
  }

  /* Is there a message in queue? if so then fetch.*/
  if (chMBGetUsedCountI(mbp) > (size_t)0) {
 8001068:	6919      	ldr	r1, [r3, #16]
 800106a:	b1a9      	cbz	r1, 8001098 <chMBFetchI.constprop.20+0x38>
    *msgp = *mbp->rdptr++;
 800106c:	68da      	ldr	r2, [r3, #12]
    if (mbp->rdptr >= mbp->top) {
 800106e:	685c      	ldr	r4, [r3, #4]
    *msgp = *mbp->rdptr++;
 8001070:	6815      	ldr	r5, [r2, #0]
 8001072:	3204      	adds	r2, #4
    if (mbp->rdptr >= mbp->top) {
 8001074:	42a2      	cmp	r2, r4
    *msgp = *mbp->rdptr++;
 8001076:	60da      	str	r2, [r3, #12]
      mbp->rdptr = mbp->buffer;
    }
    mbp->cnt--;
 8001078:	f101 31ff 	add.w	r1, r1, #4294967295	; 0xffffffff
    *msgp = *mbp->rdptr++;
 800107c:	6005      	str	r5, [r0, #0]
      mbp->rdptr = mbp->buffer;
 800107e:	bf28      	it	cs
 8001080:	681a      	ldrcs	r2, [r3, #0]

    /* If there is a writer waiting then makes it ready.*/
    chThdDequeueNextI(&mbp->qw, MSG_OK);
 8001082:	4808      	ldr	r0, [pc, #32]	; (80010a4 <chMBFetchI.constprop.20+0x44>)
      mbp->rdptr = mbp->buffer;
 8001084:	bf28      	it	cs
 8001086:	60da      	strcs	r2, [r3, #12]
    mbp->cnt--;
 8001088:	6119      	str	r1, [r3, #16]
    chThdDequeueNextI(&mbp->qw, MSG_OK);
 800108a:	f7ff ff89 	bl	8000fa0 <chThdDequeueNextI.constprop.75>

    return MSG_OK;
 800108e:	2000      	movs	r0, #0
  }

  /* No message, immediate timeout.*/
  return MSG_TIMEOUT;
}
 8001090:	bd38      	pop	{r3, r4, r5, pc}
    return MSG_RESET;
 8001092:	f06f 0001 	mvn.w	r0, #1
}
 8001096:	bd38      	pop	{r3, r4, r5, pc}
  return MSG_TIMEOUT;
 8001098:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 800109c:	bd38      	pop	{r3, r4, r5, pc}
 800109e:	bf00      	nop
 80010a0:	2000084c 	.word	0x2000084c
 80010a4:	20000864 	.word	0x20000864
	...

080010b0 <chThdDequeueAllI.constprop.59>:
 * @param[in] tqp       pointer to the threads queue object
 * @param[in] msg       the message code
 *
 * @iclass
 */
void chThdDequeueAllI(threads_queue_t *tqp, msg_t msg) {
 80010b0:	b538      	push	{r3, r4, r5, lr}
  return (bool)(tqp->next != (const thread_t *)tqp);
 80010b2:	6803      	ldr	r3, [r0, #0]

  while (queue_notempty(tqp)) {
 80010b4:	4298      	cmp	r0, r3
 80010b6:	d00c      	beq.n	80010d2 <chThdDequeueAllI.constprop.59+0x22>
 80010b8:	4604      	mov	r4, r0
  tp->u.rdymsg = msg;
 80010ba:	f06f 0501 	mvn.w	r5, #1
  tqp->next             = tp->queue.next;
 80010be:	681a      	ldr	r2, [r3, #0]
 80010c0:	6022      	str	r2, [r4, #0]
  (void) chSchReadyI(tp);
 80010c2:	4618      	mov	r0, r3
  tqp->next->queue.prev = (thread_t *)tqp;
 80010c4:	6054      	str	r4, [r2, #4]
  tp->u.rdymsg = msg;
 80010c6:	625d      	str	r5, [r3, #36]	; 0x24
  (void) chSchReadyI(tp);
 80010c8:	f7ff ff52 	bl	8000f70 <chSchReadyI>
  return (bool)(tqp->next != (const thread_t *)tqp);
 80010cc:	6823      	ldr	r3, [r4, #0]
 80010ce:	42a3      	cmp	r3, r4
 80010d0:	d1f5      	bne.n	80010be <chThdDequeueAllI.constprop.59+0xe>
    chThdDoDequeueNextI(tqp, msg);
  }
}
 80010d2:	bd38      	pop	{r3, r4, r5, pc}
	...

080010e0 <chCondSignalI.constprop.50>:
 80010e0:	4b07      	ldr	r3, [pc, #28]	; (8001100 <chCondSignalI.constprop.50+0x20>)
 80010e2:	681a      	ldr	r2, [r3, #0]
void chCondSignalI(condition_variable_t *cp) {

  chDbgCheckClassI();
  chDbgCheck(cp != NULL);

  if (queue_notempty(&cp->queue)) {
 80010e4:	429a      	cmp	r2, r3
 80010e6:	d009      	beq.n	80010fc <chCondSignalI.constprop.50+0x1c>
  tqp->next             = tp->queue.next;
 80010e8:	6811      	ldr	r1, [r2, #0]
void chCondSignalI(condition_variable_t *cp) {
 80010ea:	b410      	push	{r4}
    thread_t *tp = queue_fifo_remove(&cp->queue);
    tp->u.rdymsg = MSG_OK;
 80010ec:	2400      	movs	r4, #0
  tqp->next->queue.prev = (thread_t *)tqp;
 80010ee:	604b      	str	r3, [r1, #4]
  tqp->next             = tp->queue.next;
 80010f0:	6019      	str	r1, [r3, #0]
 80010f2:	6254      	str	r4, [r2, #36]	; 0x24
    (void) chSchReadyI(tp);
 80010f4:	4610      	mov	r0, r2
  }
}
 80010f6:	bc10      	pop	{r4}
    (void) chSchReadyI(tp);
 80010f8:	f7ff bf3a 	b.w	8000f70 <chSchReadyI>
 80010fc:	4770      	bx	lr
 80010fe:	bf00      	nop
 8001100:	20000800 	.word	0x20000800
	...

08001110 <chEvtSignalI>:
  tp->epending |= events;
 8001110:	6b43      	ldr	r3, [r0, #52]	; 0x34
  if (((tp->state == CH_STATE_WTOREVT) &&
 8001112:	f890 2020 	ldrb.w	r2, [r0, #32]
  tp->epending |= events;
 8001116:	4319      	orrs	r1, r3
  if (((tp->state == CH_STATE_WTOREVT) &&
 8001118:	2a0a      	cmp	r2, #10
  tp->epending |= events;
 800111a:	6341      	str	r1, [r0, #52]	; 0x34
  if (((tp->state == CH_STATE_WTOREVT) &&
 800111c:	d009      	beq.n	8001132 <chEvtSignalI+0x22>
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
 800111e:	2a0b      	cmp	r2, #11
 8001120:	d000      	beq.n	8001124 <chEvtSignalI+0x14>
}
 8001122:	4770      	bx	lr
       ((tp->epending & tp->u.ewmask) == tp->u.ewmask))) {
 8001124:	6a43      	ldr	r3, [r0, #36]	; 0x24
      ((tp->state == CH_STATE_WTANDEVT) &&
 8001126:	438b      	bics	r3, r1
 8001128:	d1fb      	bne.n	8001122 <chEvtSignalI+0x12>
    tp->u.rdymsg = MSG_OK;
 800112a:	2300      	movs	r3, #0
 800112c:	6243      	str	r3, [r0, #36]	; 0x24
    (void) chSchReadyI(tp);
 800112e:	f7ff bf1f 	b.w	8000f70 <chSchReadyI>
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
 8001132:	6a43      	ldr	r3, [r0, #36]	; 0x24
  if (((tp->state == CH_STATE_WTOREVT) &&
 8001134:	4219      	tst	r1, r3
 8001136:	d1f8      	bne.n	800112a <chEvtSignalI+0x1a>
 8001138:	4770      	bx	lr
 800113a:	bf00      	nop
 800113c:	0000      	movs	r0, r0
	...

08001140 <chEvtBroadcastFlagsI>:
void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags) {
 8001140:	b570      	push	{r4, r5, r6, lr}
  elp = esp->next;
 8001142:	6804      	ldr	r4, [r0, #0]
  while (elp != (event_listener_t *)esp) {
 8001144:	42a0      	cmp	r0, r4
 8001146:	d00f      	beq.n	8001168 <chEvtBroadcastFlagsI+0x28>
 8001148:	4606      	mov	r6, r0
 800114a:	460d      	mov	r5, r1
    elp->flags |= flags;
 800114c:	68e3      	ldr	r3, [r4, #12]
 800114e:	432b      	orrs	r3, r5
 8001150:	60e3      	str	r3, [r4, #12]
    if ((flags == (eventflags_t)0) ||
 8001152:	b115      	cbz	r5, 800115a <chEvtBroadcastFlagsI+0x1a>
        ((flags & elp->wflags) != (eventflags_t)0)) {
 8001154:	6923      	ldr	r3, [r4, #16]
    if ((flags == (eventflags_t)0) ||
 8001156:	421d      	tst	r5, r3
 8001158:	d003      	beq.n	8001162 <chEvtBroadcastFlagsI+0x22>
      chEvtSignalI(elp->listener, elp->events);
 800115a:	e9d4 0101 	ldrd	r0, r1, [r4, #4]
 800115e:	f7ff ffd7 	bl	8001110 <chEvtSignalI>
    elp = elp->next;
 8001162:	6824      	ldr	r4, [r4, #0]
  while (elp != (event_listener_t *)esp) {
 8001164:	42a6      	cmp	r6, r4
 8001166:	d1f1      	bne.n	800114c <chEvtBroadcastFlagsI+0xc>
}
 8001168:	bd70      	pop	{r4, r5, r6, pc}
 800116a:	bf00      	nop
 800116c:	0000      	movs	r0, r0
	...

08001170 <chMtxUnlockS>:
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @sclass
 */
void chMtxUnlockS(mutex_t *mp) {
  thread_t *ctp = currp;
 8001170:	4b12      	ldr	r3, [pc, #72]	; (80011bc <chMtxUnlockS+0x4c>)
void chMtxUnlockS(mutex_t *mp) {
 8001172:	b430      	push	{r4, r5}
  return (bool)(tqp->next != (const thread_t *)tqp);
 8001174:	6804      	ldr	r4, [r0, #0]
  thread_t *ctp = currp;
 8001176:	699d      	ldr	r5, [r3, #24]
    chDbgAssert(ctp->mtxlist == mp, "not next in list");

    /* Removes the top mutex from the thread's owned mutexes list and marks
       it as not owned. Note, it is assumed to be the same mutex passed as
       parameter of this function.*/
    ctp->mtxlist = mp->next;
 8001178:	68c3      	ldr	r3, [r0, #12]
 800117a:	63ab      	str	r3, [r5, #56]	; 0x38

    /* If a thread is waiting on the mutex then the fun part begins.*/
    if (chMtxQueueNotEmptyS(mp)) {
 800117c:	4284      	cmp	r4, r0
 800117e:	d018      	beq.n	80011b2 <chMtxUnlockS+0x42>
 8001180:	4601      	mov	r1, r0
      thread_t *tp;

      /* Recalculates the optimal thread priority by scanning the owned
         mutexes list.*/
      tprio_t newprio = ctp->realprio;
 8001182:	6be8      	ldr	r0, [r5, #60]	; 0x3c
      lmp = ctp->mtxlist;
      while (lmp != NULL) {
 8001184:	b14b      	cbz	r3, 800119a <chMtxUnlockS+0x2a>
 8001186:	681a      	ldr	r2, [r3, #0]
        /* If the highest priority thread waiting in the mutexes list has a
           greater priority than the current thread base priority then the
           final priority will have at least that priority.*/
        if (chMtxQueueNotEmptyS(lmp) &&
 8001188:	4293      	cmp	r3, r2
 800118a:	d003      	beq.n	8001194 <chMtxUnlockS+0x24>
 800118c:	6892      	ldr	r2, [r2, #8]
 800118e:	4290      	cmp	r0, r2
 8001190:	bf38      	it	cc
 8001192:	4610      	movcc	r0, r2
            (lmp->queue.next->prio > newprio)) {
          newprio = lmp->queue.next->prio;
        }
        lmp = lmp->next;
 8001194:	68db      	ldr	r3, [r3, #12]
      while (lmp != NULL) {
 8001196:	2b00      	cmp	r3, #0
 8001198:	d1f5      	bne.n	8001186 <chMtxUnlockS+0x16>
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
      mp->cnt = (cnt_t)1;
#endif
      tp = queue_fifo_remove(&mp->queue);
      mp->owner = tp;
      mp->next = tp->mtxlist;
 800119a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  tqp->next             = tp->queue.next;
 800119c:	6823      	ldr	r3, [r4, #0]
      ctp->prio = newprio;
 800119e:	60a8      	str	r0, [r5, #8]
 80011a0:	600b      	str	r3, [r1, #0]
      tp->mtxlist = mp;
      (void) chSchReadyI(tp);
 80011a2:	4620      	mov	r0, r4
  tqp->next->queue.prev = (thread_t *)tqp;
 80011a4:	6059      	str	r1, [r3, #4]
      mp->next = tp->mtxlist;
 80011a6:	e9c1 4202 	strd	r4, r2, [r1, #8]
      tp->mtxlist = mp;
 80011aa:	63a1      	str	r1, [r4, #56]	; 0x38
      mp->owner = NULL;
    }
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
  }
#endif
}
 80011ac:	bc30      	pop	{r4, r5}
      (void) chSchReadyI(tp);
 80011ae:	f7ff bedf 	b.w	8000f70 <chSchReadyI>
      mp->owner = NULL;
 80011b2:	2300      	movs	r3, #0
 80011b4:	60a3      	str	r3, [r4, #8]
}
 80011b6:	bc30      	pop	{r4, r5}
 80011b8:	4770      	bx	lr
 80011ba:	bf00      	nop
 80011bc:	200008f0 	.word	0x200008f0

080011c0 <chSemSignalI>:
  chDbgCheck(sp != NULL);
  chDbgAssert(((sp->cnt >= (cnt_t)0) && queue_isempty(&sp->queue)) ||
              ((sp->cnt < (cnt_t)0) && queue_notempty(&sp->queue)),
              "inconsistent semaphore");

  if (++sp->cnt <= (cnt_t)0) {
 80011c0:	6883      	ldr	r3, [r0, #8]
 80011c2:	3301      	adds	r3, #1
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	6083      	str	r3, [r0, #8]
 80011c8:	dd00      	ble.n	80011cc <chSemSignalI+0xc>
             chSchReadyI().*/
    thread_t *tp = queue_fifo_remove(&sp->queue);
    tp->u.rdymsg = MSG_OK;
    (void) chSchReadyI(tp);
  }
}
 80011ca:	4770      	bx	lr
  thread_t *tp = tqp->next;
 80011cc:	6803      	ldr	r3, [r0, #0]
  tqp->next             = tp->queue.next;
 80011ce:	681a      	ldr	r2, [r3, #0]
 80011d0:	6002      	str	r2, [r0, #0]
    tp->u.rdymsg = MSG_OK;
 80011d2:	2100      	movs	r1, #0
  tqp->next->queue.prev = (thread_t *)tqp;
 80011d4:	6050      	str	r0, [r2, #4]
    (void) chSchReadyI(tp);
 80011d6:	4618      	mov	r0, r3
    tp->u.rdymsg = MSG_OK;
 80011d8:	6259      	str	r1, [r3, #36]	; 0x24
    (void) chSchReadyI(tp);
 80011da:	f7ff bec9 	b.w	8000f70 <chSchReadyI>
 80011de:	bf00      	nop

080011e0 <chVTDoResetI>:
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  sysinterval_t nowdelta, delta;

  /* If the timer is not the first of the list then it is simply unlinked
     else the operation is more complex.*/
  if (ch.vtlist.next != vtp) {
 80011e0:	4b1b      	ldr	r3, [pc, #108]	; (8001250 <chVTDoResetI+0x70>)
 80011e2:	69da      	ldr	r2, [r3, #28]
 80011e4:	4282      	cmp	r2, r0
void chVTDoResetI(virtual_timer_t *vtp) {
 80011e6:	b410      	push	{r4}
  if (ch.vtlist.next != vtp) {
 80011e8:	d00f      	beq.n	800120a <chVTDoResetI+0x2a>
    /* Removing the element from the delta list.*/
    vtp->prev->next = vtp->next;
 80011ea:	e9d0 2100 	ldrd	r2, r1, [r0]
 80011ee:	600a      	str	r2, [r1, #0]
    vtp->next->prev = vtp->prev;
 80011f0:	6802      	ldr	r2, [r0, #0]
    vtp->func = NULL;

    /* Adding delta to the next element, if it is not the last one.*/
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->next)
 80011f2:	331c      	adds	r3, #28
    vtp->func = NULL;
 80011f4:	2400      	movs	r4, #0
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->next)
 80011f6:	429a      	cmp	r2, r3
    vtp->next->prev = vtp->prev;
 80011f8:	6051      	str	r1, [r2, #4]
    vtp->func = NULL;
 80011fa:	60c4      	str	r4, [r0, #12]
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->next)
 80011fc:	d003      	beq.n	8001206 <chVTDoResetI+0x26>
      vtp->next->delta += vtp->delta;
 80011fe:	6881      	ldr	r1, [r0, #8]
 8001200:	6893      	ldr	r3, [r2, #8]
 8001202:	440b      	add	r3, r1
 8001204:	6093      	str	r3, [r2, #8]
    }
#endif
  }
  port_timer_set_alarm(chTimeAddX(ch.vtlist.lasttime, delta));
#endif /* CH_CFG_ST_TIMEDELTA > 0 */
}
 8001206:	bc10      	pop	{r4}
 8001208:	4770      	bx	lr
  ch.vtlist.next = vtp->next;
 800120a:	4618      	mov	r0, r3
 800120c:	6811      	ldr	r1, [r2, #0]
 800120e:	f840 1f1c 	str.w	r1, [r0, #28]!
  vtp->func = NULL;
 8001212:	2400      	movs	r4, #0
  if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 8001214:	4281      	cmp	r1, r0
  ch.vtlist.next->prev = (virtual_timer_t *)&ch.vtlist;
 8001216:	6048      	str	r0, [r1, #4]
  vtp->func = NULL;
 8001218:	60d4      	str	r4, [r2, #12]
  if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 800121a:	d014      	beq.n	8001246 <chVTDoResetI+0x66>
  ch.vtlist.next->delta += vtp->delta;
 800121c:	6894      	ldr	r4, [r2, #8]
 800121e:	688a      	ldr	r2, [r1, #8]
  nowdelta = chTimeDiffX(ch.vtlist.lasttime, chVTGetSystemTimeX());
 8001220:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  ch.vtlist.next->delta += vtp->delta;
 8001222:	4414      	add	r4, r2
 8001224:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001228:	608c      	str	r4, [r1, #8]
 800122a:	6a52      	ldr	r2, [r2, #36]	; 0x24
  return (sysinterval_t)((systime_t)(end - start));
 800122c:	1ad2      	subs	r2, r2, r3
  if (nowdelta >= ch.vtlist.next->delta) {
 800122e:	4294      	cmp	r4, r2
 8001230:	d9e9      	bls.n	8001206 <chVTDoResetI+0x26>
  delta = ch.vtlist.next->delta - nowdelta;
 8001232:	1aa1      	subs	r1, r4, r2
  if (delta < (sysinterval_t)CH_CFG_ST_TIMEDELTA) {
 8001234:	2901      	cmp	r1, #1
    delta = nowdelta + (sysinterval_t)CH_CFG_ST_TIMEDELTA;
 8001236:	bf98      	it	ls
 8001238:	1c94      	addls	r4, r2, #2
 *
 * @notapi
 */
static inline void st_lld_set_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 800123a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  return systime + (systime_t)interval;
 800123e:	4423      	add	r3, r4
 8001240:	6353      	str	r3, [r2, #52]	; 0x34
}
 8001242:	bc10      	pop	{r4}
 8001244:	4770      	bx	lr
  STM32_ST_TIM->DIER = 0;
 8001246:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800124a:	60dc      	str	r4, [r3, #12]
 800124c:	e7db      	b.n	8001206 <chVTDoResetI+0x26>
 800124e:	bf00      	nop
 8001250:	200008f0 	.word	0x200008f0
	...

08001260 <chVTDoSetI>:
                vtfunc_t vtfunc, void *par) {
 8001260:	b4f0      	push	{r4, r5, r6, r7}
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 8001262:	4d1f      	ldr	r5, [pc, #124]	; (80012e0 <chVTDoSetI+0x80>)
 8001264:	462e      	mov	r6, r5
 8001266:	2902      	cmp	r1, #2
 8001268:	f856 4f1c 	ldr.w	r4, [r6, #28]!
  vtp->func = vtfunc;
 800126c:	60c2      	str	r2, [r0, #12]
  return (systime_t)STM32_ST_TIM->CNT;
 800126e:	f04f 4780 	mov.w	r7, #1073741824	; 0x40000000
 8001272:	bf38      	it	cc
 8001274:	2102      	movcc	r1, #2
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 8001276:	42b4      	cmp	r4, r6
  vtp->par = par;
 8001278:	6103      	str	r3, [r0, #16]
 800127a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 800127c:	d01f      	beq.n	80012be <chVTDoSetI+0x5e>
    delta = chTimeDiffX(ch.vtlist.lasttime, now) + delay;
 800127e:	6aae      	ldr	r6, [r5, #40]	; 0x28
 8001280:	68a3      	ldr	r3, [r4, #8]
  return (sysinterval_t)((systime_t)(end - start));
 8001282:	1b92      	subs	r2, r2, r6
 8001284:	1889      	adds	r1, r1, r2
    if (delta < chTimeDiffX(ch.vtlist.lasttime, now)) {
 8001286:	d216      	bcs.n	80012b6 <chVTDoSetI+0x56>
    else if (delta < p->delta) {
 8001288:	428b      	cmp	r3, r1
 800128a:	d826      	bhi.n	80012da <chVTDoSetI+0x7a>
  while (p->delta < delta) {
 800128c:	4299      	cmp	r1, r3
 800128e:	d904      	bls.n	800129a <chVTDoSetI+0x3a>
    p = p->next;
 8001290:	6824      	ldr	r4, [r4, #0]
    delta -= p->delta;
 8001292:	1ac9      	subs	r1, r1, r3
  while (p->delta < delta) {
 8001294:	68a3      	ldr	r3, [r4, #8]
 8001296:	428b      	cmp	r3, r1
 8001298:	d3fa      	bcc.n	8001290 <chVTDoSetI+0x30>
  vtp->prev = vtp->next->prev;
 800129a:	6863      	ldr	r3, [r4, #4]
 800129c:	e9c0 4300 	strd	r4, r3, [r0]
  vtp->prev->next = vtp;
 80012a0:	6018      	str	r0, [r3, #0]
  p->prev = vtp;
 80012a2:	6060      	str	r0, [r4, #4]
  vtp->delta = delta;
 80012a4:	6081      	str	r1, [r0, #8]
  p->delta -= delta;
 80012a6:	68a3      	ldr	r3, [r4, #8]
  ch.vtlist.delta = (sysinterval_t)-1;
 80012a8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
  p->delta -= delta;
 80012ac:	1a59      	subs	r1, r3, r1
 80012ae:	60a1      	str	r1, [r4, #8]
  ch.vtlist.delta = (sysinterval_t)-1;
 80012b0:	626a      	str	r2, [r5, #36]	; 0x24
}
 80012b2:	bcf0      	pop	{r4, r5, r6, r7}
 80012b4:	4770      	bx	lr
      p = p->next;
 80012b6:	6824      	ldr	r4, [r4, #0]
      delta -= p->delta;
 80012b8:	1ac9      	subs	r1, r1, r3
 80012ba:	68a3      	ldr	r3, [r4, #8]
 80012bc:	e7e6      	b.n	800128c <chVTDoSetI+0x2c>
      ch.vtlist.lasttime = now;
 80012be:	62aa      	str	r2, [r5, #40]	; 0x28
  return systime + (systime_t)interval;
 80012c0:	188e      	adds	r6, r1, r2
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 80012c2:	2302      	movs	r3, #2
  STM32_ST_TIM->SR     = 0;
 80012c4:	2200      	movs	r2, #0
      ch.vtlist.prev = vtp;
 80012c6:	e9c5 0007 	strd	r0, r0, [r5, #28]
      vtp->prev = (virtual_timer_t *)&ch.vtlist;
 80012ca:	e9c0 4400 	strd	r4, r4, [r0]
      vtp->delta = delay;
 80012ce:	6081      	str	r1, [r0, #8]
  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 80012d0:	637e      	str	r6, [r7, #52]	; 0x34
  STM32_ST_TIM->SR     = 0;
 80012d2:	613a      	str	r2, [r7, #16]
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 80012d4:	60fb      	str	r3, [r7, #12]
}
 80012d6:	bcf0      	pop	{r4, r5, r6, r7}
 80012d8:	4770      	bx	lr
 80012da:	440e      	add	r6, r1
  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 80012dc:	637e      	str	r6, [r7, #52]	; 0x34
 80012de:	e7d5      	b.n	800128c <chVTDoSetI+0x2c>
 80012e0:	200008f0 	.word	0x200008f0
	...

080012f0 <chSysGetStatusAndLockX.part.1>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80012f0:	f3ef 8305 	mrs	r3, IPSR
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 80012f4:	2320      	movs	r3, #32
 80012f6:	f383 8811 	msr	BASEPRI, r3
    else {
      chSysLock();
    }
  }
  return sts;
}
 80012fa:	4770      	bx	lr
 80012fc:	0000      	movs	r0, r0
	...

08001300 <chSysIntegrityCheckI>:
  if ((testmask & CH_INTEGRITY_RLIST) != 0U) {
 8001300:	07c2      	lsls	r2, r0, #31
bool chSysIntegrityCheckI(unsigned testmask) {
 8001302:	b410      	push	{r4}
  if ((testmask & CH_INTEGRITY_RLIST) != 0U) {
 8001304:	d512      	bpl.n	800132c <chSysIntegrityCheckI+0x2c>
    tp = ch.rlist.queue.next;
 8001306:	4b29      	ldr	r3, [pc, #164]	; (80013ac <chSysIntegrityCheckI+0xac>)
 8001308:	e9d3 1400 	ldrd	r1, r4, [r3]
    while (tp != (thread_t *)&ch.rlist.queue) {
 800130c:	4299      	cmp	r1, r3
 800130e:	d041      	beq.n	8001394 <chSysIntegrityCheckI+0x94>
    n = (cnt_t)0;
 8001310:	2200      	movs	r2, #0
      tp = tp->queue.next;
 8001312:	6809      	ldr	r1, [r1, #0]
    while (tp != (thread_t *)&ch.rlist.queue) {
 8001314:	4299      	cmp	r1, r3
      n++;
 8001316:	f102 0201 	add.w	r2, r2, #1
    while (tp != (thread_t *)&ch.rlist.queue) {
 800131a:	d1fa      	bne.n	8001312 <chSysIntegrityCheckI+0x12>
    while (tp != (thread_t *)&ch.rlist.queue) {
 800131c:	428c      	cmp	r4, r1
 800131e:	d036      	beq.n	800138e <chSysIntegrityCheckI+0x8e>
      tp = tp->queue.prev;
 8001320:	6864      	ldr	r4, [r4, #4]
    while (tp != (thread_t *)&ch.rlist.queue) {
 8001322:	429c      	cmp	r4, r3
      n--;
 8001324:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
    while (tp != (thread_t *)&ch.rlist.queue) {
 8001328:	d1fa      	bne.n	8001320 <chSysIntegrityCheckI+0x20>
    if (n != (cnt_t)0) {
 800132a:	bb82      	cbnz	r2, 800138e <chSysIntegrityCheckI+0x8e>
  if ((testmask & CH_INTEGRITY_VTLIST) != 0U) {
 800132c:	0783      	lsls	r3, r0, #30
 800132e:	d513      	bpl.n	8001358 <chSysIntegrityCheckI+0x58>
    vtp = ch.vtlist.next;
 8001330:	4c1e      	ldr	r4, [pc, #120]	; (80013ac <chSysIntegrityCheckI+0xac>)
 8001332:	e9d4 2107 	ldrd	r2, r1, [r4, #28]
    while (vtp != (virtual_timer_t *)&ch.vtlist) {
 8001336:	341c      	adds	r4, #28
 8001338:	42a2      	cmp	r2, r4
 800133a:	d02f      	beq.n	800139c <chSysIntegrityCheckI+0x9c>
    n = (cnt_t)0;
 800133c:	2300      	movs	r3, #0
      vtp = vtp->next;
 800133e:	6812      	ldr	r2, [r2, #0]
    while (vtp != (virtual_timer_t *)&ch.vtlist) {
 8001340:	42a2      	cmp	r2, r4
      n++;
 8001342:	f103 0301 	add.w	r3, r3, #1
    while (vtp != (virtual_timer_t *)&ch.vtlist) {
 8001346:	d1fa      	bne.n	800133e <chSysIntegrityCheckI+0x3e>
    while (vtp != (virtual_timer_t *)&ch.vtlist) {
 8001348:	4291      	cmp	r1, r2
 800134a:	d020      	beq.n	800138e <chSysIntegrityCheckI+0x8e>
      vtp = vtp->prev;
 800134c:	6849      	ldr	r1, [r1, #4]
    while (vtp != (virtual_timer_t *)&ch.vtlist) {
 800134e:	42a1      	cmp	r1, r4
      n--;
 8001350:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
    while (vtp != (virtual_timer_t *)&ch.vtlist) {
 8001354:	d1fa      	bne.n	800134c <chSysIntegrityCheckI+0x4c>
    if (n != (cnt_t)0) {
 8001356:	b9d3      	cbnz	r3, 800138e <chSysIntegrityCheckI+0x8e>
  if ((testmask & CH_INTEGRITY_REGISTRY) != 0U) {
 8001358:	f010 0004 	ands.w	r0, r0, #4
 800135c:	d015      	beq.n	800138a <chSysIntegrityCheckI+0x8a>
    tp = ch.rlist.newer;
 800135e:	4b13      	ldr	r3, [pc, #76]	; (80013ac <chSysIntegrityCheckI+0xac>)
 8001360:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
    while (tp != (thread_t *)&ch.rlist) {
 8001364:	429a      	cmp	r2, r3
    n = (cnt_t)0;
 8001366:	f04f 0000 	mov.w	r0, #0
    while (tp != (thread_t *)&ch.rlist) {
 800136a:	d01b      	beq.n	80013a4 <chSysIntegrityCheckI+0xa4>
      tp = tp->newer;
 800136c:	6912      	ldr	r2, [r2, #16]
    while (tp != (thread_t *)&ch.rlist) {
 800136e:	429a      	cmp	r2, r3
      n++;
 8001370:	f100 0001 	add.w	r0, r0, #1
    while (tp != (thread_t *)&ch.rlist) {
 8001374:	d1fa      	bne.n	800136c <chSysIntegrityCheckI+0x6c>
    while (tp != (thread_t *)&ch.rlist) {
 8001376:	4291      	cmp	r1, r2
 8001378:	d009      	beq.n	800138e <chSysIntegrityCheckI+0x8e>
      tp = tp->older;
 800137a:	6949      	ldr	r1, [r1, #20]
    while (tp != (thread_t *)&ch.rlist) {
 800137c:	4299      	cmp	r1, r3
      n--;
 800137e:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
    while (tp != (thread_t *)&ch.rlist) {
 8001382:	d1fa      	bne.n	800137a <chSysIntegrityCheckI+0x7a>
    if (n != (cnt_t)0) {
 8001384:	3000      	adds	r0, #0
 8001386:	bf18      	it	ne
 8001388:	2001      	movne	r0, #1
}
 800138a:	bc10      	pop	{r4}
 800138c:	4770      	bx	lr
      return true;
 800138e:	2001      	movs	r0, #1
}
 8001390:	bc10      	pop	{r4}
 8001392:	4770      	bx	lr
    while (tp != (thread_t *)&ch.rlist.queue) {
 8001394:	429c      	cmp	r4, r3
 8001396:	d0c9      	beq.n	800132c <chSysIntegrityCheckI+0x2c>
    n = (cnt_t)0;
 8001398:	2200      	movs	r2, #0
 800139a:	e7c1      	b.n	8001320 <chSysIntegrityCheckI+0x20>
    while (vtp != (virtual_timer_t *)&ch.vtlist) {
 800139c:	42a1      	cmp	r1, r4
 800139e:	d0db      	beq.n	8001358 <chSysIntegrityCheckI+0x58>
    n = (cnt_t)0;
 80013a0:	2300      	movs	r3, #0
 80013a2:	e7d3      	b.n	800134c <chSysIntegrityCheckI+0x4c>
    while (tp != (thread_t *)&ch.rlist) {
 80013a4:	4291      	cmp	r1, r2
 80013a6:	d1e8      	bne.n	800137a <chSysIntegrityCheckI+0x7a>
 80013a8:	e7ef      	b.n	800138a <chSysIntegrityCheckI+0x8a>
 80013aa:	bf00      	nop
 80013ac:	200008f0 	.word	0x200008f0

080013b0 <rt_test_002_001_execute>:
static void rt_test_002_001_execute(void) {
 80013b0:	b570      	push	{r4, r5, r6, lr}
  test_set_step(1);
 80013b2:	4d24      	ldr	r5, [pc, #144]	; (8001444 <rt_test_002_001_execute+0x94>)
 80013b4:	2001      	movs	r0, #1
 80013b6:	6028      	str	r0, [r5, #0]
 80013b8:	2420      	movs	r4, #32
 80013ba:	f384 8811 	msr	BASEPRI, r4
    result = chSysIntegrityCheckI(CH_INTEGRITY_RLIST);
 80013be:	f7ff ff9f 	bl	8001300 <chSysIntegrityCheckI>
 80013c2:	2300      	movs	r3, #0
 80013c4:	f383 8811 	msr	BASEPRI, r3
    test_assert(result == false, "ready list check failed");
 80013c8:	f080 0001 	eor.w	r0, r0, #1
 80013cc:	b2c0      	uxtb	r0, r0
 80013ce:	491e      	ldr	r1, [pc, #120]	; (8001448 <rt_test_002_001_execute+0x98>)
 80013d0:	f7ff fa16 	bl	8000800 <_test_assert>
 80013d4:	b100      	cbz	r0, 80013d8 <rt_test_002_001_execute+0x28>
}
 80013d6:	bd70      	pop	{r4, r5, r6, pc}
 80013d8:	4606      	mov	r6, r0
  test_set_step(2);
 80013da:	2002      	movs	r0, #2
 80013dc:	6028      	str	r0, [r5, #0]
 80013de:	f384 8811 	msr	BASEPRI, r4
    result = chSysIntegrityCheckI(CH_INTEGRITY_VTLIST);
 80013e2:	f7ff ff8d 	bl	8001300 <chSysIntegrityCheckI>
 80013e6:	f386 8811 	msr	BASEPRI, r6
    test_assert(result == false, "virtual timers list check failed");
 80013ea:	f080 0001 	eor.w	r0, r0, #1
 80013ee:	b2c0      	uxtb	r0, r0
 80013f0:	4916      	ldr	r1, [pc, #88]	; (800144c <rt_test_002_001_execute+0x9c>)
 80013f2:	f7ff fa05 	bl	8000800 <_test_assert>
 80013f6:	4606      	mov	r6, r0
 80013f8:	2800      	cmp	r0, #0
 80013fa:	d1ec      	bne.n	80013d6 <rt_test_002_001_execute+0x26>
  test_set_step(3);
 80013fc:	2303      	movs	r3, #3
 80013fe:	602b      	str	r3, [r5, #0]
 8001400:	f384 8811 	msr	BASEPRI, r4
    result = chSysIntegrityCheckI(CH_INTEGRITY_REGISTRY);
 8001404:	2004      	movs	r0, #4
 8001406:	f7ff ff7b 	bl	8001300 <chSysIntegrityCheckI>
 800140a:	f386 8811 	msr	BASEPRI, r6
    test_assert(result == false, "registry list check failed");
 800140e:	f080 0001 	eor.w	r0, r0, #1
 8001412:	b2c0      	uxtb	r0, r0
 8001414:	490e      	ldr	r1, [pc, #56]	; (8001450 <rt_test_002_001_execute+0xa0>)
 8001416:	f7ff f9f3 	bl	8000800 <_test_assert>
 800141a:	4606      	mov	r6, r0
 800141c:	2800      	cmp	r0, #0
 800141e:	d1da      	bne.n	80013d6 <rt_test_002_001_execute+0x26>
  test_set_step(4);
 8001420:	2304      	movs	r3, #4
 8001422:	602b      	str	r3, [r5, #0]
 8001424:	f384 8811 	msr	BASEPRI, r4
    result = chSysIntegrityCheckI(CH_INTEGRITY_PORT);
 8001428:	2008      	movs	r0, #8
 800142a:	f7ff ff69 	bl	8001300 <chSysIntegrityCheckI>
 800142e:	f386 8811 	msr	BASEPRI, r6
    test_assert(result == false, "port layer check failed");
 8001432:	f080 0001 	eor.w	r0, r0, #1
 8001436:	b2c0      	uxtb	r0, r0
 8001438:	4906      	ldr	r1, [pc, #24]	; (8001454 <rt_test_002_001_execute+0xa4>)
}
 800143a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    test_assert(result == false, "port layer check failed");
 800143e:	f7ff b9df 	b.w	8000800 <_test_assert>
 8001442:	bf00      	nop
 8001444:	20001254 	.word	0x20001254
 8001448:	080085bc 	.word	0x080085bc
 800144c:	080085d4 	.word	0x080085d4
 8001450:	080085f8 	.word	0x080085f8
 8001454:	08008614 	.word	0x08008614
	...

08001460 <_idle_thread>:
static void _idle_thread(void *p) {
 8001460:	e7fe      	b.n	8001460 <_idle_thread>
 8001462:	bf00      	nop
	...

08001470 <_ctl>:
#else
    break;
#endif
  }
  return MSG_OK;
}
 8001470:	2000      	movs	r0, #0
 8001472:	4770      	bx	lr
	...

08001480 <rt_test_010_012_execute>:
 * - [10.12.8] The size of an event listener is printed.
 * - [10.12.9] The size of a mailbox is printed.
 * .
 */

static void rt_test_010_012_execute(void) {
 8001480:	b570      	push	{r4, r5, r6, lr}

  /* [10.12.1] The size of the system area is printed.*/
  test_set_step(1);
 8001482:	4d33      	ldr	r5, [pc, #204]	; (8001550 <rt_test_010_012_execute+0xd0>)
  {
    test_print("--- System: ");
    test_printn(sizeof(ch_system_t));
    test_println(" bytes");
 8001484:	4c33      	ldr	r4, [pc, #204]	; (8001554 <rt_test_010_012_execute+0xd4>)
    test_print("--- System: ");
 8001486:	4834      	ldr	r0, [pc, #208]	; (8001558 <rt_test_010_012_execute+0xd8>)
  test_set_step(1);
 8001488:	2301      	movs	r3, #1
 800148a:	602b      	str	r3, [r5, #0]
    test_print("--- System: ");
 800148c:	f7ff fab8 	bl	8000a00 <test_print>
 8001490:	2078      	movs	r0, #120	; 0x78
 8001492:	f7ff fa15 	bl	80008c0 <test_printn.part.0>
    test_println(" bytes");
 8001496:	4620      	mov	r0, r4
 8001498:	f7ff fa92 	bl	80009c0 <test_println>
  }

  /* [10.12.2] The size of a thread structure is printed.*/
  test_set_step(2);
 800149c:	2302      	movs	r3, #2
  {
    test_print("--- Thread: ");
 800149e:	482f      	ldr	r0, [pc, #188]	; (800155c <rt_test_010_012_execute+0xdc>)
  test_set_step(2);
 80014a0:	602b      	str	r3, [r5, #0]
    test_print("--- Thread: ");
 80014a2:	f7ff faad 	bl	8000a00 <test_print>
 80014a6:	2044      	movs	r0, #68	; 0x44
 80014a8:	f7ff fa0a 	bl	80008c0 <test_printn.part.0>
    test_printn(sizeof(thread_t));
    test_println(" bytes");
 80014ac:	4620      	mov	r0, r4
 80014ae:	f7ff fa87 	bl	80009c0 <test_println>
  }

  /* [10.12.3] The size of a virtual timer structure is printed.*/
  test_set_step(3);
 80014b2:	2303      	movs	r3, #3
  {
    test_print("--- Timer : ");
 80014b4:	482a      	ldr	r0, [pc, #168]	; (8001560 <rt_test_010_012_execute+0xe0>)
  test_set_step(3);
 80014b6:	602b      	str	r3, [r5, #0]
    test_print("--- Timer : ");
 80014b8:	f7ff faa2 	bl	8000a00 <test_print>
 80014bc:	2014      	movs	r0, #20
 80014be:	f7ff f9ff 	bl	80008c0 <test_printn.part.0>
    test_printn(sizeof(virtual_timer_t));
    test_println(" bytes");
 80014c2:	4620      	mov	r0, r4
 80014c4:	f7ff fa7c 	bl	80009c0 <test_println>
  }

  /* [10.12.4] The size of a semaphore structure is printed.*/
  test_set_step(4);
 80014c8:	2604      	movs	r6, #4
  {
#if CH_CFG_USE_SEMAPHORES || defined(__DOXYGEN__)
    test_print("--- Semaph: ");
 80014ca:	4826      	ldr	r0, [pc, #152]	; (8001564 <rt_test_010_012_execute+0xe4>)
  test_set_step(4);
 80014cc:	602e      	str	r6, [r5, #0]
    test_print("--- Semaph: ");
 80014ce:	f7ff fa97 	bl	8000a00 <test_print>
 80014d2:	200c      	movs	r0, #12
 80014d4:	f7ff f9f4 	bl	80008c0 <test_printn.part.0>
    test_printn(sizeof(semaphore_t));
    test_println(" bytes");
 80014d8:	4620      	mov	r0, r4
 80014da:	f7ff fa71 	bl	80009c0 <test_println>
#endif
  }

  /* [10.12.5] The size of a mutex is printed.*/
  test_set_step(5);
 80014de:	2305      	movs	r3, #5
  {
#if CH_CFG_USE_MUTEXES || defined(__DOXYGEN__)
    test_print("--- Mutex : ");
 80014e0:	4821      	ldr	r0, [pc, #132]	; (8001568 <rt_test_010_012_execute+0xe8>)
  test_set_step(5);
 80014e2:	602b      	str	r3, [r5, #0]
    test_print("--- Mutex : ");
 80014e4:	f7ff fa8c 	bl	8000a00 <test_print>
 80014e8:	2010      	movs	r0, #16
 80014ea:	f7ff f9e9 	bl	80008c0 <test_printn.part.0>
    test_printn(sizeof(mutex_t));
    test_println(" bytes");
 80014ee:	4620      	mov	r0, r4
 80014f0:	f7ff fa66 	bl	80009c0 <test_println>
#endif
  }

  /* [10.12.6] The size of a condition variable is printed.*/
  test_set_step(6);
 80014f4:	2306      	movs	r3, #6
  {
#if CH_CFG_USE_CONDVARS || defined(__DOXYGEN__)
    test_print("--- CondV.: ");
 80014f6:	481d      	ldr	r0, [pc, #116]	; (800156c <rt_test_010_012_execute+0xec>)
  test_set_step(6);
 80014f8:	602b      	str	r3, [r5, #0]
    test_print("--- CondV.: ");
 80014fa:	f7ff fa81 	bl	8000a00 <test_print>
 80014fe:	2008      	movs	r0, #8
 8001500:	f7ff f9de 	bl	80008c0 <test_printn.part.0>
    test_printn(sizeof(condition_variable_t));
    test_println(" bytes");
 8001504:	4620      	mov	r0, r4
 8001506:	f7ff fa5b 	bl	80009c0 <test_println>
#endif
  }

  /* [10.12.7] The size of an event source is printed.*/
  test_set_step(7);
 800150a:	2307      	movs	r3, #7
  {
#if CH_CFG_USE_EVENTS || defined(__DOXYGEN__)
    test_print("--- EventS: ");
 800150c:	4818      	ldr	r0, [pc, #96]	; (8001570 <rt_test_010_012_execute+0xf0>)
  test_set_step(7);
 800150e:	602b      	str	r3, [r5, #0]
    test_print("--- EventS: ");
 8001510:	f7ff fa76 	bl	8000a00 <test_print>
 8001514:	4630      	mov	r0, r6
 8001516:	f7ff f9d3 	bl	80008c0 <test_printn.part.0>
    test_printn(sizeof(event_source_t));
    test_println(" bytes");
 800151a:	4620      	mov	r0, r4
 800151c:	f7ff fa50 	bl	80009c0 <test_println>
#endif
  }

  /* [10.12.8] The size of an event listener is printed.*/
  test_set_step(8);
 8001520:	2308      	movs	r3, #8
  {
#if CH_CFG_USE_EVENTS || defined(__DOXYGEN__)
    test_print("--- EventL: ");
 8001522:	4814      	ldr	r0, [pc, #80]	; (8001574 <rt_test_010_012_execute+0xf4>)
  test_set_step(8);
 8001524:	602b      	str	r3, [r5, #0]
    test_print("--- EventL: ");
 8001526:	f7ff fa6b 	bl	8000a00 <test_print>
 800152a:	2014      	movs	r0, #20
 800152c:	f7ff f9c8 	bl	80008c0 <test_printn.part.0>
    test_printn(sizeof(event_listener_t));
    test_println(" bytes");
 8001530:	4620      	mov	r0, r4
 8001532:	f7ff fa45 	bl	80009c0 <test_println>
#endif
  }

  /* [10.12.9] The size of a mailbox is printed.*/
  test_set_step(9);
 8001536:	2309      	movs	r3, #9
  {
#if CH_CFG_USE_MAILBOXES || defined(__DOXYGEN__)
    test_print("--- MailB.: ");
 8001538:	480f      	ldr	r0, [pc, #60]	; (8001578 <rt_test_010_012_execute+0xf8>)
  test_set_step(9);
 800153a:	602b      	str	r3, [r5, #0]
    test_print("--- MailB.: ");
 800153c:	f7ff fa60 	bl	8000a00 <test_print>
 8001540:	2028      	movs	r0, #40	; 0x28
 8001542:	f7ff f9bd 	bl	80008c0 <test_printn.part.0>
    test_printn(sizeof(mailbox_t));
    test_println(" bytes");
 8001546:	4620      	mov	r0, r4
#endif
  }
}
 8001548:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    test_println(" bytes");
 800154c:	f7ff ba38 	b.w	80009c0 <test_println>
 8001550:	20001254 	.word	0x20001254
 8001554:	08008c6c 	.word	0x08008c6c
 8001558:	08008c5c 	.word	0x08008c5c
 800155c:	08008c74 	.word	0x08008c74
 8001560:	08008c84 	.word	0x08008c84
 8001564:	08008c94 	.word	0x08008c94
 8001568:	08008ca4 	.word	0x08008ca4
 800156c:	08008cb4 	.word	0x08008cb4
 8001570:	08008cc4 	.word	0x08008cc4
 8001574:	08008cd4 	.word	0x08008cd4
 8001578:	08008ce4 	.word	0x08008ce4
 800157c:	00000000 	.word	0x00000000

08001580 <rt_test_001_003_execute>:
 * <h2>Test Steps</h2>
 * - [1.3.1] Prints the configuration options settings.
 * .
 */

static void rt_test_001_003_execute(void) {
 8001580:	b538      	push	{r3, r4, r5, lr}

  /* [1.3.1] Prints the configuration options settings.*/
  test_set_step(1);
 8001582:	4bc9      	ldr	r3, [pc, #804]	; (80018a8 <rt_test_001_003_execute+0x328>)
  {
    test_print("--- CH_CFG_ST_RESOLUTION:               ");
    test_printn(CH_CFG_ST_RESOLUTION);
    test_println("");
 8001584:	4cc9      	ldr	r4, [pc, #804]	; (80018ac <rt_test_001_003_execute+0x32c>)
    test_print("--- CH_CFG_ST_RESOLUTION:               ");
 8001586:	48ca      	ldr	r0, [pc, #808]	; (80018b0 <rt_test_001_003_execute+0x330>)
  test_set_step(1);
 8001588:	2501      	movs	r5, #1
 800158a:	601d      	str	r5, [r3, #0]
    test_print("--- CH_CFG_ST_RESOLUTION:               ");
 800158c:	f7ff fa38 	bl	8000a00 <test_print>
 8001590:	2020      	movs	r0, #32
 8001592:	f7ff f995 	bl	80008c0 <test_printn.part.0>
    test_println("");
 8001596:	4620      	mov	r0, r4
 8001598:	f7ff fa12 	bl	80009c0 <test_println>
    test_print("--- CH_CFG_ST_FREQUENCY:                ");
 800159c:	48c5      	ldr	r0, [pc, #788]	; (80018b4 <rt_test_001_003_execute+0x334>)
 800159e:	f7ff fa2f 	bl	8000a00 <test_print>
 80015a2:	f242 7010 	movw	r0, #10000	; 0x2710
 80015a6:	f7ff f98b 	bl	80008c0 <test_printn.part.0>
    test_printn(CH_CFG_ST_FREQUENCY);
    test_println("");
 80015aa:	4620      	mov	r0, r4
 80015ac:	f7ff fa08 	bl	80009c0 <test_println>
    test_print("--- CH_CFG_INTERVALS_SIZE:              ");
 80015b0:	48c1      	ldr	r0, [pc, #772]	; (80018b8 <rt_test_001_003_execute+0x338>)
 80015b2:	f7ff fa25 	bl	8000a00 <test_print>
 80015b6:	2020      	movs	r0, #32
 80015b8:	f7ff f982 	bl	80008c0 <test_printn.part.0>
    test_printn(CH_CFG_INTERVALS_SIZE);
    test_println("");
 80015bc:	4620      	mov	r0, r4
 80015be:	f7ff f9ff 	bl	80009c0 <test_println>
    test_print("--- CH_CFG_TIME_TYPES_SIZE:             ");
 80015c2:	48be      	ldr	r0, [pc, #760]	; (80018bc <rt_test_001_003_execute+0x33c>)
 80015c4:	f7ff fa1c 	bl	8000a00 <test_print>
 80015c8:	2020      	movs	r0, #32
 80015ca:	f7ff f979 	bl	80008c0 <test_printn.part.0>
    test_printn(CH_CFG_TIME_TYPES_SIZE);
    test_println("");
 80015ce:	4620      	mov	r0, r4
 80015d0:	f7ff f9f6 	bl	80009c0 <test_println>
    test_print("--- CH_CFG_ST_TIMEDELTA:                ");
 80015d4:	48ba      	ldr	r0, [pc, #744]	; (80018c0 <rt_test_001_003_execute+0x340>)
 80015d6:	f7ff fa13 	bl	8000a00 <test_print>
 80015da:	2002      	movs	r0, #2
 80015dc:	f7ff f970 	bl	80008c0 <test_printn.part.0>
    test_printn(CH_CFG_ST_TIMEDELTA);
    test_println("");
 80015e0:	4620      	mov	r0, r4
 80015e2:	f7ff f9ed 	bl	80009c0 <test_println>
    test_print("--- CH_CFG_TIME_QUANTUM:                ");
 80015e6:	48b7      	ldr	r0, [pc, #732]	; (80018c4 <rt_test_001_003_execute+0x344>)
 80015e8:	f7ff fa0a 	bl	8000a00 <test_print>
    test_printn(CH_CFG_TIME_QUANTUM);
 80015ec:	2000      	movs	r0, #0
 80015ee:	f7ff f997 	bl	8000920 <test_printn>
    test_println("");
 80015f2:	4620      	mov	r0, r4
 80015f4:	f7ff f9e4 	bl	80009c0 <test_println>
    test_print("--- CH_CFG_MEMCORE_SIZE:                ");
 80015f8:	48b3      	ldr	r0, [pc, #716]	; (80018c8 <rt_test_001_003_execute+0x348>)
 80015fa:	f7ff fa01 	bl	8000a00 <test_print>
    test_printn(CH_CFG_MEMCORE_SIZE);
 80015fe:	2000      	movs	r0, #0
 8001600:	f7ff f98e 	bl	8000920 <test_printn>
    test_println("");
 8001604:	4620      	mov	r0, r4
 8001606:	f7ff f9db 	bl	80009c0 <test_println>
    test_print("--- CH_CFG_NO_IDLE_THREAD:              ");
 800160a:	48b0      	ldr	r0, [pc, #704]	; (80018cc <rt_test_001_003_execute+0x34c>)
 800160c:	f7ff f9f8 	bl	8000a00 <test_print>
    test_printn(CH_CFG_NO_IDLE_THREAD);
 8001610:	2000      	movs	r0, #0
 8001612:	f7ff f985 	bl	8000920 <test_printn>
    test_println("");
 8001616:	4620      	mov	r0, r4
 8001618:	f7ff f9d2 	bl	80009c0 <test_println>
    test_print("--- CH_CFG_OPTIMIZE_SPEED:              ");
 800161c:	48ac      	ldr	r0, [pc, #688]	; (80018d0 <rt_test_001_003_execute+0x350>)
 800161e:	f7ff f9ef 	bl	8000a00 <test_print>
 8001622:	4628      	mov	r0, r5
 8001624:	f7ff f94c 	bl	80008c0 <test_printn.part.0>
    test_printn(CH_CFG_OPTIMIZE_SPEED);
    test_println("");
 8001628:	4620      	mov	r0, r4
 800162a:	f7ff f9c9 	bl	80009c0 <test_println>
    test_print("--- CH_CFG_USE_TM:                      ");
 800162e:	48a9      	ldr	r0, [pc, #676]	; (80018d4 <rt_test_001_003_execute+0x354>)
 8001630:	f7ff f9e6 	bl	8000a00 <test_print>
 8001634:	4628      	mov	r0, r5
 8001636:	f7ff f943 	bl	80008c0 <test_printn.part.0>
    test_printn(CH_CFG_USE_TM);
    test_println("");
 800163a:	4620      	mov	r0, r4
 800163c:	f7ff f9c0 	bl	80009c0 <test_println>
    test_print("--- CH_CFG_USE_REGISTRY:                ");
 8001640:	48a5      	ldr	r0, [pc, #660]	; (80018d8 <rt_test_001_003_execute+0x358>)
 8001642:	f7ff f9dd 	bl	8000a00 <test_print>
 8001646:	4628      	mov	r0, r5
 8001648:	f7ff f93a 	bl	80008c0 <test_printn.part.0>
    test_printn(CH_CFG_USE_REGISTRY);
    test_println("");
 800164c:	4620      	mov	r0, r4
 800164e:	f7ff f9b7 	bl	80009c0 <test_println>
    test_print("--- CH_CFG_USE_WAITEXIT:                ");
 8001652:	48a2      	ldr	r0, [pc, #648]	; (80018dc <rt_test_001_003_execute+0x35c>)
 8001654:	f7ff f9d4 	bl	8000a00 <test_print>
 8001658:	4628      	mov	r0, r5
 800165a:	f7ff f931 	bl	80008c0 <test_printn.part.0>
    test_printn(CH_CFG_USE_WAITEXIT);
    test_println("");
 800165e:	4620      	mov	r0, r4
 8001660:	f7ff f9ae 	bl	80009c0 <test_println>
    test_print("--- CH_CFG_USE_SEMAPHORES:              ");
 8001664:	489e      	ldr	r0, [pc, #632]	; (80018e0 <rt_test_001_003_execute+0x360>)
 8001666:	f7ff f9cb 	bl	8000a00 <test_print>
 800166a:	4628      	mov	r0, r5
 800166c:	f7ff f928 	bl	80008c0 <test_printn.part.0>
    test_printn(CH_CFG_USE_SEMAPHORES);
    test_println("");
 8001670:	4620      	mov	r0, r4
 8001672:	f7ff f9a5 	bl	80009c0 <test_println>
    test_print("--- CH_CFG_USE_SEMAPHORES_PRI:          ");
 8001676:	489b      	ldr	r0, [pc, #620]	; (80018e4 <rt_test_001_003_execute+0x364>)
 8001678:	f7ff f9c2 	bl	8000a00 <test_print>
    test_printn(CH_CFG_USE_SEMAPHORES_PRIORITY);
 800167c:	2000      	movs	r0, #0
 800167e:	f7ff f94f 	bl	8000920 <test_printn>
    test_println("");
 8001682:	4620      	mov	r0, r4
 8001684:	f7ff f99c 	bl	80009c0 <test_println>
    test_print("--- CH_CFG_USE_MUTEXES:                 ");
 8001688:	4897      	ldr	r0, [pc, #604]	; (80018e8 <rt_test_001_003_execute+0x368>)
 800168a:	f7ff f9b9 	bl	8000a00 <test_print>
 800168e:	4628      	mov	r0, r5
 8001690:	f7ff f916 	bl	80008c0 <test_printn.part.0>
    test_printn(CH_CFG_USE_MUTEXES);
    test_println("");
 8001694:	4620      	mov	r0, r4
 8001696:	f7ff f993 	bl	80009c0 <test_println>
    test_print("--- CH_CFG_USE_MUTEXES_RECURS:          ");
 800169a:	4894      	ldr	r0, [pc, #592]	; (80018ec <rt_test_001_003_execute+0x36c>)
 800169c:	f7ff f9b0 	bl	8000a00 <test_print>
    test_printn(CH_CFG_USE_MUTEXES_RECURSIVE);
 80016a0:	2000      	movs	r0, #0
 80016a2:	f7ff f93d 	bl	8000920 <test_printn>
    test_println("");   
 80016a6:	4620      	mov	r0, r4
 80016a8:	f7ff f98a 	bl	80009c0 <test_println>
    test_print("--- CH_CFG_USE_CONDVARS:                ");
 80016ac:	4890      	ldr	r0, [pc, #576]	; (80018f0 <rt_test_001_003_execute+0x370>)
 80016ae:	f7ff f9a7 	bl	8000a00 <test_print>
 80016b2:	4628      	mov	r0, r5
 80016b4:	f7ff f904 	bl	80008c0 <test_printn.part.0>
    test_printn(CH_CFG_USE_CONDVARS);
    test_println("");
 80016b8:	4620      	mov	r0, r4
 80016ba:	f7ff f981 	bl	80009c0 <test_println>
    test_print("--- CH_CFG_USE_CONDVARS_TIMEO:          ");
 80016be:	488d      	ldr	r0, [pc, #564]	; (80018f4 <rt_test_001_003_execute+0x374>)
 80016c0:	f7ff f99e 	bl	8000a00 <test_print>
 80016c4:	4628      	mov	r0, r5
 80016c6:	f7ff f8fb 	bl	80008c0 <test_printn.part.0>
    test_printn(CH_CFG_USE_CONDVARS_TIMEOUT);
    test_println("");
 80016ca:	4620      	mov	r0, r4
 80016cc:	f7ff f978 	bl	80009c0 <test_println>
    test_print("--- CH_CFG_USE_EVENTS:                  ");
 80016d0:	4889      	ldr	r0, [pc, #548]	; (80018f8 <rt_test_001_003_execute+0x378>)
 80016d2:	f7ff f995 	bl	8000a00 <test_print>
 80016d6:	4628      	mov	r0, r5
 80016d8:	f7ff f8f2 	bl	80008c0 <test_printn.part.0>
    test_printn(CH_CFG_USE_EVENTS);
    test_println("");
 80016dc:	4620      	mov	r0, r4
 80016de:	f7ff f96f 	bl	80009c0 <test_println>
    test_print("--- CH_CFG_USE_EVENTS_TIMEOUT:          ");
 80016e2:	4886      	ldr	r0, [pc, #536]	; (80018fc <rt_test_001_003_execute+0x37c>)
 80016e4:	f7ff f98c 	bl	8000a00 <test_print>
 80016e8:	4628      	mov	r0, r5
 80016ea:	f7ff f8e9 	bl	80008c0 <test_printn.part.0>
    test_printn(CH_CFG_USE_EVENTS_TIMEOUT);
    test_println("");
 80016ee:	4620      	mov	r0, r4
 80016f0:	f7ff f966 	bl	80009c0 <test_println>
    test_print("--- CH_CFG_USE_MESSAGES:                ");
 80016f4:	4882      	ldr	r0, [pc, #520]	; (8001900 <rt_test_001_003_execute+0x380>)
 80016f6:	f7ff f983 	bl	8000a00 <test_print>
 80016fa:	4628      	mov	r0, r5
 80016fc:	f7ff f8e0 	bl	80008c0 <test_printn.part.0>
    test_printn(CH_CFG_USE_MESSAGES);
    test_println("");
 8001700:	4620      	mov	r0, r4
 8001702:	f7ff f95d 	bl	80009c0 <test_println>
    test_print("--- CH_CFG_USE_MESSAGES_PRI:            ");
 8001706:	487f      	ldr	r0, [pc, #508]	; (8001904 <rt_test_001_003_execute+0x384>)
 8001708:	f7ff f97a 	bl	8000a00 <test_print>
    test_printn(CH_CFG_USE_MESSAGES_PRIORITY);
 800170c:	2000      	movs	r0, #0
 800170e:	f7ff f907 	bl	8000920 <test_printn>
    test_println("");
 8001712:	4620      	mov	r0, r4
 8001714:	f7ff f954 	bl	80009c0 <test_println>
    test_print("--- CH_CFG_USE_MAILBOXES:               ");
 8001718:	487b      	ldr	r0, [pc, #492]	; (8001908 <rt_test_001_003_execute+0x388>)
 800171a:	f7ff f971 	bl	8000a00 <test_print>
 800171e:	4628      	mov	r0, r5
 8001720:	f7ff f8ce 	bl	80008c0 <test_printn.part.0>
    test_printn(CH_CFG_USE_MAILBOXES);
    test_println("");
 8001724:	4620      	mov	r0, r4
 8001726:	f7ff f94b 	bl	80009c0 <test_println>
    test_print("--- CH_CFG_USE_MEMCORE:                 ");
 800172a:	4878      	ldr	r0, [pc, #480]	; (800190c <rt_test_001_003_execute+0x38c>)
 800172c:	f7ff f968 	bl	8000a00 <test_print>
 8001730:	4628      	mov	r0, r5
 8001732:	f7ff f8c5 	bl	80008c0 <test_printn.part.0>
    test_printn(CH_CFG_USE_MEMCORE);
    test_println("");
 8001736:	4620      	mov	r0, r4
 8001738:	f7ff f942 	bl	80009c0 <test_println>
    test_print("--- CH_CFG_USE_HEAP:                    ");
 800173c:	4874      	ldr	r0, [pc, #464]	; (8001910 <rt_test_001_003_execute+0x390>)
 800173e:	f7ff f95f 	bl	8000a00 <test_print>
 8001742:	4628      	mov	r0, r5
 8001744:	f7ff f8bc 	bl	80008c0 <test_printn.part.0>
    test_printn(CH_CFG_USE_HEAP);
    test_println("");
 8001748:	4620      	mov	r0, r4
 800174a:	f7ff f939 	bl	80009c0 <test_println>
    test_print("--- CH_CFG_USE_MEMPOOLS:                ");
 800174e:	4871      	ldr	r0, [pc, #452]	; (8001914 <rt_test_001_003_execute+0x394>)
 8001750:	f7ff f956 	bl	8000a00 <test_print>
 8001754:	4628      	mov	r0, r5
 8001756:	f7ff f8b3 	bl	80008c0 <test_printn.part.0>
    test_printn(CH_CFG_USE_MEMPOOLS);
    test_println("");
 800175a:	4620      	mov	r0, r4
 800175c:	f7ff f930 	bl	80009c0 <test_println>
    test_print("--- CH_CFG_USE_OBJ_FIFOS:               ");
 8001760:	486d      	ldr	r0, [pc, #436]	; (8001918 <rt_test_001_003_execute+0x398>)
 8001762:	f7ff f94d 	bl	8000a00 <test_print>
 8001766:	4628      	mov	r0, r5
 8001768:	f7ff f8aa 	bl	80008c0 <test_printn.part.0>
    test_printn(CH_CFG_USE_OBJ_FIFOS);
    test_println("");
 800176c:	4620      	mov	r0, r4
 800176e:	f7ff f927 	bl	80009c0 <test_println>
    test_print("--- CH_CFG_USE_DYNAMIC:                 ");
 8001772:	486a      	ldr	r0, [pc, #424]	; (800191c <rt_test_001_003_execute+0x39c>)
 8001774:	f7ff f944 	bl	8000a00 <test_print>
 8001778:	4628      	mov	r0, r5
 800177a:	f7ff f8a1 	bl	80008c0 <test_printn.part.0>
    test_printn(CH_CFG_USE_DYNAMIC);
    test_println("");
 800177e:	4620      	mov	r0, r4
 8001780:	f7ff f91e 	bl	80009c0 <test_println>
    test_print("--- CH_CFG_USE_FACTORY:                 ");
 8001784:	4866      	ldr	r0, [pc, #408]	; (8001920 <rt_test_001_003_execute+0x3a0>)
 8001786:	f7ff f93b 	bl	8000a00 <test_print>
 800178a:	4628      	mov	r0, r5
 800178c:	f7ff f898 	bl	80008c0 <test_printn.part.0>
    test_printn(CH_CFG_USE_FACTORY);
    test_println("");
 8001790:	4620      	mov	r0, r4
 8001792:	f7ff f915 	bl	80009c0 <test_println>
    test_print("--- CH_CFG_FACTORY_MAX_NAMES_LENGTH:    ");
 8001796:	4863      	ldr	r0, [pc, #396]	; (8001924 <rt_test_001_003_execute+0x3a4>)
 8001798:	f7ff f932 	bl	8000a00 <test_print>
 800179c:	2008      	movs	r0, #8
 800179e:	f7ff f88f 	bl	80008c0 <test_printn.part.0>
    test_printn(CH_CFG_FACTORY_MAX_NAMES_LENGTH);
    test_println("");
 80017a2:	4620      	mov	r0, r4
 80017a4:	f7ff f90c 	bl	80009c0 <test_println>
    test_print("--- CH_CFG_FACTORY_OBJECTS_REGISTRY:    ");
 80017a8:	485f      	ldr	r0, [pc, #380]	; (8001928 <rt_test_001_003_execute+0x3a8>)
 80017aa:	f7ff f929 	bl	8000a00 <test_print>
 80017ae:	4628      	mov	r0, r5
 80017b0:	f7ff f886 	bl	80008c0 <test_printn.part.0>
    test_printn(CH_CFG_FACTORY_OBJECTS_REGISTRY);
    test_println("");
 80017b4:	4620      	mov	r0, r4
 80017b6:	f7ff f903 	bl	80009c0 <test_println>
    test_print("--- CH_CFG_FACTORY_GENERIC_BUFFERS:     ");
 80017ba:	485c      	ldr	r0, [pc, #368]	; (800192c <rt_test_001_003_execute+0x3ac>)
 80017bc:	f7ff f920 	bl	8000a00 <test_print>
 80017c0:	4628      	mov	r0, r5
 80017c2:	f7ff f87d 	bl	80008c0 <test_printn.part.0>
    test_printn(CH_CFG_FACTORY_GENERIC_BUFFERS);
    test_println("");
 80017c6:	4620      	mov	r0, r4
 80017c8:	f7ff f8fa 	bl	80009c0 <test_println>
    test_print("--- CH_CFG_FACTORY_SEMAPHORES:          ");
 80017cc:	4858      	ldr	r0, [pc, #352]	; (8001930 <rt_test_001_003_execute+0x3b0>)
 80017ce:	f7ff f917 	bl	8000a00 <test_print>
 80017d2:	4628      	mov	r0, r5
 80017d4:	f7ff f874 	bl	80008c0 <test_printn.part.0>
    test_printn(CH_CFG_FACTORY_SEMAPHORES);
    test_println("");
 80017d8:	4620      	mov	r0, r4
 80017da:	f7ff f8f1 	bl	80009c0 <test_println>
    test_print("--- CH_CFG_FACTORY_MAILBOXES:           ");
 80017de:	4855      	ldr	r0, [pc, #340]	; (8001934 <rt_test_001_003_execute+0x3b4>)
 80017e0:	f7ff f90e 	bl	8000a00 <test_print>
 80017e4:	4628      	mov	r0, r5
 80017e6:	f7ff f86b 	bl	80008c0 <test_printn.part.0>
    test_printn(CH_CFG_FACTORY_MAILBOXES);
    test_println("");
 80017ea:	4620      	mov	r0, r4
 80017ec:	f7ff f8e8 	bl	80009c0 <test_println>
    test_print("--- CH_CFG_FACTORY_OBJ_FIFOS:           ");
 80017f0:	4851      	ldr	r0, [pc, #324]	; (8001938 <rt_test_001_003_execute+0x3b8>)
 80017f2:	f7ff f905 	bl	8000a00 <test_print>
 80017f6:	4628      	mov	r0, r5
 80017f8:	f7ff f862 	bl	80008c0 <test_printn.part.0>
    test_printn(CH_CFG_FACTORY_OBJ_FIFOS);
    test_println("");
 80017fc:	4620      	mov	r0, r4
 80017fe:	f7ff f8df 	bl	80009c0 <test_println>
    test_print("--- CH_DBG_STATISTICS:                  ");
 8001802:	484e      	ldr	r0, [pc, #312]	; (800193c <rt_test_001_003_execute+0x3bc>)
 8001804:	f7ff f8fc 	bl	8000a00 <test_print>
    test_printn(CH_DBG_STATISTICS);
 8001808:	2000      	movs	r0, #0
 800180a:	f7ff f889 	bl	8000920 <test_printn>
    test_println("");
 800180e:	4620      	mov	r0, r4
 8001810:	f7ff f8d6 	bl	80009c0 <test_println>
    test_print("--- CH_DBG_SYSTEM_STATE_CHECK:          ");
 8001814:	484a      	ldr	r0, [pc, #296]	; (8001940 <rt_test_001_003_execute+0x3c0>)
 8001816:	f7ff f8f3 	bl	8000a00 <test_print>
    test_printn(CH_DBG_SYSTEM_STATE_CHECK);
 800181a:	2000      	movs	r0, #0
 800181c:	f7ff f880 	bl	8000920 <test_printn>
    test_println("");
 8001820:	4620      	mov	r0, r4
 8001822:	f7ff f8cd 	bl	80009c0 <test_println>
    test_print("--- CH_DBG_ENABLE_CHECKS:               ");
 8001826:	4847      	ldr	r0, [pc, #284]	; (8001944 <rt_test_001_003_execute+0x3c4>)
 8001828:	f7ff f8ea 	bl	8000a00 <test_print>
    test_printn(CH_DBG_ENABLE_CHECKS);
 800182c:	2000      	movs	r0, #0
 800182e:	f7ff f877 	bl	8000920 <test_printn>
    test_println("");
 8001832:	4620      	mov	r0, r4
 8001834:	f7ff f8c4 	bl	80009c0 <test_println>
    test_print("--- CH_DBG_ENABLE_ASSERTS:              ");
 8001838:	4843      	ldr	r0, [pc, #268]	; (8001948 <rt_test_001_003_execute+0x3c8>)
 800183a:	f7ff f8e1 	bl	8000a00 <test_print>
    test_printn(CH_DBG_ENABLE_ASSERTS);
 800183e:	2000      	movs	r0, #0
 8001840:	f7ff f86e 	bl	8000920 <test_printn>
    test_println("");
 8001844:	4620      	mov	r0, r4
 8001846:	f7ff f8bb 	bl	80009c0 <test_println>
    test_print("--- CH_DBG_TRACE_MASK:                  ");
 800184a:	4840      	ldr	r0, [pc, #256]	; (800194c <rt_test_001_003_execute+0x3cc>)
 800184c:	f7ff f8d8 	bl	8000a00 <test_print>
 8001850:	20ff      	movs	r0, #255	; 0xff
 8001852:	f7ff f835 	bl	80008c0 <test_printn.part.0>
    test_printn(CH_DBG_TRACE_MASK);
    test_println("");
 8001856:	4620      	mov	r0, r4
 8001858:	f7ff f8b2 	bl	80009c0 <test_println>
    test_print("--- CH_DBG_TRACE_BUFFER_SIZE:           ");
 800185c:	483c      	ldr	r0, [pc, #240]	; (8001950 <rt_test_001_003_execute+0x3d0>)
 800185e:	f7ff f8cf 	bl	8000a00 <test_print>
 8001862:	2080      	movs	r0, #128	; 0x80
 8001864:	f7ff f82c 	bl	80008c0 <test_printn.part.0>
    test_printn(CH_DBG_TRACE_BUFFER_SIZE);
    test_println("");
 8001868:	4620      	mov	r0, r4
 800186a:	f7ff f8a9 	bl	80009c0 <test_println>
    test_print("--- CH_DBG_ENABLE_STACK_CHECK:          ");
 800186e:	4839      	ldr	r0, [pc, #228]	; (8001954 <rt_test_001_003_execute+0x3d4>)
 8001870:	f7ff f8c6 	bl	8000a00 <test_print>
    test_printn(CH_DBG_ENABLE_STACK_CHECK);
 8001874:	2000      	movs	r0, #0
 8001876:	f7ff f853 	bl	8000920 <test_printn>
    test_println("");
 800187a:	4620      	mov	r0, r4
 800187c:	f7ff f8a0 	bl	80009c0 <test_println>
    test_print("--- CH_DBG_FILL_THREADS:                ");
 8001880:	4835      	ldr	r0, [pc, #212]	; (8001958 <rt_test_001_003_execute+0x3d8>)
 8001882:	f7ff f8bd 	bl	8000a00 <test_print>
    test_printn(CH_DBG_FILL_THREADS);
 8001886:	2000      	movs	r0, #0
 8001888:	f7ff f84a 	bl	8000920 <test_printn>
    test_println("");
 800188c:	4620      	mov	r0, r4
 800188e:	f7ff f897 	bl	80009c0 <test_println>
    test_print("--- CH_DBG_THREADS_PROFILING:           ");
 8001892:	4832      	ldr	r0, [pc, #200]	; (800195c <rt_test_001_003_execute+0x3dc>)
 8001894:	f7ff f8b4 	bl	8000a00 <test_print>
    test_printn(CH_DBG_THREADS_PROFILING);
 8001898:	2000      	movs	r0, #0
 800189a:	f7ff f841 	bl	8000920 <test_printn>
    test_println("");
 800189e:	4620      	mov	r0, r4
  }
}
 80018a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    test_println("");
 80018a4:	f7ff b88c 	b.w	80009c0 <test_println>
 80018a8:	20001254 	.word	0x20001254
 80018ac:	08007bd0 	.word	0x08007bd0
 80018b0:	08007e1c 	.word	0x08007e1c
 80018b4:	08007e48 	.word	0x08007e48
 80018b8:	08007e74 	.word	0x08007e74
 80018bc:	08007ea0 	.word	0x08007ea0
 80018c0:	08007ecc 	.word	0x08007ecc
 80018c4:	08007ef8 	.word	0x08007ef8
 80018c8:	08007f24 	.word	0x08007f24
 80018cc:	08007f50 	.word	0x08007f50
 80018d0:	08007f7c 	.word	0x08007f7c
 80018d4:	08007fa8 	.word	0x08007fa8
 80018d8:	08007fd4 	.word	0x08007fd4
 80018dc:	08008000 	.word	0x08008000
 80018e0:	0800802c 	.word	0x0800802c
 80018e4:	08008058 	.word	0x08008058
 80018e8:	08008084 	.word	0x08008084
 80018ec:	080080b0 	.word	0x080080b0
 80018f0:	080080dc 	.word	0x080080dc
 80018f4:	08008108 	.word	0x08008108
 80018f8:	08008134 	.word	0x08008134
 80018fc:	08008160 	.word	0x08008160
 8001900:	0800818c 	.word	0x0800818c
 8001904:	080081b8 	.word	0x080081b8
 8001908:	080081e4 	.word	0x080081e4
 800190c:	08008210 	.word	0x08008210
 8001910:	0800823c 	.word	0x0800823c
 8001914:	08008268 	.word	0x08008268
 8001918:	08008294 	.word	0x08008294
 800191c:	080082c0 	.word	0x080082c0
 8001920:	080082ec 	.word	0x080082ec
 8001924:	08008318 	.word	0x08008318
 8001928:	08008344 	.word	0x08008344
 800192c:	08008370 	.word	0x08008370
 8001930:	0800839c 	.word	0x0800839c
 8001934:	080083c8 	.word	0x080083c8
 8001938:	080083f4 	.word	0x080083f4
 800193c:	08008420 	.word	0x08008420
 8001940:	0800844c 	.word	0x0800844c
 8001944:	08008478 	.word	0x08008478
 8001948:	080084a4 	.word	0x080084a4
 800194c:	080084d0 	.word	0x080084d0
 8001950:	080084fc 	.word	0x080084fc
 8001954:	08008528 	.word	0x08008528
 8001958:	08008554 	.word	0x08008554
 800195c:	08008580 	.word	0x08008580

08001960 <rt_test_001_002_execute>:
static void rt_test_001_002_execute(void) {
 8001960:	b538      	push	{r3, r4, r5, lr}
  test_set_step(1);
 8001962:	4b19      	ldr	r3, [pc, #100]	; (80019c8 <rt_test_001_002_execute+0x68>)
    test_println("--- Product:                            ChibiOS/RT");
 8001964:	4819      	ldr	r0, [pc, #100]	; (80019cc <rt_test_001_002_execute+0x6c>)
    test_println("");
 8001966:	4c1a      	ldr	r4, [pc, #104]	; (80019d0 <rt_test_001_002_execute+0x70>)
  test_set_step(1);
 8001968:	2501      	movs	r5, #1
 800196a:	601d      	str	r5, [r3, #0]
    test_println("--- Product:                            ChibiOS/RT");
 800196c:	f7ff f828 	bl	80009c0 <test_println>
    test_print("--- Stable Flag:                        ");
 8001970:	4818      	ldr	r0, [pc, #96]	; (80019d4 <rt_test_001_002_execute+0x74>)
 8001972:	f7ff f845 	bl	8000a00 <test_print>
 8001976:	4628      	mov	r0, r5
 8001978:	f7fe ffa2 	bl	80008c0 <test_printn.part.0>
    test_println("");
 800197c:	4620      	mov	r0, r4
 800197e:	f7ff f81f 	bl	80009c0 <test_println>
    test_print("--- Version String:                     ");
 8001982:	4815      	ldr	r0, [pc, #84]	; (80019d8 <rt_test_001_002_execute+0x78>)
 8001984:	f7ff f83c 	bl	8000a00 <test_print>
    test_println(CH_KERNEL_VERSION);
 8001988:	4814      	ldr	r0, [pc, #80]	; (80019dc <rt_test_001_002_execute+0x7c>)
 800198a:	f7ff f819 	bl	80009c0 <test_println>
    test_print("--- Major Number:                       ");
 800198e:	4814      	ldr	r0, [pc, #80]	; (80019e0 <rt_test_001_002_execute+0x80>)
 8001990:	f7ff f836 	bl	8000a00 <test_print>
 8001994:	2005      	movs	r0, #5
 8001996:	f7fe ff93 	bl	80008c0 <test_printn.part.0>
    test_println("");
 800199a:	4620      	mov	r0, r4
 800199c:	f7ff f810 	bl	80009c0 <test_println>
    test_print("--- Minor Number:                       ");
 80019a0:	4810      	ldr	r0, [pc, #64]	; (80019e4 <rt_test_001_002_execute+0x84>)
 80019a2:	f7ff f82d 	bl	8000a00 <test_print>
 80019a6:	4628      	mov	r0, r5
 80019a8:	f7fe ff8a 	bl	80008c0 <test_printn.part.0>
    test_println("");
 80019ac:	4620      	mov	r0, r4
 80019ae:	f7ff f807 	bl	80009c0 <test_println>
    test_print("--- Patch Number:                       ");
 80019b2:	480d      	ldr	r0, [pc, #52]	; (80019e8 <rt_test_001_002_execute+0x88>)
 80019b4:	f7ff f824 	bl	8000a00 <test_print>
    test_printn(CH_KERNEL_PATCH);
 80019b8:	2000      	movs	r0, #0
 80019ba:	f7fe ffb1 	bl	8000920 <test_printn>
    test_println("");
 80019be:	4620      	mov	r0, r4
}
 80019c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    test_println("");
 80019c4:	f7fe bffc 	b.w	80009c0 <test_println>
 80019c8:	20001254 	.word	0x20001254
 80019cc:	08007cf4 	.word	0x08007cf4
 80019d0:	08007bd0 	.word	0x08007bd0
 80019d4:	08007d28 	.word	0x08007d28
 80019d8:	08007d54 	.word	0x08007d54
 80019dc:	08007d80 	.word	0x08007d80
 80019e0:	08007d88 	.word	0x08007d88
 80019e4:	08007db4 	.word	0x08007db4
 80019e8:	08007de0 	.word	0x08007de0
 80019ec:	00000000 	.word	0x00000000

080019f0 <rt_test_001_001_execute>:
  test_set_step(1);
 80019f0:	4b1c      	ldr	r3, [pc, #112]	; (8001a64 <rt_test_001_001_execute+0x74>)
    test_print("--- Architecture:                       ");
 80019f2:	481d      	ldr	r0, [pc, #116]	; (8001a68 <rt_test_001_001_execute+0x78>)
static void rt_test_001_001_execute(void) {
 80019f4:	b510      	push	{r4, lr}
  test_set_step(1);
 80019f6:	2201      	movs	r2, #1
 80019f8:	601a      	str	r2, [r3, #0]
    test_print("--- Architecture:                       ");
 80019fa:	f7ff f801 	bl	8000a00 <test_print>
    test_println(PORT_ARCHITECTURE_NAME);
 80019fe:	481b      	ldr	r0, [pc, #108]	; (8001a6c <rt_test_001_001_execute+0x7c>)
    test_println("");
 8001a00:	4c1b      	ldr	r4, [pc, #108]	; (8001a70 <rt_test_001_001_execute+0x80>)
    test_println(PORT_ARCHITECTURE_NAME);
 8001a02:	f7fe ffdd 	bl	80009c0 <test_println>
    test_print("--- Core Variant:                       ");
 8001a06:	481b      	ldr	r0, [pc, #108]	; (8001a74 <rt_test_001_001_execute+0x84>)
 8001a08:	f7fe fffa 	bl	8000a00 <test_print>
    test_println(PORT_CORE_VARIANT_NAME);
 8001a0c:	481a      	ldr	r0, [pc, #104]	; (8001a78 <rt_test_001_001_execute+0x88>)
 8001a0e:	f7fe ffd7 	bl	80009c0 <test_println>
    test_print("--- Compiler:                           ");
 8001a12:	481a      	ldr	r0, [pc, #104]	; (8001a7c <rt_test_001_001_execute+0x8c>)
 8001a14:	f7fe fff4 	bl	8000a00 <test_print>
    test_println(PORT_COMPILER_NAME);
 8001a18:	4819      	ldr	r0, [pc, #100]	; (8001a80 <rt_test_001_001_execute+0x90>)
 8001a1a:	f7fe ffd1 	bl	80009c0 <test_println>
    test_print("--- Port Info:                          ");
 8001a1e:	4819      	ldr	r0, [pc, #100]	; (8001a84 <rt_test_001_001_execute+0x94>)
 8001a20:	f7fe ffee 	bl	8000a00 <test_print>
    test_println(PORT_INFO);
 8001a24:	4818      	ldr	r0, [pc, #96]	; (8001a88 <rt_test_001_001_execute+0x98>)
 8001a26:	f7fe ffcb 	bl	80009c0 <test_println>
    test_print("--- Natural alignment:                  ");
 8001a2a:	4818      	ldr	r0, [pc, #96]	; (8001a8c <rt_test_001_001_execute+0x9c>)
 8001a2c:	f7fe ffe8 	bl	8000a00 <test_print>
 8001a30:	2004      	movs	r0, #4
 8001a32:	f7fe ff45 	bl	80008c0 <test_printn.part.0>
    test_println("");
 8001a36:	4620      	mov	r0, r4
 8001a38:	f7fe ffc2 	bl	80009c0 <test_println>
    test_print("--- Stack alignment:                    ");
 8001a3c:	4814      	ldr	r0, [pc, #80]	; (8001a90 <rt_test_001_001_execute+0xa0>)
 8001a3e:	f7fe ffdf 	bl	8000a00 <test_print>
 8001a42:	2008      	movs	r0, #8
 8001a44:	f7fe ff3c 	bl	80008c0 <test_printn.part.0>
    test_println("");
 8001a48:	4620      	mov	r0, r4
 8001a4a:	f7fe ffb9 	bl	80009c0 <test_println>
    test_print("--- Working area alignment:             ");
 8001a4e:	4811      	ldr	r0, [pc, #68]	; (8001a94 <rt_test_001_001_execute+0xa4>)
 8001a50:	f7fe ffd6 	bl	8000a00 <test_print>
 8001a54:	2008      	movs	r0, #8
 8001a56:	f7fe ff33 	bl	80008c0 <test_printn.part.0>
    test_println("");
 8001a5a:	4620      	mov	r0, r4
}
 8001a5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    test_println("");
 8001a60:	f7fe bfae 	b.w	80009c0 <test_println>
 8001a64:	20001254 	.word	0x20001254
 8001a68:	08007b38 	.word	0x08007b38
 8001a6c:	08007b64 	.word	0x08007b64
 8001a70:	08007bd0 	.word	0x08007bd0
 8001a74:	08007b70 	.word	0x08007b70
 8001a78:	08007b9c 	.word	0x08007b9c
 8001a7c:	08007ba8 	.word	0x08007ba8
 8001a80:	08007bd4 	.word	0x08007bd4
 8001a84:	08007c1c 	.word	0x08007c1c
 8001a88:	08007c48 	.word	0x08007c48
 8001a8c:	08007c60 	.word	0x08007c60
 8001a90:	08007c8c 	.word	0x08007c8c
 8001a94:	08007cb8 	.word	0x08007cb8
	...

08001aa0 <dyn_find_object>:
    chPoolFree(mp, (void *)dep);
  }
}
#endif /* CH_FACTORY_REQUIRES_POOLS */

static dyn_element_t *dyn_find_object(const char *name, dyn_list_t *dlp) {
 8001aa0:	b570      	push	{r4, r5, r6, lr}
  dyn_element_t *p = dlp->next;
 8001aa2:	680c      	ldr	r4, [r1, #0]
  while (p != (dyn_element_t *)dlp) {
 8001aa4:	42a1      	cmp	r1, r4
 8001aa6:	d012      	beq.n	8001ace <dyn_find_object+0x2e>
 8001aa8:	460d      	mov	r5, r1
 8001aaa:	4606      	mov	r6, r0
 8001aac:	e002      	b.n	8001ab4 <dyn_find_object+0x14>
    p = p->next;
 8001aae:	6824      	ldr	r4, [r4, #0]
  while (p != (dyn_element_t *)dlp) {
 8001ab0:	42a5      	cmp	r5, r4
 8001ab2:	d00c      	beq.n	8001ace <dyn_find_object+0x2e>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 8001ab4:	2208      	movs	r2, #8
 8001ab6:	4631      	mov	r1, r6
 8001ab8:	18a0      	adds	r0, r4, r2
 8001aba:	f005 fd75 	bl	80075a8 <strncmp>
 8001abe:	2800      	cmp	r0, #0
 8001ac0:	d1f5      	bne.n	8001aae <dyn_find_object+0xe>

  chDbgCheck(name != NULL);

  /* Checking if an object with this name has already been created.*/
  dep = dyn_list_find(name, dlp);
  if (dep != NULL) {
 8001ac2:	b12c      	cbz	r4, 8001ad0 <dyn_find_object+0x30>
    /* Increasing references counter.*/
    dep->refs++;
 8001ac4:	6863      	ldr	r3, [r4, #4]
 8001ac6:	3301      	adds	r3, #1
 8001ac8:	6063      	str	r3, [r4, #4]
  }

  return dep;
}
 8001aca:	4620      	mov	r0, r4
 8001acc:	bd70      	pop	{r4, r5, r6, pc}
  return NULL;
 8001ace:	2400      	movs	r4, #0
}
 8001ad0:	4620      	mov	r0, r4
 8001ad2:	bd70      	pop	{r4, r5, r6, pc}
	...

08001ae0 <dyn_create_object_pool>:
                                             memory_pool_t *mp) {
 8001ae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  dyn_element_t *p = dlp->next;
 8001ae2:	680c      	ldr	r4, [r1, #0]
  while (p != (dyn_element_t *)dlp) {
 8001ae4:	42a1      	cmp	r1, r4
                                             memory_pool_t *mp) {
 8001ae6:	460d      	mov	r5, r1
 8001ae8:	4606      	mov	r6, r0
 8001aea:	4617      	mov	r7, r2
  while (p != (dyn_element_t *)dlp) {
 8001aec:	d103      	bne.n	8001af6 <dyn_create_object_pool+0x16>
 8001aee:	e00d      	b.n	8001b0c <dyn_create_object_pool+0x2c>
    p = p->next;
 8001af0:	6824      	ldr	r4, [r4, #0]
  while (p != (dyn_element_t *)dlp) {
 8001af2:	42a5      	cmp	r5, r4
 8001af4:	d00a      	beq.n	8001b0c <dyn_create_object_pool+0x2c>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 8001af6:	2208      	movs	r2, #8
 8001af8:	4631      	mov	r1, r6
 8001afa:	18a0      	adds	r0, r4, r2
 8001afc:	f005 fd54 	bl	80075a8 <strncmp>
 8001b00:	2800      	cmp	r0, #0
 8001b02:	d1f5      	bne.n	8001af0 <dyn_create_object_pool+0x10>
  if (dep != NULL) {
 8001b04:	b114      	cbz	r4, 8001b0c <dyn_create_object_pool+0x2c>
    return NULL;
 8001b06:	4604      	mov	r4, r0
}
 8001b08:	4620      	mov	r0, r4
 8001b0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  dep = (dyn_element_t *)chPoolAlloc(mp);
 8001b0c:	4638      	mov	r0, r7
 8001b0e:	f7ff f847 	bl	8000ba0 <chPoolAlloc>
  if (dep == NULL) {
 8001b12:	4604      	mov	r4, r0
 8001b14:	b148      	cbz	r0, 8001b2a <dyn_create_object_pool+0x4a>
  strncpy(dep->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH);
 8001b16:	2208      	movs	r2, #8
 8001b18:	4410      	add	r0, r2
 8001b1a:	4631      	mov	r1, r6
 8001b1c:	f005 fd90 	bl	8007640 <strncpy>
  dep->next = dlp->next;
 8001b20:	682b      	ldr	r3, [r5, #0]
  dep->refs = (ucnt_t)1;
 8001b22:	2201      	movs	r2, #1
  dep->next = dlp->next;
 8001b24:	e9c4 3200 	strd	r3, r2, [r4]
  dlp->next = (dyn_element_t *)dep;
 8001b28:	602c      	str	r4, [r5, #0]
}
 8001b2a:	4620      	mov	r0, r4
 8001b2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001b2e:	bf00      	nop

08001b30 <chThdYield>:
void chThdYield(void) {
 8001b30:	b538      	push	{r3, r4, r5, lr}
 8001b32:	2320      	movs	r3, #32
 8001b34:	f383 8811 	msr	BASEPRI, r3
 */
static inline bool chSchCanYieldS(void) {

  chDbgCheckClassS();

  return firstprio(&ch.rlist.queue) >= currp->prio;
 8001b38:	4a12      	ldr	r2, [pc, #72]	; (8001b84 <chThdYield+0x54>)
 8001b3a:	6810      	ldr	r0, [r2, #0]
 8001b3c:	6994      	ldr	r4, [r2, #24]
 */
static inline void chSchDoYieldS(void) {

  chDbgCheckClassS();

  if (chSchCanYieldS()) {
 8001b3e:	6883      	ldr	r3, [r0, #8]
  return firstprio(&ch.rlist.queue) >= currp->prio;
 8001b40:	68a1      	ldr	r1, [r4, #8]
  if (chSchCanYieldS()) {
 8001b42:	428b      	cmp	r3, r1
 8001b44:	d203      	bcs.n	8001b4e <chThdYield+0x1e>
 8001b46:	2300      	movs	r3, #0
 8001b48:	f383 8811 	msr	BASEPRI, r3
}
 8001b4c:	bd38      	pop	{r3, r4, r5, pc}
  tqp->next             = tp->queue.next;
 8001b4e:	6803      	ldr	r3, [r0, #0]
 8001b50:	6013      	str	r3, [r2, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 8001b52:	605a      	str	r2, [r3, #4]
void chSchDoRescheduleBehind(void) {
  thread_t *otp = currp;

  /* Picks the first thread from the ready queue and makes it current.*/
  currp = queue_fifo_remove(&ch.rlist.queue);
  currp->state = CH_STATE_CURRENT;
 8001b54:	2501      	movs	r5, #1
  currp = queue_fifo_remove(&ch.rlist.queue);
 8001b56:	6190      	str	r0, [r2, #24]
  tp->state = CH_STATE_READY;
 8001b58:	2200      	movs	r2, #0
  currp->state = CH_STATE_CURRENT;
 8001b5a:	f880 5020 	strb.w	r5, [r0, #32]
  tp->state = CH_STATE_READY;
 8001b5e:	f884 2020 	strb.w	r2, [r4, #32]
 8001b62:	e000      	b.n	8001b66 <chThdYield+0x36>
 8001b64:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
 8001b66:	689a      	ldr	r2, [r3, #8]
 8001b68:	4291      	cmp	r1, r2
 8001b6a:	d9fb      	bls.n	8001b64 <chThdYield+0x34>
  tp->queue.prev             = cp->queue.prev;
 8001b6c:	685a      	ldr	r2, [r3, #4]

  /* Placing in ready list behind peers.*/
  otp = chSchReadyI(otp);

  /* Swap operation as tail call.*/
  chSysSwitch(currp, otp);
 8001b6e:	4621      	mov	r1, r4
  tp->queue.prev             = cp->queue.prev;
 8001b70:	e9c4 3200 	strd	r3, r2, [r4]
  tp->queue.prev->queue.next = tp;
 8001b74:	6014      	str	r4, [r2, #0]
  cp->queue.prev             = tp;
 8001b76:	605c      	str	r4, [r3, #4]
  chSysSwitch(currp, otp);
 8001b78:	f7fe fb82 	bl	8000280 <_port_switch>
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	f383 8811 	msr	BASEPRI, r3
 8001b82:	bd38      	pop	{r3, r4, r5, pc}
 8001b84:	200008f0 	.word	0x200008f0
	...

08001b90 <bmk_thread8>:
static THD_FUNCTION(bmk_thread8, p) {
 8001b90:	b538      	push	{r3, r4, r5, lr}
 8001b92:	4d09      	ldr	r5, [pc, #36]	; (8001bb8 <bmk_thread8+0x28>)
 8001b94:	4604      	mov	r4, r0
    chThdYield();
 8001b96:	f7ff ffcb 	bl	8001b30 <chThdYield>
    chThdYield();
 8001b9a:	f7ff ffc9 	bl	8001b30 <chThdYield>
    chThdYield();
 8001b9e:	f7ff ffc7 	bl	8001b30 <chThdYield>
    chThdYield();
 8001ba2:	f7ff ffc5 	bl	8001b30 <chThdYield>
    (*(uint32_t *)p) += 4;
 8001ba6:	6823      	ldr	r3, [r4, #0]
  return (bool)((chThdGetSelfX()->flags & CH_FLAG_TERMINATE) != (tmode_t)0);
 8001ba8:	69aa      	ldr	r2, [r5, #24]
 8001baa:	3304      	adds	r3, #4
 8001bac:	6023      	str	r3, [r4, #0]
  } while(!chThdShouldTerminateX());
 8001bae:	f892 3021 	ldrb.w	r3, [r2, #33]	; 0x21
 8001bb2:	075b      	lsls	r3, r3, #29
 8001bb4:	d5ef      	bpl.n	8001b96 <bmk_thread8+0x6>
}
 8001bb6:	bd38      	pop	{r3, r4, r5, pc}
 8001bb8:	200008f0 	.word	0x200008f0
 8001bbc:	00000000 	.word	0x00000000

08001bc0 <chSchWakeupS>:
  thread_t *otp = currp;
 8001bc0:	4b16      	ldr	r3, [pc, #88]	; (8001c1c <chSchWakeupS+0x5c>)
void chSchWakeupS(thread_t *ntp, msg_t msg) {
 8001bc2:	b470      	push	{r4, r5, r6}
  thread_t *otp = currp;
 8001bc4:	699e      	ldr	r6, [r3, #24]
  if (ntp->prio <= otp->prio) {
 8001bc6:	6885      	ldr	r5, [r0, #8]
void chSchWakeupS(thread_t *ntp, msg_t msg) {
 8001bc8:	4604      	mov	r4, r0
  if (ntp->prio <= otp->prio) {
 8001bca:	68b0      	ldr	r0, [r6, #8]
  ntp->u.rdymsg = msg;
 8001bcc:	6261      	str	r1, [r4, #36]	; 0x24
  if (ntp->prio <= otp->prio) {
 8001bce:	4285      	cmp	r5, r0
  tp->state = CH_STATE_READY;
 8001bd0:	f04f 0200 	mov.w	r2, #0
  if (ntp->prio <= otp->prio) {
 8001bd4:	d80c      	bhi.n	8001bf0 <chSchWakeupS+0x30>
  tp->state = CH_STATE_READY;
 8001bd6:	f884 2020 	strb.w	r2, [r4, #32]
    cp = cp->queue.next;
 8001bda:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
 8001bdc:	689a      	ldr	r2, [r3, #8]
 8001bde:	4295      	cmp	r5, r2
 8001be0:	d9fb      	bls.n	8001bda <chSchWakeupS+0x1a>
  tp->queue.prev             = cp->queue.prev;
 8001be2:	685a      	ldr	r2, [r3, #4]
 8001be4:	e9c4 3200 	strd	r3, r2, [r4]
  tp->queue.prev->queue.next = tp;
 8001be8:	6014      	str	r4, [r2, #0]
  cp->queue.prev             = tp;
 8001bea:	605c      	str	r4, [r3, #4]
}
 8001bec:	bc70      	pop	{r4, r5, r6}
 8001bee:	4770      	bx	lr
  tp->state = CH_STATE_READY;
 8001bf0:	f886 2020 	strb.w	r2, [r6, #32]
  cp = (thread_t *)&ch.rlist.queue;
 8001bf4:	461a      	mov	r2, r3
    cp = cp->queue.next;
 8001bf6:	6812      	ldr	r2, [r2, #0]
  } while (cp->prio >= tp->prio);
 8001bf8:	6891      	ldr	r1, [r2, #8]
 8001bfa:	4288      	cmp	r0, r1
 8001bfc:	d9fb      	bls.n	8001bf6 <chSchWakeupS+0x36>
  tp->queue.prev             = cp->queue.prev;
 8001bfe:	6851      	ldr	r1, [r2, #4]
 8001c00:	6071      	str	r1, [r6, #4]
    ntp->state = CH_STATE_CURRENT;
 8001c02:	2001      	movs	r0, #1
  tp->queue.next             = cp;
 8001c04:	6032      	str	r2, [r6, #0]
  tp->queue.prev->queue.next = tp;
 8001c06:	600e      	str	r6, [r1, #0]
  cp->queue.prev             = tp;
 8001c08:	6056      	str	r6, [r2, #4]
    ntp->state = CH_STATE_CURRENT;
 8001c0a:	f884 0020 	strb.w	r0, [r4, #32]
    chSysSwitch(ntp, otp);
 8001c0e:	4631      	mov	r1, r6
 8001c10:	4620      	mov	r0, r4
    currp = ntp;
 8001c12:	619c      	str	r4, [r3, #24]
}
 8001c14:	bc70      	pop	{r4, r5, r6}
    chSysSwitch(ntp, otp);
 8001c16:	f7fe bb33 	b.w	8000280 <_port_switch>
 8001c1a:	bf00      	nop
 8001c1c:	200008f0 	.word	0x200008f0

08001c20 <chThdCreateStatic.constprop.62>:
thread_t *chThdCreateStatic(void *wsp, size_t size,
 8001c20:	b570      	push	{r4, r5, r6, lr}
 8001c22:	2420      	movs	r4, #32
 8001c24:	f384 8811 	msr	BASEPRI, r4
  REG_INSERT(tp);
 8001c28:	4e1d      	ldr	r6, [pc, #116]	; (8001ca0 <chThdCreateStatic.constprop.62+0x80>)
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 8001c2a:	f8c0 30e0 	str.w	r3, [r0, #224]	; 0xe0
 8001c2e:	f100 03dc 	add.w	r3, r0, #220	; 0xdc
 8001c32:	f8c0 20dc 	str.w	r2, [r0, #220]	; 0xdc
  tp->prio      = prio;
 8001c36:	f8c0 1108 	str.w	r1, [r0, #264]	; 0x108
  REG_INSERT(tp);
 8001c3a:	6972      	ldr	r2, [r6, #20]
  tp->realprio  = prio;
 8001c3c:	f8c0 113c 	str.w	r1, [r0, #316]	; 0x13c
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 8001c40:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
 8001c44:	4d17      	ldr	r5, [pc, #92]	; (8001ca4 <chThdCreateStatic.constprop.62+0x84>)
  tp->name      = name;
 8001c46:	4b18      	ldr	r3, [pc, #96]	; (8001ca8 <chThdCreateStatic.constprop.62+0x88>)
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 8001c48:	f8c0 50fc 	str.w	r5, [r0, #252]	; 0xfc
  tp->state     = CH_STATE_WTSTART;
 8001c4c:	2402      	movs	r4, #2
  tp->flags     = CH_FLAG_MODE_STATIC;
 8001c4e:	2101      	movs	r1, #1
  tp->state     = CH_STATE_WTSTART;
 8001c50:	f8a0 4120 	strh.w	r4, [r0, #288]	; 0x120
  tp->flags     = CH_FLAG_MODE_STATIC;
 8001c54:	f880 1122 	strb.w	r1, [r0, #290]	; 0x122
  tp = (thread_t *)((uint8_t *)wsp + size -
 8001c58:	f500 7480 	add.w	r4, r0, #256	; 0x100
  tp->mtxlist   = NULL;
 8001c5c:	2500      	movs	r5, #0
  tp->name      = name;
 8001c5e:	f8c0 3118 	str.w	r3, [r0, #280]	; 0x118
  list_init(&tp->waiting);
 8001c62:	f500 7194 	add.w	r1, r0, #296	; 0x128
  queue_init(&tp->msgqueue);
 8001c66:	f500 7396 	add.w	r3, r0, #300	; 0x12c
  tp->mtxlist   = NULL;
 8001c6a:	f8c0 5138 	str.w	r5, [r0, #312]	; 0x138
  tp->epending  = (eventmask_t)0;
 8001c6e:	f8c0 5134 	str.w	r5, [r0, #308]	; 0x134
  REG_INSERT(tp);
 8001c72:	f8c0 6110 	str.w	r6, [r0, #272]	; 0x110
 8001c76:	f8c0 2114 	str.w	r2, [r0, #276]	; 0x114
  tp->wabase = (stkalign_t *)wsp;
 8001c7a:	f8c0 011c 	str.w	r0, [r0, #284]	; 0x11c
  REG_INSERT(tp);
 8001c7e:	6114      	str	r4, [r2, #16]
  tlp->next = (thread_t *)tlp;
 8001c80:	f8c0 1128 	str.w	r1, [r0, #296]	; 0x128
  tqp->next = (thread_t *)tqp;
 8001c84:	f8c0 312c 	str.w	r3, [r0, #300]	; 0x12c
  tqp->prev = (thread_t *)tqp;
 8001c88:	f8c0 3130 	str.w	r3, [r0, #304]	; 0x130
  chSchWakeupS(tp, MSG_OK);
 8001c8c:	4629      	mov	r1, r5
 8001c8e:	4620      	mov	r0, r4
  REG_INSERT(tp);
 8001c90:	6174      	str	r4, [r6, #20]
  chSchWakeupS(tp, MSG_OK);
 8001c92:	f7ff ff95 	bl	8001bc0 <chSchWakeupS>
 8001c96:	f385 8811 	msr	BASEPRI, r5
}
 8001c9a:	4620      	mov	r0, r4
 8001c9c:	bd70      	pop	{r4, r5, r6, pc}
 8001c9e:	bf00      	nop
 8001ca0:	200008f0 	.word	0x200008f0
 8001ca4:	08000291 	.word	0x08000291
 8001ca8:	080076e8 	.word	0x080076e8
 8001cac:	00000000 	.word	0x00000000

08001cb0 <chCondSignal.constprop.51>:
void chCondSignal(condition_variable_t *cp) {
 8001cb0:	b508      	push	{r3, lr}
 8001cb2:	2320      	movs	r3, #32
 8001cb4:	f383 8811 	msr	BASEPRI, r3
  return (bool)(tqp->next != (const thread_t *)tqp);
 8001cb8:	4b06      	ldr	r3, [pc, #24]	; (8001cd4 <chCondSignal.constprop.51+0x24>)
 8001cba:	6818      	ldr	r0, [r3, #0]
  if (queue_notempty(&cp->queue)) {
 8001cbc:	4298      	cmp	r0, r3
 8001cbe:	d005      	beq.n	8001ccc <chCondSignal.constprop.51+0x1c>
  tqp->next             = tp->queue.next;
 8001cc0:	6802      	ldr	r2, [r0, #0]
 8001cc2:	601a      	str	r2, [r3, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 8001cc4:	6053      	str	r3, [r2, #4]
    chSchWakeupS(queue_fifo_remove(&cp->queue), MSG_OK);
 8001cc6:	2100      	movs	r1, #0
 8001cc8:	f7ff ff7a 	bl	8001bc0 <chSchWakeupS>
 8001ccc:	2300      	movs	r3, #0
 8001cce:	f383 8811 	msr	BASEPRI, r3
}
 8001cd2:	bd08      	pop	{r3, pc}
 8001cd4:	20000800 	.word	0x20000800
	...

08001ce0 <chThdCreateFromMemoryPool.constprop.31>:
 *                      the thread into the working space area.
 * @retval  NULL        if the memory pool is empty.
 *
 * @api
 */
thread_t *chThdCreateFromMemoryPool(memory_pool_t *mp, const char *name,
 8001ce0:	b5f0      	push	{r4, r5, r6, r7, lr}
  thread_t *tp;
  void *wsp;

  chDbgCheck(mp != NULL);

  wsp = chPoolAlloc(mp);
 8001ce2:	4d14      	ldr	r5, [pc, #80]	; (8001d34 <chThdCreateFromMemoryPool.constprop.31+0x54>)
thread_t *chThdCreateFromMemoryPool(memory_pool_t *mp, const char *name,
 8001ce4:	b087      	sub	sp, #28
 8001ce6:	4607      	mov	r7, r0
  wsp = chPoolAlloc(mp);
 8001ce8:	4628      	mov	r0, r5
thread_t *chThdCreateFromMemoryPool(memory_pool_t *mp, const char *name,
 8001cea:	460e      	mov	r6, r1
 8001cec:	4614      	mov	r4, r2
  wsp = chPoolAlloc(mp);
 8001cee:	f7fe ff57 	bl	8000ba0 <chPoolAlloc>
  if (wsp == NULL) {
 8001cf2:	b1e0      	cbz	r0, 8001d2e <chThdCreateFromMemoryPool.constprop.31+0x4e>
  }

  thread_descriptor_t td = {
    name,
    wsp,
    (stkalign_t *)((uint8_t *)wsp + mp->object_size),
 8001cf4:	686b      	ldr	r3, [r5, #4]
  thread_descriptor_t td = {
 8001cf6:	4a10      	ldr	r2, [pc, #64]	; (8001d38 <chThdCreateFromMemoryPool.constprop.31+0x58>)
 8001cf8:	9700      	str	r7, [sp, #0]
    (stkalign_t *)((uint8_t *)wsp + mp->object_size),
 8001cfa:	4403      	add	r3, r0
  thread_descriptor_t td = {
 8001cfc:	9302      	str	r3, [sp, #8]
 8001cfe:	9001      	str	r0, [sp, #4]
 8001d00:	9603      	str	r6, [sp, #12]
 8001d02:	9405      	str	r4, [sp, #20]
 8001d04:	9204      	str	r2, [sp, #16]
 8001d06:	2320      	movs	r3, #32
 8001d08:	f383 8811 	msr	BASEPRI, r3
                  (uint8_t *)wsp + mp->object_size,
                  CH_DBG_STACK_FILL_VALUE);
#endif

  chSysLock();
  tp = chThdCreateSuspendedI(&td);
 8001d0c:	4668      	mov	r0, sp
 8001d0e:	f7ff f8b7 	bl	8000e80 <chThdCreateSuspendedI>
  tp->flags = CH_FLAG_MODE_MPOOL;
 8001d12:	2302      	movs	r3, #2
 8001d14:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
  tp->mpool = mp;
 8001d18:	6405      	str	r5, [r0, #64]	; 0x40
  chSchWakeupS(tp, MSG_OK);
 8001d1a:	2100      	movs	r1, #0
  tp = chThdCreateSuspendedI(&td);
 8001d1c:	4604      	mov	r4, r0
  chSchWakeupS(tp, MSG_OK);
 8001d1e:	f7ff ff4f 	bl	8001bc0 <chSchWakeupS>
 8001d22:	2300      	movs	r3, #0
 8001d24:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();

  return tp;
}
 8001d28:	4620      	mov	r0, r4
 8001d2a:	b007      	add	sp, #28
 8001d2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return NULL;
 8001d2e:	4604      	mov	r4, r0
 8001d30:	e7fa      	b.n	8001d28 <chThdCreateFromMemoryPool.constprop.31+0x48>
 8001d32:	bf00      	nop
 8001d34:	20000ad8 	.word	0x20000ad8
 8001d38:	080009b1 	.word	0x080009b1
 8001d3c:	00000000 	.word	0x00000000

08001d40 <chSemSignal>:
void chSemSignal(semaphore_t *sp) {
 8001d40:	b508      	push	{r3, lr}
 8001d42:	2320      	movs	r3, #32
 8001d44:	f383 8811 	msr	BASEPRI, r3
  if (++sp->cnt <= (cnt_t)0) {
 8001d48:	6883      	ldr	r3, [r0, #8]
 8001d4a:	3301      	adds	r3, #1
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	6083      	str	r3, [r0, #8]
 8001d50:	dd03      	ble.n	8001d5a <chSemSignal+0x1a>
 8001d52:	2300      	movs	r3, #0
 8001d54:	f383 8811 	msr	BASEPRI, r3
}
 8001d58:	bd08      	pop	{r3, pc}
 8001d5a:	4603      	mov	r3, r0
  thread_t *tp = tqp->next;
 8001d5c:	6800      	ldr	r0, [r0, #0]
  tqp->next             = tp->queue.next;
 8001d5e:	6802      	ldr	r2, [r0, #0]
 8001d60:	601a      	str	r2, [r3, #0]
    chSchWakeupS(queue_fifo_remove(&sp->queue), MSG_OK);
 8001d62:	2100      	movs	r1, #0
  tqp->next->queue.prev = (thread_t *)tqp;
 8001d64:	6053      	str	r3, [r2, #4]
 8001d66:	f7ff ff2b 	bl	8001bc0 <chSchWakeupS>
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	f383 8811 	msr	BASEPRI, r3
}
 8001d70:	bd08      	pop	{r3, pc}
 8001d72:	bf00      	nop
	...

08001d80 <chSchGoSleepS>:
  thread_t *otp = currp;
 8001d80:	4b08      	ldr	r3, [pc, #32]	; (8001da4 <chSchGoSleepS+0x24>)
 8001d82:	6999      	ldr	r1, [r3, #24]
  thread_t *tp = tqp->next;
 8001d84:	681a      	ldr	r2, [r3, #0]
void chSchGoSleepS(tstate_t newstate) {
 8001d86:	b410      	push	{r4}
  otp->state = newstate;
 8001d88:	f881 0020 	strb.w	r0, [r1, #32]
  tqp->next             = tp->queue.next;
 8001d8c:	6810      	ldr	r0, [r2, #0]
 8001d8e:	6018      	str	r0, [r3, #0]
  currp->state = CH_STATE_CURRENT;
 8001d90:	2401      	movs	r4, #1
  tqp->next->queue.prev = (thread_t *)tqp;
 8001d92:	6043      	str	r3, [r0, #4]
 8001d94:	f882 4020 	strb.w	r4, [r2, #32]
  chSysSwitch(currp, otp);
 8001d98:	4610      	mov	r0, r2
}
 8001d9a:	bc10      	pop	{r4}
  currp = queue_fifo_remove(&ch.rlist.queue);
 8001d9c:	619a      	str	r2, [r3, #24]
  chSysSwitch(currp, otp);
 8001d9e:	f7fe ba6f 	b.w	8000280 <_port_switch>
 8001da2:	bf00      	nop
 8001da4:	200008f0 	.word	0x200008f0
	...

08001db0 <chEvtWaitOne.constprop.39>:
 * @return              The mask of the lowest event id served and cleared.
 *
 * @api
 */
eventmask_t chEvtWaitOne(eventmask_t events) {
  thread_t *ctp = currp;
 8001db0:	4a0b      	ldr	r2, [pc, #44]	; (8001de0 <chEvtWaitOne.constprop.39+0x30>)
eventmask_t chEvtWaitOne(eventmask_t events) {
 8001db2:	b510      	push	{r4, lr}
 8001db4:	2320      	movs	r3, #32
  thread_t *ctp = currp;
 8001db6:	6994      	ldr	r4, [r2, #24]
 8001db8:	f383 8811 	msr	BASEPRI, r3
  eventmask_t m;

  chSysLock();
  m = ctp->epending & events;
 8001dbc:	6b63      	ldr	r3, [r4, #52]	; 0x34
  if (m == (eventmask_t)0) {
 8001dbe:	b933      	cbnz	r3, 8001dce <chEvtWaitOne.constprop.39+0x1e>
    ctp->u.ewmask = events;
 8001dc0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001dc4:	6263      	str	r3, [r4, #36]	; 0x24
    chSchGoSleepS(CH_STATE_WTOREVT);
 8001dc6:	200a      	movs	r0, #10
 8001dc8:	f7ff ffda 	bl	8001d80 <chSchGoSleepS>
    m = ctp->epending & events;
 8001dcc:	6b63      	ldr	r3, [r4, #52]	; 0x34
  }
  m ^= m & (m - (eventmask_t)1);
 8001dce:	4258      	negs	r0, r3
 8001dd0:	4018      	ands	r0, r3
  ctp->epending &= ~m;
 8001dd2:	ea23 0300 	bic.w	r3, r3, r0
 8001dd6:	6363      	str	r3, [r4, #52]	; 0x34
 8001dd8:	2300      	movs	r3, #0
 8001dda:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();

  return m;
}
 8001dde:	bd10      	pop	{r4, pc}
 8001de0:	200008f0 	.word	0x200008f0
	...

08001df0 <chEvtWaitAny.constprop.38>:
 * @return              The mask of the served and cleared events.
 *
 * @api
 */
eventmask_t chEvtWaitAny(eventmask_t events) {
  thread_t *ctp = currp;
 8001df0:	4a09      	ldr	r2, [pc, #36]	; (8001e18 <chEvtWaitAny.constprop.38+0x28>)
eventmask_t chEvtWaitAny(eventmask_t events) {
 8001df2:	b510      	push	{r4, lr}
 8001df4:	2320      	movs	r3, #32
  thread_t *ctp = currp;
 8001df6:	6994      	ldr	r4, [r2, #24]
 8001df8:	f383 8811 	msr	BASEPRI, r3
  eventmask_t m;

  chSysLock();
  m = ctp->epending & events;
 8001dfc:	6b60      	ldr	r0, [r4, #52]	; 0x34
  if (m == (eventmask_t)0) {
 8001dfe:	b930      	cbnz	r0, 8001e0e <chEvtWaitAny.constprop.38+0x1e>
    ctp->u.ewmask = events;
 8001e00:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    chSchGoSleepS(CH_STATE_WTOREVT);
 8001e04:	200a      	movs	r0, #10
    ctp->u.ewmask = events;
 8001e06:	6263      	str	r3, [r4, #36]	; 0x24
    chSchGoSleepS(CH_STATE_WTOREVT);
 8001e08:	f7ff ffba 	bl	8001d80 <chSchGoSleepS>
    m = ctp->epending & events;
 8001e0c:	6b60      	ldr	r0, [r4, #52]	; 0x34
  }
  ctp->epending &= ~m;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	6363      	str	r3, [r4, #52]	; 0x34
 8001e12:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();

  return m;
}
 8001e16:	bd10      	pop	{r4, pc}
 8001e18:	200008f0 	.word	0x200008f0
 8001e1c:	00000000 	.word	0x00000000

08001e20 <chEvtWaitAll.constprop.37>:
 * @return              The mask of the served and cleared events.
 *
 * @api
 */
eventmask_t chEvtWaitAll(eventmask_t events) {
  thread_t *ctp = currp;
 8001e20:	4a0c      	ldr	r2, [pc, #48]	; (8001e54 <chEvtWaitAll.constprop.37+0x34>)
eventmask_t chEvtWaitAll(eventmask_t events) {
 8001e22:	b510      	push	{r4, lr}
 8001e24:	2320      	movs	r3, #32
  thread_t *ctp = currp;
 8001e26:	6994      	ldr	r4, [r2, #24]
 8001e28:	f383 8811 	msr	BASEPRI, r3

  chSysLock();
  if ((ctp->epending & events) != events) {
 8001e2c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001e2e:	f003 0205 	and.w	r2, r3, #5
 8001e32:	2a05      	cmp	r2, #5
 8001e34:	d005      	beq.n	8001e42 <chEvtWaitAll.constprop.37+0x22>
    ctp->u.ewmask = events;
 8001e36:	2305      	movs	r3, #5
 8001e38:	6263      	str	r3, [r4, #36]	; 0x24
    chSchGoSleepS(CH_STATE_WTANDEVT);
 8001e3a:	200b      	movs	r0, #11
 8001e3c:	f7ff ffa0 	bl	8001d80 <chSchGoSleepS>
 8001e40:	6b63      	ldr	r3, [r4, #52]	; 0x34
  }
  ctp->epending &= ~events;
 8001e42:	f023 0305 	bic.w	r3, r3, #5
 8001e46:	6363      	str	r3, [r4, #52]	; 0x34
 8001e48:	2300      	movs	r3, #0
 8001e4a:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();

  return events;
}
 8001e4e:	2005      	movs	r0, #5
 8001e50:	bd10      	pop	{r4, pc}
 8001e52:	bf00      	nop
 8001e54:	200008f0 	.word	0x200008f0
	...

08001e60 <bmk_thread4>:
  return ch.rlist.current;
 8001e60:	4a07      	ldr	r2, [pc, #28]	; (8001e80 <bmk_thread4+0x20>)
static THD_FUNCTION(bmk_thread4, p) {
 8001e62:	b510      	push	{r4, lr}
 8001e64:	2320      	movs	r3, #32
 8001e66:	6994      	ldr	r4, [r2, #24]
 8001e68:	f383 8811 	msr	BASEPRI, r3
    chSchGoSleepS(CH_STATE_SUSPENDED);
 8001e6c:	2003      	movs	r0, #3
 8001e6e:	f7ff ff87 	bl	8001d80 <chSchGoSleepS>
  } while (msg == MSG_OK);
 8001e72:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d0f9      	beq.n	8001e6c <bmk_thread4+0xc>
 8001e78:	2300      	movs	r3, #0
 8001e7a:	f383 8811 	msr	BASEPRI, r3
}
 8001e7e:	bd10      	pop	{r4, pc}
 8001e80:	200008f0 	.word	0x200008f0
	...

08001e90 <chSchGoSleepTimeoutS>:
msg_t chSchGoSleepTimeoutS(tstate_t newstate, sysinterval_t timeout) {
 8001e90:	b530      	push	{r4, r5, lr}
  if (TIME_INFINITE != timeout) {
 8001e92:	1c4b      	adds	r3, r1, #1
msg_t chSchGoSleepTimeoutS(tstate_t newstate, sysinterval_t timeout) {
 8001e94:	b087      	sub	sp, #28
  if (TIME_INFINITE != timeout) {
 8001e96:	d012      	beq.n	8001ebe <chSchGoSleepTimeoutS+0x2e>
    chVTDoSetI(&vt, timeout, wakeup, currp);
 8001e98:	4c0c      	ldr	r4, [pc, #48]	; (8001ecc <chSchGoSleepTimeoutS+0x3c>)
 8001e9a:	4a0d      	ldr	r2, [pc, #52]	; (8001ed0 <chSchGoSleepTimeoutS+0x40>)
 8001e9c:	69a3      	ldr	r3, [r4, #24]
 8001e9e:	4605      	mov	r5, r0
 8001ea0:	a801      	add	r0, sp, #4
 8001ea2:	f7ff f9dd 	bl	8001260 <chVTDoSetI>
    chSchGoSleepS(newstate);
 8001ea6:	4628      	mov	r0, r5
 8001ea8:	f7ff ff6a 	bl	8001d80 <chSchGoSleepS>
    if (chVTIsArmedI(&vt)) {
 8001eac:	9b04      	ldr	r3, [sp, #16]
 8001eae:	b113      	cbz	r3, 8001eb6 <chSchGoSleepTimeoutS+0x26>
      chVTDoResetI(&vt);
 8001eb0:	a801      	add	r0, sp, #4
 8001eb2:	f7ff f995 	bl	80011e0 <chVTDoResetI>
  return currp->u.rdymsg;
 8001eb6:	69a3      	ldr	r3, [r4, #24]
}
 8001eb8:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8001eba:	b007      	add	sp, #28
 8001ebc:	bd30      	pop	{r4, r5, pc}
 8001ebe:	4c03      	ldr	r4, [pc, #12]	; (8001ecc <chSchGoSleepTimeoutS+0x3c>)
    chSchGoSleepS(newstate);
 8001ec0:	f7ff ff5e 	bl	8001d80 <chSchGoSleepS>
  return currp->u.rdymsg;
 8001ec4:	69a3      	ldr	r3, [r4, #24]
}
 8001ec6:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8001ec8:	b007      	add	sp, #28
 8001eca:	bd30      	pop	{r4, r5, pc}
 8001ecc:	200008f0 	.word	0x200008f0
 8001ed0:	08000f01 	.word	0x08000f01
	...

08001ee0 <chSemWaitTimeout.constprop.58>:
 8001ee0:	2320      	movs	r3, #32
 8001ee2:	f383 8811 	msr	BASEPRI, r3
  if (--sp->cnt < (cnt_t)0) {
 8001ee6:	4b10      	ldr	r3, [pc, #64]	; (8001f28 <chSemWaitTimeout.constprop.58+0x48>)
 8001ee8:	6899      	ldr	r1, [r3, #8]
 8001eea:	1e4a      	subs	r2, r1, #1
 8001eec:	2a00      	cmp	r2, #0
 8001eee:	609a      	str	r2, [r3, #8]
 8001ef0:	db04      	blt.n	8001efc <chSemWaitTimeout.constprop.58+0x1c>
  return MSG_OK;
 8001ef2:	2000      	movs	r0, #0
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	f383 8811 	msr	BASEPRI, r3
}
 8001efa:	4770      	bx	lr
    if (TIME_IMMEDIATE == timeout) {
 8001efc:	b180      	cbz	r0, 8001f20 <chSemWaitTimeout.constprop.58+0x40>
    currp->u.wtsemp = sp;
 8001efe:	4a0b      	ldr	r2, [pc, #44]	; (8001f2c <chSemWaitTimeout.constprop.58+0x4c>)
msg_t chSemWaitTimeout(semaphore_t *sp, sysinterval_t timeout) {
 8001f00:	b510      	push	{r4, lr}
    currp->u.wtsemp = sp;
 8001f02:	6992      	ldr	r2, [r2, #24]
  tp->queue.prev             = tqp->prev;
 8001f04:	685c      	ldr	r4, [r3, #4]
 8001f06:	6253      	str	r3, [r2, #36]	; 0x24
 8001f08:	e9c2 3400 	strd	r3, r4, [r2]
 8001f0c:	4601      	mov	r1, r0
  tp->queue.prev->queue.next = tp;
 8001f0e:	6022      	str	r2, [r4, #0]
    return chSchGoSleepTimeoutS(CH_STATE_WTSEM, timeout);
 8001f10:	2005      	movs	r0, #5
  tqp->prev                  = tp;
 8001f12:	605a      	str	r2, [r3, #4]
 8001f14:	f7ff ffbc 	bl	8001e90 <chSchGoSleepTimeoutS>
 8001f18:	2300      	movs	r3, #0
 8001f1a:	f383 8811 	msr	BASEPRI, r3
}
 8001f1e:	bd10      	pop	{r4, pc}
      sp->cnt++;
 8001f20:	6099      	str	r1, [r3, #8]
      return MSG_TIMEOUT;
 8001f22:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001f26:	e7e5      	b.n	8001ef4 <chSemWaitTimeout.constprop.58+0x14>
 8001f28:	20000b28 	.word	0x20000b28
 8001f2c:	200008f0 	.word	0x200008f0

08001f30 <chGuardedPoolAllocTimeout.constprop.15>:
 * @return              The pointer to the allocated object.
 * @retval NULL         if the operation timed out.
 *
 * @api
 */
void *chGuardedPoolAllocTimeout(guarded_memory_pool_t *gmp,
 8001f30:	b510      	push	{r4, lr}
 8001f32:	2320      	movs	r3, #32
 8001f34:	f383 8811 	msr	BASEPRI, r3
  if (--sp->cnt < (cnt_t)0) {
 8001f38:	4c15      	ldr	r4, [pc, #84]	; (8001f90 <chGuardedPoolAllocTimeout.constprop.15+0x60>)
 8001f3a:	68a2      	ldr	r2, [r4, #8]
 8001f3c:	1e53      	subs	r3, r2, #1
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	60a3      	str	r3, [r4, #8]
 8001f42:	db07      	blt.n	8001f54 <chGuardedPoolAllocTimeout.constprop.15+0x24>
  objp = mp->next;
 8001f44:	68e0      	ldr	r0, [r4, #12]
  if (objp != NULL) {
 8001f46:	b1b0      	cbz	r0, 8001f76 <chGuardedPoolAllocTimeout.constprop.15+0x46>
    mp->next = mp->next->next;
 8001f48:	6803      	ldr	r3, [r0, #0]
 8001f4a:	60e3      	str	r3, [r4, #12]
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  p = chGuardedPoolAllocTimeoutS(gmp, timeout);
  chSysUnlock();

  return p;
}
 8001f52:	bd10      	pop	{r4, pc}
    if (TIME_IMMEDIATE == timeout) {
 8001f54:	b1c8      	cbz	r0, 8001f8a <chGuardedPoolAllocTimeout.constprop.15+0x5a>
    currp->u.wtsemp = sp;
 8001f56:	4b0f      	ldr	r3, [pc, #60]	; (8001f94 <chGuardedPoolAllocTimeout.constprop.15+0x64>)
  tp->queue.prev             = tqp->prev;
 8001f58:	6862      	ldr	r2, [r4, #4]
 8001f5a:	699b      	ldr	r3, [r3, #24]
    return chSchGoSleepTimeoutS(CH_STATE_WTSEM, timeout);
 8001f5c:	4601      	mov	r1, r0
 8001f5e:	e9c3 4200 	strd	r4, r2, [r3]
    currp->u.wtsemp = sp;
 8001f62:	625c      	str	r4, [r3, #36]	; 0x24
    return chSchGoSleepTimeoutS(CH_STATE_WTSEM, timeout);
 8001f64:	2005      	movs	r0, #5
  tp->queue.prev->queue.next = tp;
 8001f66:	6013      	str	r3, [r2, #0]
  tqp->prev                  = tp;
 8001f68:	6063      	str	r3, [r4, #4]
 8001f6a:	f7ff ff91 	bl	8001e90 <chSchGoSleepTimeoutS>
  if (msg != MSG_OK) {
 8001f6e:	2800      	cmp	r0, #0
 8001f70:	d0e8      	beq.n	8001f44 <chGuardedPoolAllocTimeout.constprop.15+0x14>
    return NULL;
 8001f72:	2000      	movs	r0, #0
 8001f74:	e7ea      	b.n	8001f4c <chGuardedPoolAllocTimeout.constprop.15+0x1c>
  else if (mp->provider != NULL) {
 8001f76:	69a3      	ldr	r3, [r4, #24]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d0fa      	beq.n	8001f72 <chGuardedPoolAllocTimeout.constprop.15+0x42>
    objp = mp->provider(mp->object_size, mp->align);
 8001f7c:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
 8001f80:	4798      	blx	r3
 8001f82:	2300      	movs	r3, #0
 8001f84:	f383 8811 	msr	BASEPRI, r3
}
 8001f88:	bd10      	pop	{r4, pc}
      sp->cnt++;
 8001f8a:	60a2      	str	r2, [r4, #8]
 8001f8c:	e7de      	b.n	8001f4c <chGuardedPoolAllocTimeout.constprop.15+0x1c>
 8001f8e:	bf00      	nop
 8001f90:	20000810 	.word	0x20000810
 8001f94:	200008f0 	.word	0x200008f0
	...

08001fa0 <oslib_test_002_003_execute>:

static void oslib_test_002_003_execute(void) {
 8001fa0:	b508      	push	{r3, lr}

  /* [2.3.1] Trying to allocate with 100mS timeout, must fail because
     the pool is empty.*/
  test_set_step(1);
 8001fa2:	4b07      	ldr	r3, [pc, #28]	; (8001fc0 <oslib_test_002_003_execute+0x20>)
 8001fa4:	2201      	movs	r2, #1
  {
    test_assert(chGuardedPoolAllocTimeout(&gmp1, TIME_MS2I(100)) == NULL, "list not empty");
 8001fa6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
  test_set_step(1);
 8001faa:	601a      	str	r2, [r3, #0]
    test_assert(chGuardedPoolAllocTimeout(&gmp1, TIME_MS2I(100)) == NULL, "list not empty");
 8001fac:	f7ff ffc0 	bl	8001f30 <chGuardedPoolAllocTimeout.constprop.15>
 8001fb0:	fab0 f080 	clz	r0, r0
 8001fb4:	0940      	lsrs	r0, r0, #5
 8001fb6:	4903      	ldr	r1, [pc, #12]	; (8001fc4 <oslib_test_002_003_execute+0x24>)
  }
}
 8001fb8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    test_assert(chGuardedPoolAllocTimeout(&gmp1, TIME_MS2I(100)) == NULL, "list not empty");
 8001fbc:	f7fe bc20 	b.w	8000800 <_test_assert>
 8001fc0:	20001254 	.word	0x20001254
 8001fc4:	0800785c 	.word	0x0800785c
	...

08001fd0 <rt_test_008_006_execute>:
static void rt_test_008_006_execute(void) {
 8001fd0:	b570      	push	{r4, r5, r6, lr}
  test_set_step(1);
 8001fd2:	4d57      	ldr	r5, [pc, #348]	; (8002130 <rt_test_008_006_execute+0x160>)
 * @retval 0            if the operation has timed out.
 *
 * @api
 */
eventmask_t chEvtWaitOneTimeout(eventmask_t events, sysinterval_t timeout) {
  thread_t *ctp = currp;
 8001fd4:	4c57      	ldr	r4, [pc, #348]	; (8002134 <rt_test_008_006_execute+0x164>)
 8001fd6:	2001      	movs	r0, #1
 8001fd8:	6028      	str	r0, [r5, #0]
 8001fda:	69a2      	ldr	r2, [r4, #24]
 8001fdc:	2320      	movs	r3, #32
 8001fde:	f383 8811 	msr	BASEPRI, r3
  eventmask_t m;

  chSysLock();
  m = ctp->epending & events;
 8001fe2:	6b53      	ldr	r3, [r2, #52]	; 0x34
  if (m == (eventmask_t)0) {
 8001fe4:	b933      	cbnz	r3, 8001ff4 <rt_test_008_006_execute+0x24>
 8001fe6:	f383 8811 	msr	BASEPRI, r3
    test_assert(m == 0, "spurious event");
 8001fea:	4953      	ldr	r1, [pc, #332]	; (8002138 <rt_test_008_006_execute+0x168>)
 8001fec:	f7fe fc08 	bl	8000800 <_test_assert>
 8001ff0:	b180      	cbz	r0, 8002014 <rt_test_008_006_execute+0x44>
}
 8001ff2:	bd70      	pop	{r4, r5, r6, pc}
      chSysUnlock();
      return (eventmask_t)0;
    }
    m = ctp->epending & events;
  }
  m ^= m & (m - (eventmask_t)1);
 8001ff4:	4258      	negs	r0, r3
 8001ff6:	4018      	ands	r0, r3
  ctp->epending &= ~m;
 8001ff8:	ea23 0300 	bic.w	r3, r3, r0
 8001ffc:	6353      	str	r3, [r2, #52]	; 0x34
 8001ffe:	2300      	movs	r3, #0
 8002000:	f383 8811 	msr	BASEPRI, r3
 8002004:	fab0 f080 	clz	r0, r0
 8002008:	0940      	lsrs	r0, r0, #5
    test_assert(m == 0, "spurious event");
 800200a:	494b      	ldr	r1, [pc, #300]	; (8002138 <rt_test_008_006_execute+0x168>)
 800200c:	f7fe fbf8 	bl	8000800 <_test_assert>
 8002010:	2800      	cmp	r0, #0
 8002012:	d1ee      	bne.n	8001ff2 <rt_test_008_006_execute+0x22>
 * @retval 0            if the operation has timed out.
 *
 * @api
 */
eventmask_t chEvtWaitAnyTimeout(eventmask_t events, sysinterval_t timeout) {
  thread_t *ctp = currp;
 8002014:	69a3      	ldr	r3, [r4, #24]
 8002016:	2220      	movs	r2, #32
 8002018:	f382 8811 	msr	BASEPRI, r2
  eventmask_t m;

  chSysLock();
  m = ctp->epending & events;
  if (m == (eventmask_t)0) {
 800201c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800201e:	2a00      	cmp	r2, #0
 8002020:	d072      	beq.n	8002108 <rt_test_008_006_execute+0x138>
      chSysUnlock();
      return (eventmask_t)0;
    }
    m = ctp->epending & events;
  }
  ctp->epending &= ~m;
 8002022:	6358      	str	r0, [r3, #52]	; 0x34
 8002024:	f380 8811 	msr	BASEPRI, r0
    test_assert(m == 0, "spurious event");
 8002028:	4943      	ldr	r1, [pc, #268]	; (8002138 <rt_test_008_006_execute+0x168>)
 800202a:	f7fe fbe9 	bl	8000800 <_test_assert>
 800202e:	2800      	cmp	r0, #0
 8002030:	d1df      	bne.n	8001ff2 <rt_test_008_006_execute+0x22>
 * @retval 0            if the operation has timed out.
 *
 * @api
 */
eventmask_t chEvtWaitAllTimeout(eventmask_t events, sysinterval_t timeout) {
  thread_t *ctp = currp;
 8002032:	69a3      	ldr	r3, [r4, #24]
 8002034:	2220      	movs	r2, #32
 8002036:	f382 8811 	msr	BASEPRI, r2

  chSysLock();
  if ((ctp->epending & events) != events) {
 800203a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800203c:	3201      	adds	r2, #1
 800203e:	d067      	beq.n	8002110 <rt_test_008_006_execute+0x140>
 8002040:	f380 8811 	msr	BASEPRI, r0
 8002044:	2001      	movs	r0, #1
    test_assert(m == 0, "spurious event");
 8002046:	493c      	ldr	r1, [pc, #240]	; (8002138 <rt_test_008_006_execute+0x168>)
 8002048:	f7fe fbda 	bl	8000800 <_test_assert>
 800204c:	2800      	cmp	r0, #0
 800204e:	d1d0      	bne.n	8001ff2 <rt_test_008_006_execute+0x22>
  test_set_step(2);
 8002050:	2302      	movs	r3, #2
 8002052:	602b      	str	r3, [r5, #0]
  thread_t *ctp = currp;
 8002054:	69a6      	ldr	r6, [r4, #24]
 8002056:	2320      	movs	r3, #32
 8002058:	f383 8811 	msr	BASEPRI, r3
  m = ctp->epending & events;
 800205c:	6b75      	ldr	r5, [r6, #52]	; 0x34
  if (m == (eventmask_t)0) {
 800205e:	b955      	cbnz	r5, 8002076 <rt_test_008_006_execute+0xa6>
    ctp->u.ewmask = events;
 8002060:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002064:	6273      	str	r3, [r6, #36]	; 0x24
    if (chSchGoSleepTimeoutS(CH_STATE_WTOREVT, timeout) < MSG_OK) {
 8002066:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800206a:	200a      	movs	r0, #10
 800206c:	f7ff ff10 	bl	8001e90 <chSchGoSleepTimeoutS>
 8002070:	2800      	cmp	r0, #0
 8002072:	db51      	blt.n	8002118 <rt_test_008_006_execute+0x148>
    m = ctp->epending & events;
 8002074:	6b75      	ldr	r5, [r6, #52]	; 0x34
  m ^= m & (m - (eventmask_t)1);
 8002076:	4268      	negs	r0, r5
 8002078:	4028      	ands	r0, r5
  ctp->epending &= ~m;
 800207a:	ea25 0500 	bic.w	r5, r5, r0
 800207e:	6375      	str	r5, [r6, #52]	; 0x34
 8002080:	2300      	movs	r3, #0
 8002082:	f383 8811 	msr	BASEPRI, r3
 8002086:	fab0 f080 	clz	r0, r0
 800208a:	0940      	lsrs	r0, r0, #5
    test_assert(m == 0, "spurious event");
 800208c:	492a      	ldr	r1, [pc, #168]	; (8002138 <rt_test_008_006_execute+0x168>)
 800208e:	f7fe fbb7 	bl	8000800 <_test_assert>
 8002092:	2800      	cmp	r0, #0
 8002094:	d1ad      	bne.n	8001ff2 <rt_test_008_006_execute+0x22>
  thread_t *ctp = currp;
 8002096:	69a6      	ldr	r6, [r4, #24]
 8002098:	2320      	movs	r3, #32
 800209a:	f383 8811 	msr	BASEPRI, r3
  m = ctp->epending & events;
 800209e:	6b75      	ldr	r5, [r6, #52]	; 0x34
  if (m == (eventmask_t)0) {
 80020a0:	b955      	cbnz	r5, 80020b8 <rt_test_008_006_execute+0xe8>
    ctp->u.ewmask = events;
 80020a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80020a6:	6273      	str	r3, [r6, #36]	; 0x24
    if (chSchGoSleepTimeoutS(CH_STATE_WTOREVT, timeout) < MSG_OK) {
 80020a8:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80020ac:	200a      	movs	r0, #10
 80020ae:	f7ff feef 	bl	8001e90 <chSchGoSleepTimeoutS>
 80020b2:	2800      	cmp	r0, #0
 80020b4:	db34      	blt.n	8002120 <rt_test_008_006_execute+0x150>
    m = ctp->epending & events;
 80020b6:	6b75      	ldr	r5, [r6, #52]	; 0x34
  ctp->epending &= ~m;
 80020b8:	2300      	movs	r3, #0
 80020ba:	6373      	str	r3, [r6, #52]	; 0x34
 80020bc:	f383 8811 	msr	BASEPRI, r3
 80020c0:	fab5 f085 	clz	r0, r5
 80020c4:	0940      	lsrs	r0, r0, #5
    test_assert(m == 0, "spurious event");
 80020c6:	491c      	ldr	r1, [pc, #112]	; (8002138 <rt_test_008_006_execute+0x168>)
 80020c8:	f7fe fb9a 	bl	8000800 <_test_assert>
 80020cc:	4605      	mov	r5, r0
 80020ce:	2800      	cmp	r0, #0
 80020d0:	d18f      	bne.n	8001ff2 <rt_test_008_006_execute+0x22>
  thread_t *ctp = currp;
 80020d2:	69a4      	ldr	r4, [r4, #24]
 80020d4:	2320      	movs	r3, #32
 80020d6:	f383 8811 	msr	BASEPRI, r3
  if ((ctp->epending & events) != events) {
 80020da:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80020dc:	3301      	adds	r3, #1
 80020de:	d009      	beq.n	80020f4 <rt_test_008_006_execute+0x124>
    if (TIME_IMMEDIATE == timeout) {
      chSysUnlock();
      return (eventmask_t)0;
    }
    ctp->u.ewmask = events;
 80020e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80020e4:	6263      	str	r3, [r4, #36]	; 0x24
    if (chSchGoSleepTimeoutS(CH_STATE_WTANDEVT, timeout) < MSG_OK) {
 80020e6:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80020ea:	200b      	movs	r0, #11
 80020ec:	f7ff fed0 	bl	8001e90 <chSchGoSleepTimeoutS>
 80020f0:	2800      	cmp	r0, #0
 80020f2:	db19      	blt.n	8002128 <rt_test_008_006_execute+0x158>
      chSysUnlock();
      return (eventmask_t)0;
    }
  }
  ctp->epending &= ~events;
 80020f4:	2300      	movs	r3, #0
 80020f6:	6363      	str	r3, [r4, #52]	; 0x34
 80020f8:	f383 8811 	msr	BASEPRI, r3
    test_assert(m == 0, "spurious event");
 80020fc:	4628      	mov	r0, r5
 80020fe:	490e      	ldr	r1, [pc, #56]	; (8002138 <rt_test_008_006_execute+0x168>)
}
 8002100:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    test_assert(m == 0, "spurious event");
 8002104:	f7fe bb7c 	b.w	8000800 <_test_assert>
 8002108:	f382 8811 	msr	BASEPRI, r2
 800210c:	2001      	movs	r0, #1
 800210e:	e78b      	b.n	8002028 <rt_test_008_006_execute+0x58>
 8002110:	6358      	str	r0, [r3, #52]	; 0x34
 8002112:	f380 8811 	msr	BASEPRI, r0
 8002116:	e796      	b.n	8002046 <rt_test_008_006_execute+0x76>
 8002118:	f385 8811 	msr	BASEPRI, r5
 800211c:	2001      	movs	r0, #1
 800211e:	e7b5      	b.n	800208c <rt_test_008_006_execute+0xbc>
 8002120:	f385 8811 	msr	BASEPRI, r5
 8002124:	2001      	movs	r0, #1
 8002126:	e7ce      	b.n	80020c6 <rt_test_008_006_execute+0xf6>
 8002128:	f385 8811 	msr	BASEPRI, r5
 800212c:	2501      	movs	r5, #1
 800212e:	e7e5      	b.n	80020fc <rt_test_008_006_execute+0x12c>
 8002130:	20001254 	.word	0x20001254
 8002134:	200008f0 	.word	0x200008f0
 8002138:	080089fc 	.word	0x080089fc
 800213c:	00000000 	.word	0x00000000

08002140 <chThdEnqueueTimeoutS>:
  if (TIME_IMMEDIATE == timeout) {
 8002140:	b161      	cbz	r1, 800215c <chThdEnqueueTimeoutS+0x1c>
  queue_insert(currp, tqp);
 8002142:	4b08      	ldr	r3, [pc, #32]	; (8002164 <chThdEnqueueTimeoutS+0x24>)
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, sysinterval_t timeout) {
 8002144:	b410      	push	{r4}
 8002146:	4602      	mov	r2, r0
  tp->queue.prev             = tqp->prev;
 8002148:	6844      	ldr	r4, [r0, #4]
  queue_insert(currp, tqp);
 800214a:	699b      	ldr	r3, [r3, #24]
  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 800214c:	2004      	movs	r0, #4
 800214e:	e9c3 2400 	strd	r2, r4, [r3]
  tp->queue.prev->queue.next = tp;
 8002152:	6023      	str	r3, [r4, #0]
  tqp->prev                  = tp;
 8002154:	6053      	str	r3, [r2, #4]
}
 8002156:	bc10      	pop	{r4}
  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 8002158:	f7ff be9a 	b.w	8001e90 <chSchGoSleepTimeoutS>
}
 800215c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002160:	4770      	bx	lr
 8002162:	bf00      	nop
 8002164:	200008f0 	.word	0x200008f0
	...

08002170 <oqPutTimeout>:
 * @retval MSG_TIMEOUT  if the specified time expired.
 * @retval MSG_RESET    if the queue has been reset.
 *
 * @api
 */
msg_t oqPutTimeout(output_queue_t *oqp, uint8_t b, sysinterval_t timeout) {
 8002170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002172:	4604      	mov	r4, r0
 8002174:	460f      	mov	r7, r1
 8002176:	4616      	mov	r6, r2
 8002178:	2320      	movs	r3, #32
 800217a:	f383 8811 	msr	BASEPRI, r3
 800217e:	e003      	b.n	8002188 <oqPutTimeout+0x18>
 * @sclass
 */
static inline msg_t osalThreadEnqueueTimeoutS(threads_queue_t *tqp,
                                              sysinterval_t timeout) {

  return chThdEnqueueTimeoutS(tqp, timeout);
 8002180:	f7ff ffde 	bl	8002140 <chThdEnqueueTimeoutS>
  osalSysLock();

  /* Waiting until there is a slot available or a timeout occurs.*/
  while (oqIsFullI(oqp)) {
    msg_t msg = osalThreadEnqueueTimeoutS(&oqp->q_waiting, timeout);
    if (msg < MSG_OK) {
 8002184:	2800      	cmp	r0, #0
 8002186:	db18      	blt.n	80021ba <oqPutTimeout+0x4a>
  while (oqIsFullI(oqp)) {
 8002188:	68a5      	ldr	r5, [r4, #8]
 800218a:	4631      	mov	r1, r6
 800218c:	4620      	mov	r0, r4
 800218e:	2d00      	cmp	r5, #0
 8002190:	d0f6      	beq.n	8002180 <oqPutTimeout+0x10>
    }
  }

  /* Putting the character into the queue.*/
  oqp->q_counter--;
  *oqp->q_wrptr++ = b;
 8002192:	6962      	ldr	r2, [r4, #20]
  oqp->q_counter--;
 8002194:	68a3      	ldr	r3, [r4, #8]
  *oqp->q_wrptr++ = b;
 8002196:	1c51      	adds	r1, r2, #1
  oqp->q_counter--;
 8002198:	3b01      	subs	r3, #1
  *oqp->q_wrptr++ = b;
 800219a:	6161      	str	r1, [r4, #20]
  oqp->q_counter--;
 800219c:	60a3      	str	r3, [r4, #8]
  *oqp->q_wrptr++ = b;
 800219e:	7017      	strb	r7, [r2, #0]
  if (oqp->q_wrptr >= oqp->q_top) {
 80021a0:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 80021a4:	429a      	cmp	r2, r3
    oqp->q_wrptr = oqp->q_buffer;
 80021a6:	bf24      	itt	cs
 80021a8:	68e3      	ldrcs	r3, [r4, #12]
 80021aa:	6163      	strcs	r3, [r4, #20]
  }

  /* Inform the low side that the queue has at least one character available.*/
  if (oqp->q_notify != NULL) {
 80021ac:	69e3      	ldr	r3, [r4, #28]
 80021ae:	b103      	cbz	r3, 80021b2 <oqPutTimeout+0x42>
    oqp->q_notify(oqp);
 80021b0:	4798      	blx	r3
 80021b2:	2000      	movs	r0, #0
 80021b4:	f380 8811 	msr	BASEPRI, r0
  }

  osalSysUnlock();

  return MSG_OK;
}
 80021b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80021ba:	f385 8811 	msr	BASEPRI, r5
 80021be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080021c0 <_putt>:
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, timeout);
 80021c0:	3030      	adds	r0, #48	; 0x30
 80021c2:	f7ff bfd5 	b.w	8002170 <oqPutTimeout>
 80021c6:	bf00      	nop
	...

080021d0 <_put>:
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, TIME_INFINITE);
 80021d0:	3030      	adds	r0, #48	; 0x30
 80021d2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80021d6:	f7ff bfcb 	b.w	8002170 <oqPutTimeout>
 80021da:	bf00      	nop
 80021dc:	0000      	movs	r0, r0
	...

080021e0 <iqGetTimeout>:
msg_t iqGetTimeout(input_queue_t *iqp, sysinterval_t timeout) {
 80021e0:	b570      	push	{r4, r5, r6, lr}
 80021e2:	2320      	movs	r3, #32
 80021e4:	4604      	mov	r4, r0
 80021e6:	460e      	mov	r6, r1
 80021e8:	f383 8811 	msr	BASEPRI, r3
 80021ec:	e003      	b.n	80021f6 <iqGetTimeout+0x16>
 80021ee:	f7ff ffa7 	bl	8002140 <chThdEnqueueTimeoutS>
    if (msg < MSG_OK) {
 80021f2:	2800      	cmp	r0, #0
 80021f4:	db1a      	blt.n	800222c <iqGetTimeout+0x4c>
  while (iqIsEmptyI(iqp)) {
 80021f6:	68a5      	ldr	r5, [r4, #8]
 80021f8:	4631      	mov	r1, r6
 80021fa:	4620      	mov	r0, r4
 80021fc:	2d00      	cmp	r5, #0
 80021fe:	d0f6      	beq.n	80021ee <iqGetTimeout+0xe>
  b = *iqp->q_rdptr++;
 8002200:	69a1      	ldr	r1, [r4, #24]
  iqp->q_counter--;
 8002202:	68a3      	ldr	r3, [r4, #8]
  if (iqp->q_rdptr >= iqp->q_top) {
 8002204:	6920      	ldr	r0, [r4, #16]
  b = *iqp->q_rdptr++;
 8002206:	1c4a      	adds	r2, r1, #1
  iqp->q_counter--;
 8002208:	3b01      	subs	r3, #1
  if (iqp->q_rdptr >= iqp->q_top) {
 800220a:	4282      	cmp	r2, r0
  iqp->q_counter--;
 800220c:	60a3      	str	r3, [r4, #8]
  b = *iqp->q_rdptr++;
 800220e:	61a2      	str	r2, [r4, #24]
    iqp->q_rdptr = iqp->q_buffer;
 8002210:	bf28      	it	cs
 8002212:	68e3      	ldrcs	r3, [r4, #12]
  b = *iqp->q_rdptr++;
 8002214:	780d      	ldrb	r5, [r1, #0]
    iqp->q_rdptr = iqp->q_buffer;
 8002216:	bf28      	it	cs
 8002218:	61a3      	strcs	r3, [r4, #24]
  if (iqp->q_notify != NULL) {
 800221a:	69e3      	ldr	r3, [r4, #28]
 800221c:	b10b      	cbz	r3, 8002222 <iqGetTimeout+0x42>
    iqp->q_notify(iqp);
 800221e:	4620      	mov	r0, r4
 8002220:	4798      	blx	r3
 8002222:	2300      	movs	r3, #0
 8002224:	f383 8811 	msr	BASEPRI, r3
  return (msg_t)b;
 8002228:	4628      	mov	r0, r5
}
 800222a:	bd70      	pop	{r4, r5, r6, pc}
 800222c:	f385 8811 	msr	BASEPRI, r5
 8002230:	bd70      	pop	{r4, r5, r6, pc}
 8002232:	bf00      	nop
	...

08002240 <_gett>:
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, timeout);
 8002240:	300c      	adds	r0, #12
 8002242:	f7ff bfcd 	b.w	80021e0 <iqGetTimeout>
 8002246:	bf00      	nop
	...

08002250 <_get>:
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, TIME_INFINITE);
 8002250:	300c      	adds	r0, #12
 8002252:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002256:	f7ff bfc3 	b.w	80021e0 <iqGetTimeout>
 800225a:	bf00      	nop
 800225c:	0000      	movs	r0, r0
	...

08002260 <chThdSleep>:
void chThdSleep(sysinterval_t time) {
 8002260:	b508      	push	{r3, lr}
 8002262:	4601      	mov	r1, r0
 8002264:	2320      	movs	r3, #32
 8002266:	f383 8811 	msr	BASEPRI, r3
  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, ticks);
 800226a:	2008      	movs	r0, #8
 800226c:	f7ff fe10 	bl	8001e90 <chSchGoSleepTimeoutS>
 8002270:	2300      	movs	r3, #0
 8002272:	f383 8811 	msr	BASEPRI, r3
}
 8002276:	bd08      	pop	{r3, pc}
	...

08002280 <test_execute.constprop.1>:
 * @retval false        if no errors occurred.
 * @retval true         if one or more tests failed.
 *
 * @api
 */
msg_t test_execute(BaseSequentialStream *stream, const testsuite_t *tsp) {
 8002280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002284:	4681      	mov	r9, r0
  int tseq, tcase;

  test_chp = stream;
 8002286:	4c9e      	ldr	r4, [pc, #632]	; (8002500 <test_execute.constprop.1+0x280>)
 8002288:	4b9e      	ldr	r3, [pc, #632]	; (8002504 <test_execute.constprop.1+0x284>)
  test_println("");
 800228a:	489f      	ldr	r0, [pc, #636]	; (8002508 <test_execute.constprop.1+0x288>)
  test_chp = stream;
 800228c:	6023      	str	r3, [r4, #0]
msg_t test_execute(BaseSequentialStream *stream, const testsuite_t *tsp) {
 800228e:	b083      	sub	sp, #12
  test_println("");
 8002290:	f7fe fb96 	bl	80009c0 <test_println>
  if (tsp->name != NULL) {
 8002294:	f8d9 3000 	ldr.w	r3, [r9]
 8002298:	2b00      	cmp	r3, #0
 800229a:	f000 8189 	beq.w	80025b0 <test_execute.constprop.1+0x330>
 800229e:	4d9b      	ldr	r5, [pc, #620]	; (800250c <test_execute.constprop.1+0x28c>)
  while (*msgp)
 80022a0:	212a      	movs	r1, #42	; 0x2a
    streamPut(test_chp, *msgp++);
 80022a2:	6820      	ldr	r0, [r4, #0]
 80022a4:	6803      	ldr	r3, [r0, #0]
 80022a6:	68db      	ldr	r3, [r3, #12]
 80022a8:	4798      	blx	r3
  while (*msgp)
 80022aa:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 80022ae:	2900      	cmp	r1, #0
 80022b0:	d1f7      	bne.n	80022a2 <test_execute.constprop.1+0x22>
    test_print("*** ");
    test_println(tsp->name);
 80022b2:	f8d9 0000 	ldr.w	r0, [r9]
 80022b6:	f7fe fb83 	bl	80009c0 <test_println>
  }
  else {
    test_println("*** Test Suite");
  }
  test_println("***");
 80022ba:	4895      	ldr	r0, [pc, #596]	; (8002510 <test_execute.constprop.1+0x290>)
 80022bc:	4d95      	ldr	r5, [pc, #596]	; (8002514 <test_execute.constprop.1+0x294>)
 80022be:	f7fe fb7f 	bl	80009c0 <test_println>
  while (*msgp)
 80022c2:	212a      	movs	r1, #42	; 0x2a
    streamPut(test_chp, *msgp++);
 80022c4:	6820      	ldr	r0, [r4, #0]
 80022c6:	6803      	ldr	r3, [r0, #0]
 80022c8:	68db      	ldr	r3, [r3, #12]
 80022ca:	4798      	blx	r3
  while (*msgp)
 80022cc:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 80022d0:	2900      	cmp	r1, #0
 80022d2:	d1f7      	bne.n	80022c4 <test_execute.constprop.1+0x44>
  test_print("*** Compiled:     ");
  test_println(__DATE__ " - " __TIME__);
 80022d4:	4890      	ldr	r0, [pc, #576]	; (8002518 <test_execute.constprop.1+0x298>)
 80022d6:	4d91      	ldr	r5, [pc, #580]	; (800251c <test_execute.constprop.1+0x29c>)
 80022d8:	f7fe fb72 	bl	80009c0 <test_println>
  while (*msgp)
 80022dc:	212a      	movs	r1, #42	; 0x2a
    streamPut(test_chp, *msgp++);
 80022de:	6820      	ldr	r0, [r4, #0]
 80022e0:	6803      	ldr	r3, [r0, #0]
 80022e2:	68db      	ldr	r3, [r3, #12]
 80022e4:	4798      	blx	r3
  while (*msgp)
 80022e6:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 80022ea:	2900      	cmp	r1, #0
 80022ec:	d1f7      	bne.n	80022de <test_execute.constprop.1+0x5e>
#if defined(PLATFORM_NAME)
  test_print("*** Platform:     ");
  test_println(PLATFORM_NAME);
 80022ee:	488c      	ldr	r0, [pc, #560]	; (8002520 <test_execute.constprop.1+0x2a0>)
 80022f0:	4d8c      	ldr	r5, [pc, #560]	; (8002524 <test_execute.constprop.1+0x2a4>)
 80022f2:	f7fe fb65 	bl	80009c0 <test_println>
  while (*msgp)
 80022f6:	212a      	movs	r1, #42	; 0x2a
    streamPut(test_chp, *msgp++);
 80022f8:	6820      	ldr	r0, [r4, #0]
 80022fa:	6803      	ldr	r3, [r0, #0]
 80022fc:	68db      	ldr	r3, [r3, #12]
 80022fe:	4798      	blx	r3
  while (*msgp)
 8002300:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8002304:	2900      	cmp	r1, #0
 8002306:	d1f7      	bne.n	80022f8 <test_execute.constprop.1+0x78>
#endif
#if defined(BOARD_NAME)
  test_print("*** Test Board:   ");
  test_println(BOARD_NAME);
 8002308:	4887      	ldr	r0, [pc, #540]	; (8002528 <test_execute.constprop.1+0x2a8>)
 800230a:	9101      	str	r1, [sp, #4]
 800230c:	f7fe fb58 	bl	80009c0 <test_println>
#endif
#if defined(TEST_REPORT_HOOK_HEADER)
  TEST_REPORT_HOOK_HEADER
#endif
  test_println("");
 8002310:	487d      	ldr	r0, [pc, #500]	; (8002508 <test_execute.constprop.1+0x288>)
  test_tokp = test_tokens_buffer;
 8002312:	4f86      	ldr	r7, [pc, #536]	; (800252c <test_execute.constprop.1+0x2ac>)
  test_println("");
 8002314:	f7fe fb54 	bl	80009c0 <test_println>

  test_global_fail = false;
 8002318:	4b85      	ldr	r3, [pc, #532]	; (8002530 <test_execute.constprop.1+0x2b0>)
  tseq = 0;
 800231a:	9901      	ldr	r1, [sp, #4]
  test_global_fail = false;
 800231c:	7019      	strb	r1, [r3, #0]
 800231e:	f8d9 3004 	ldr.w	r3, [r9, #4]
  tseq = 0;
 8002322:	468b      	mov	fp, r1
  while (tsp->sequences[tseq] != NULL) {
 8002324:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 8002328:	ea4f 068b 	mov.w	r6, fp, lsl #2
 800232c:	2b00      	cmp	r3, #0
 800232e:	f000 811d 	beq.w	800256c <test_execute.constprop.1+0x2ec>
 8002332:	254c      	movs	r5, #76	; 0x4c
    streamPut(test_chp, '=');
 8002334:	6820      	ldr	r0, [r4, #0]
 8002336:	6803      	ldr	r3, [r0, #0]
 8002338:	213d      	movs	r1, #61	; 0x3d
 800233a:	68db      	ldr	r3, [r3, #12]
 800233c:	4798      	blx	r3
  for (i = 0; i < 76; i++)
 800233e:	3d01      	subs	r5, #1
 8002340:	d1f8      	bne.n	8002334 <test_execute.constprop.1+0xb4>
  streamWrite(test_chp, (const uint8_t *)"\r\n", 2);
 8002342:	6820      	ldr	r0, [r4, #0]
 8002344:	497b      	ldr	r1, [pc, #492]	; (8002534 <test_execute.constprop.1+0x2b4>)
 8002346:	6803      	ldr	r3, [r0, #0]
 8002348:	4d7b      	ldr	r5, [pc, #492]	; (8002538 <test_execute.constprop.1+0x2b8>)
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	2202      	movs	r2, #2
 800234e:	4798      	blx	r3
  while (*msgp)
 8002350:	213d      	movs	r1, #61	; 0x3d
    streamPut(test_chp, *msgp++);
 8002352:	6820      	ldr	r0, [r4, #0]
 8002354:	6803      	ldr	r3, [r0, #0]
 8002356:	68db      	ldr	r3, [r3, #12]
 8002358:	4798      	blx	r3
  while (*msgp)
 800235a:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 800235e:	2900      	cmp	r1, #0
 8002360:	d1f7      	bne.n	8002352 <test_execute.constprop.1+0xd2>
#if TEST_SHOW_SEQUENCES == TRUE
    print_fat_line();
    test_print("=== Test Sequence ");
    test_printn(tseq + 1);
 8002362:	f10b 0b01 	add.w	fp, fp, #1
 8002366:	4658      	mov	r0, fp
 8002368:	4d74      	ldr	r5, [pc, #464]	; (800253c <test_execute.constprop.1+0x2bc>)
 800236a:	f7fe fad9 	bl	8000920 <test_printn>
  while (*msgp)
 800236e:	2120      	movs	r1, #32
    streamPut(test_chp, *msgp++);
 8002370:	6820      	ldr	r0, [r4, #0]
 8002372:	6803      	ldr	r3, [r0, #0]
 8002374:	68db      	ldr	r3, [r3, #12]
 8002376:	4798      	blx	r3
  while (*msgp)
 8002378:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 800237c:	2900      	cmp	r1, #0
 800237e:	d1f7      	bne.n	8002370 <test_execute.constprop.1+0xf0>
    test_print(" (");
    test_print(tsp->sequences[tseq]->name);
 8002380:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8002384:	599b      	ldr	r3, [r3, r6]
 8002386:	681d      	ldr	r5, [r3, #0]
  while (*msgp)
 8002388:	7829      	ldrb	r1, [r5, #0]
 800238a:	b139      	cbz	r1, 800239c <test_execute.constprop.1+0x11c>
    streamPut(test_chp, *msgp++);
 800238c:	6820      	ldr	r0, [r4, #0]
 800238e:	6803      	ldr	r3, [r0, #0]
 8002390:	68db      	ldr	r3, [r3, #12]
 8002392:	4798      	blx	r3
  while (*msgp)
 8002394:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8002398:	2900      	cmp	r1, #0
 800239a:	d1f7      	bne.n	800238c <test_execute.constprop.1+0x10c>
    test_println(")");
 800239c:	4868      	ldr	r0, [pc, #416]	; (8002540 <test_execute.constprop.1+0x2c0>)
 800239e:	f7fe fb0f 	bl	80009c0 <test_println>
#endif
    tcase = 0;
 80023a2:	2500      	movs	r5, #0
    while (tsp->sequences[tseq]->cases[tcase] != NULL) {
 80023a4:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80023a8:	599a      	ldr	r2, [r3, r6]
 80023aa:	6852      	ldr	r2, [r2, #4]
 80023ac:	f852 2025 	ldr.w	r2, [r2, r5, lsl #2]
 80023b0:	ea4f 0885 	mov.w	r8, r5, lsl #2
 80023b4:	2a00      	cmp	r2, #0
 80023b6:	d0b5      	beq.n	8002324 <test_execute.constprop.1+0xa4>
      print_line();
 80023b8:	f8df a19c 	ldr.w	sl, [pc, #412]	; 8002558 <test_execute.constprop.1+0x2d8>
 80023bc:	f7fe fb88 	bl	8000ad0 <print_line>
  while (*msgp)
 80023c0:	212d      	movs	r1, #45	; 0x2d
    streamPut(test_chp, *msgp++);
 80023c2:	6820      	ldr	r0, [r4, #0]
 80023c4:	6803      	ldr	r3, [r0, #0]
 80023c6:	68db      	ldr	r3, [r3, #12]
 80023c8:	4798      	blx	r3
  while (*msgp)
 80023ca:	f81a 1f01 	ldrb.w	r1, [sl, #1]!
 80023ce:	2900      	cmp	r1, #0
 80023d0:	d1f7      	bne.n	80023c2 <test_execute.constprop.1+0x142>
      test_print("--- Test Case ");
      test_printn(tseq + 1);
 80023d2:	4658      	mov	r0, fp
 80023d4:	f7fe faa4 	bl	8000920 <test_printn>
    streamPut(test_chp, *msgp++);
 80023d8:	6820      	ldr	r0, [r4, #0]
      test_print(".");
      test_printn(tcase + 1);
 80023da:	f8df a160 	ldr.w	sl, [pc, #352]	; 800253c <test_execute.constprop.1+0x2bc>
    streamPut(test_chp, *msgp++);
 80023de:	6803      	ldr	r3, [r0, #0]
 80023e0:	212e      	movs	r1, #46	; 0x2e
 80023e2:	68db      	ldr	r3, [r3, #12]
      test_printn(tcase + 1);
 80023e4:	3501      	adds	r5, #1
    streamPut(test_chp, *msgp++);
 80023e6:	4798      	blx	r3
      test_printn(tcase + 1);
 80023e8:	4628      	mov	r0, r5
 80023ea:	f7fe fa99 	bl	8000920 <test_printn>
  while (*msgp)
 80023ee:	2120      	movs	r1, #32
    streamPut(test_chp, *msgp++);
 80023f0:	6820      	ldr	r0, [r4, #0]
 80023f2:	6803      	ldr	r3, [r0, #0]
 80023f4:	68db      	ldr	r3, [r3, #12]
 80023f6:	4798      	blx	r3
  while (*msgp)
 80023f8:	f81a 1f01 	ldrb.w	r1, [sl, #1]!
 80023fc:	2900      	cmp	r1, #0
 80023fe:	d1f7      	bne.n	80023f0 <test_execute.constprop.1+0x170>
      test_print(" (");
      test_print(tsp->sequences[tseq]->cases[tcase]->name);
 8002400:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8002404:	599b      	ldr	r3, [r3, r6]
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	f853 3008 	ldr.w	r3, [r3, r8]
 800240c:	f8d3 a000 	ldr.w	sl, [r3]
  while (*msgp)
 8002410:	f89a 1000 	ldrb.w	r1, [sl]
 8002414:	b139      	cbz	r1, 8002426 <test_execute.constprop.1+0x1a6>
    streamPut(test_chp, *msgp++);
 8002416:	6820      	ldr	r0, [r4, #0]
 8002418:	6803      	ldr	r3, [r0, #0]
 800241a:	68db      	ldr	r3, [r3, #12]
 800241c:	4798      	blx	r3
  while (*msgp)
 800241e:	f81a 1f01 	ldrb.w	r1, [sl, #1]!
 8002422:	2900      	cmp	r1, #0
 8002424:	d1f7      	bne.n	8002416 <test_execute.constprop.1+0x196>
      test_println(")");
 8002426:	4846      	ldr	r0, [pc, #280]	; (8002540 <test_execute.constprop.1+0x2c0>)
  test_local_fail = false;
 8002428:	f8df a130 	ldr.w	sl, [pc, #304]	; 800255c <test_execute.constprop.1+0x2dc>
      test_println(")");
 800242c:	f7fe fac8 	bl	80009c0 <test_println>
  chThdSleep(delay);
 8002430:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002434:	f7ff ff14 	bl	8002260 <chThdSleep>
#if TEST_DELAY_BETWEEN_TESTS > 0
      osalThreadSleepMilliseconds(TEST_DELAY_BETWEEN_TESTS);
#endif
      execute_test(tsp->sequences[tseq]->cases[tcase]);
 8002438:	f8d9 3004 	ldr.w	r3, [r9, #4]
  test_tokp = test_tokens_buffer;
 800243c:	4a41      	ldr	r2, [pc, #260]	; (8002544 <test_execute.constprop.1+0x2c4>)
      execute_test(tsp->sequences[tseq]->cases[tcase]);
 800243e:	599b      	ldr	r3, [r3, r6]
  test_tokp = test_tokens_buffer;
 8002440:	603a      	str	r2, [r7, #0]
      execute_test(tsp->sequences[tseq]->cases[tcase]);
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	f853 8008 	ldr.w	r8, [r3, r8]
  if (tcp->setup != NULL)
 8002448:	f8d8 3004 	ldr.w	r3, [r8, #4]
  test_local_fail = false;
 800244c:	2200      	movs	r2, #0
 800244e:	f88a 2000 	strb.w	r2, [sl]
  if (tcp->setup != NULL)
 8002452:	b103      	cbz	r3, 8002456 <test_execute.constprop.1+0x1d6>
    tcp->setup();
 8002454:	4798      	blx	r3
  tcp->execute();
 8002456:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800245a:	4798      	blx	r3
  if (tcp->teardown != NULL)
 800245c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8002460:	b103      	cbz	r3, 8002464 <test_execute.constprop.1+0x1e4>
    tcp->teardown();
 8002462:	4798      	blx	r3
      if (test_local_fail) {
 8002464:	f89a 3000 	ldrb.w	r3, [sl]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d044      	beq.n	80024f6 <test_execute.constprop.1+0x276>
 800246c:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 8002560 <test_execute.constprop.1+0x2e0>
  while (*msgp)
 8002470:	212d      	movs	r1, #45	; 0x2d
    streamPut(test_chp, *msgp++);
 8002472:	6820      	ldr	r0, [r4, #0]
 8002474:	6803      	ldr	r3, [r0, #0]
 8002476:	68db      	ldr	r3, [r3, #12]
 8002478:	4798      	blx	r3
  while (*msgp)
 800247a:	f818 1f01 	ldrb.w	r1, [r8, #1]!
 800247e:	2900      	cmp	r1, #0
 8002480:	d1f7      	bne.n	8002472 <test_execute.constprop.1+0x1f2>
        test_print("--- Result: FAILURE (#");
        test_printn(test_step);
 8002482:	4b31      	ldr	r3, [pc, #196]	; (8002548 <test_execute.constprop.1+0x2c8>)
 8002484:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 8002564 <test_execute.constprop.1+0x2e4>
 8002488:	6818      	ldr	r0, [r3, #0]
 800248a:	f7fe fa49 	bl	8000920 <test_printn>
  while (*msgp)
 800248e:	2120      	movs	r1, #32
    streamPut(test_chp, *msgp++);
 8002490:	6820      	ldr	r0, [r4, #0]
 8002492:	6803      	ldr	r3, [r0, #0]
 8002494:	68db      	ldr	r3, [r3, #12]
 8002496:	4798      	blx	r3
  while (*msgp)
 8002498:	f818 1f01 	ldrb.w	r1, [r8, #1]!
 800249c:	2900      	cmp	r1, #0
 800249e:	d1f7      	bne.n	8002490 <test_execute.constprop.1+0x210>
  while (cp < test_tokp)
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	4a28      	ldr	r2, [pc, #160]	; (8002544 <test_execute.constprop.1+0x2c4>)
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d909      	bls.n	80024bc <test_execute.constprop.1+0x23c>
  char *cp = test_tokens_buffer;
 80024a8:	4690      	mov	r8, r2
    streamPut(test_chp, *cp++);
 80024aa:	6820      	ldr	r0, [r4, #0]
 80024ac:	f818 1b01 	ldrb.w	r1, [r8], #1
 80024b0:	6803      	ldr	r3, [r0, #0]
 80024b2:	68db      	ldr	r3, [r3, #12]
 80024b4:	4798      	blx	r3
  while (cp < test_tokp)
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	4598      	cmp	r8, r3
 80024ba:	d3f6      	bcc.n	80024aa <test_execute.constprop.1+0x22a>
  while (*msgp)
 80024bc:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 8002568 <test_execute.constprop.1+0x2e8>
 80024c0:	215d      	movs	r1, #93	; 0x5d
    streamPut(test_chp, *msgp++);
 80024c2:	6820      	ldr	r0, [r4, #0]
 80024c4:	6803      	ldr	r3, [r0, #0]
 80024c6:	68db      	ldr	r3, [r3, #12]
 80024c8:	4798      	blx	r3
  while (*msgp)
 80024ca:	f818 1f01 	ldrb.w	r1, [r8, #1]!
 80024ce:	2900      	cmp	r1, #0
 80024d0:	d1f7      	bne.n	80024c2 <test_execute.constprop.1+0x242>
        test_print(" [");
        print_tokens();
        test_print("] \"");
        test_print(test_failure_message);
 80024d2:	4b1e      	ldr	r3, [pc, #120]	; (800254c <test_execute.constprop.1+0x2cc>)
 80024d4:	f8d3 8000 	ldr.w	r8, [r3]
  while (*msgp)
 80024d8:	f898 1000 	ldrb.w	r1, [r8]
 80024dc:	b139      	cbz	r1, 80024ee <test_execute.constprop.1+0x26e>
    streamPut(test_chp, *msgp++);
 80024de:	6820      	ldr	r0, [r4, #0]
 80024e0:	6803      	ldr	r3, [r0, #0]
 80024e2:	68db      	ldr	r3, [r3, #12]
 80024e4:	4798      	blx	r3
  while (*msgp)
 80024e6:	f818 1f01 	ldrb.w	r1, [r8, #1]!
 80024ea:	2900      	cmp	r1, #0
 80024ec:	d1f7      	bne.n	80024de <test_execute.constprop.1+0x25e>
        test_println("\")");
 80024ee:	4818      	ldr	r0, [pc, #96]	; (8002550 <test_execute.constprop.1+0x2d0>)
 80024f0:	f7fe fa66 	bl	80009c0 <test_println>
 80024f4:	e756      	b.n	80023a4 <test_execute.constprop.1+0x124>
      }
      else {
        test_println("--- Result: SUCCESS");
 80024f6:	4817      	ldr	r0, [pc, #92]	; (8002554 <test_execute.constprop.1+0x2d4>)
 80024f8:	f7fe fa62 	bl	80009c0 <test_println>
 80024fc:	e752      	b.n	80023a4 <test_execute.constprop.1+0x124>
 80024fe:	bf00      	nop
 8002500:	200011a8 	.word	0x200011a8
 8002504:	20000890 	.word	0x20000890
 8002508:	08007bd0 	.word	0x08007bd0
 800250c:	0800971c 	.word	0x0800971c
 8002510:	080097c8 	.word	0x080097c8
 8002514:	08009724 	.word	0x08009724
 8002518:	080097cc 	.word	0x080097cc
 800251c:	08009738 	.word	0x08009738
 8002520:	080097e4 	.word	0x080097e4
 8002524:	0800974c 	.word	0x0800974c
 8002528:	08009800 	.word	0x08009800
 800252c:	20001268 	.word	0x20001268
 8002530:	200011b0 	.word	0x200011b0
 8002534:	08009850 	.word	0x08009850
 8002538:	08009760 	.word	0x08009760
 800253c:	08009774 	.word	0x08009774
 8002540:	0800982c 	.word	0x0800982c
 8002544:	20001258 	.word	0x20001258
 8002548:	20001254 	.word	0x20001254
 800254c:	200011ac 	.word	0x200011ac
 8002550:	08009830 	.word	0x08009830
 8002554:	08009834 	.word	0x08009834
 8002558:	08009778 	.word	0x08009778
 800255c:	20001250 	.word	0x20001250
 8002560:	08009788 	.word	0x08009788
 8002564:	080097a0 	.word	0x080097a0
 8002568:	080097a4 	.word	0x080097a4
      }
      tcase++;
    }
    tseq++;
  }
  print_line();
 800256c:	f7fe fab0 	bl	8000ad0 <print_line>
  test_println("");
 8002570:	4d11      	ldr	r5, [pc, #68]	; (80025b8 <test_execute.constprop.1+0x338>)
 8002572:	4812      	ldr	r0, [pc, #72]	; (80025bc <test_execute.constprop.1+0x33c>)
 8002574:	f7fe fa24 	bl	80009c0 <test_println>
  while (*msgp)
 8002578:	2146      	movs	r1, #70	; 0x46
    streamPut(test_chp, *msgp++);
 800257a:	6820      	ldr	r0, [r4, #0]
 800257c:	6803      	ldr	r3, [r0, #0]
 800257e:	68db      	ldr	r3, [r3, #12]
 8002580:	4798      	blx	r3
  while (*msgp)
 8002582:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8002586:	2900      	cmp	r1, #0
 8002588:	d1f7      	bne.n	800257a <test_execute.constprop.1+0x2fa>
  test_print("Final result: ");
  if (test_global_fail)
 800258a:	4b0d      	ldr	r3, [pc, #52]	; (80025c0 <test_execute.constprop.1+0x340>)
 800258c:	781b      	ldrb	r3, [r3, #0]
 800258e:	b93b      	cbnz	r3, 80025a0 <test_execute.constprop.1+0x320>
    test_println("FAILURE");
  else
    test_println("SUCCESS");
 8002590:	480c      	ldr	r0, [pc, #48]	; (80025c4 <test_execute.constprop.1+0x344>)
 8002592:	f7fe fa15 	bl	80009c0 <test_println>
#if defined(TEST_REPORT_HOOK_END)
  TEST_REPORT_HOOK_END
#endif

  return (msg_t)test_global_fail;
}
 8002596:	4b0a      	ldr	r3, [pc, #40]	; (80025c0 <test_execute.constprop.1+0x340>)
 8002598:	7818      	ldrb	r0, [r3, #0]
 800259a:	b003      	add	sp, #12
 800259c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    test_println("FAILURE");
 80025a0:	4809      	ldr	r0, [pc, #36]	; (80025c8 <test_execute.constprop.1+0x348>)
 80025a2:	f7fe fa0d 	bl	80009c0 <test_println>
}
 80025a6:	4b06      	ldr	r3, [pc, #24]	; (80025c0 <test_execute.constprop.1+0x340>)
 80025a8:	7818      	ldrb	r0, [r3, #0]
 80025aa:	b003      	add	sp, #12
 80025ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    test_println("*** Test Suite");
 80025b0:	4806      	ldr	r0, [pc, #24]	; (80025cc <test_execute.constprop.1+0x34c>)
 80025b2:	f7fe fa05 	bl	80009c0 <test_println>
 80025b6:	e680      	b.n	80022ba <test_execute.constprop.1+0x3a>
 80025b8:	080097a8 	.word	0x080097a8
 80025bc:	08007bd0 	.word	0x08007bd0
 80025c0:	200011b0 	.word	0x200011b0
 80025c4:	08009840 	.word	0x08009840
 80025c8:	08009848 	.word	0x08009848
 80025cc:	080097b8 	.word	0x080097b8

080025d0 <Thread1>:

/*
 * Green LED blinker thread, times are in milliseconds.
 */
static THD_WORKING_AREA(waThread1, 128);
static THD_FUNCTION(Thread1, arg) {
 80025d0:	b508      	push	{r3, lr}
 * @api
 */
static inline void chRegSetThreadName(const char *name) {

#if CH_CFG_USE_REGISTRY == TRUE
  ch.rlist.current->name = name;
 80025d2:	4b09      	ldr	r3, [pc, #36]	; (80025f8 <Thread1+0x28>)
 80025d4:	4a09      	ldr	r2, [pc, #36]	; (80025fc <Thread1+0x2c>)
 80025d6:	699b      	ldr	r3, [r3, #24]

  (void)arg;
  chRegSetThreadName("blinker");
  while (true) {
    palClearLine(LINE_LED_GREEN);
 80025d8:	4c09      	ldr	r4, [pc, #36]	; (8002600 <Thread1+0x30>)
 80025da:	619a      	str	r2, [r3, #24]
 80025dc:	2508      	movs	r5, #8
 80025de:	462e      	mov	r6, r5
 80025e0:	8366      	strh	r6, [r4, #26]
    chThdSleepMilliseconds(500);
 80025e2:	f241 3088 	movw	r0, #5000	; 0x1388
 80025e6:	f7ff fe3b 	bl	8002260 <chThdSleep>
    palSetLine(LINE_LED_GREEN);
 80025ea:	8325      	strh	r5, [r4, #24]
    chThdSleepMilliseconds(500);
 80025ec:	f241 3088 	movw	r0, #5000	; 0x1388
 80025f0:	f7ff fe36 	bl	8002260 <chThdSleep>
 80025f4:	e7f4      	b.n	80025e0 <Thread1+0x10>
 80025f6:	bf00      	nop
 80025f8:	200008f0 	.word	0x200008f0
 80025fc:	080076a4 	.word	0x080076a4
 8002600:	48000400 	.word	0x48000400
	...

08002610 <rt_test_003_001_execute>:
 * - [3.1.5] Function chThdSleepUntil() is tested with a timeline of
 *   "now" + 100 ticks.
 * .
 */

static void rt_test_003_001_execute(void) {
 8002610:	b570      	push	{r4, r5, r6, lr}
  systime_t time;

  /* [3.1.1] The current system time is read then a sleep is performed
     for 100 system ticks and on exit the system time is verified
     again.*/
  test_set_step(1);
 8002612:	4e2b      	ldr	r6, [pc, #172]	; (80026c0 <rt_test_003_001_execute+0xb0>)
 8002614:	2301      	movs	r3, #1
  return (systime_t)STM32_ST_TIM->CNT;
 8002616:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
 800261a:	6033      	str	r3, [r6, #0]
 800261c:	6a6c      	ldr	r4, [r5, #36]	; 0x24
  {
    time = chVTGetSystemTimeX();
    chThdSleep(100);
 800261e:	2064      	movs	r0, #100	; 0x64
 8002620:	f7ff fe1e 	bl	8002260 <chThdSleep>
    test_assert_time_window(chTimeAddX(time, 100),
 8002624:	f104 0167 	add.w	r1, r4, #103	; 0x67
 8002628:	f104 0064 	add.w	r0, r4, #100	; 0x64
 800262c:	f7fd ff10 	bl	8000450 <_test_assert_time_window.constprop.2>
 8002630:	b100      	cbz	r0, 8002634 <rt_test_003_001_execute+0x24>
    chThdSleepUntil(chTimeAddX(time, 100));
    test_assert_time_window(chTimeAddX(time, 100),
                            chTimeAddX(time, 100 + CH_CFG_ST_TIMEDELTA + 1),
                            "out of time window");
  }
}
 8002632:	bd70      	pop	{r4, r5, r6, pc}
  test_set_step(2);
 8002634:	2302      	movs	r3, #2
 8002636:	6033      	str	r3, [r6, #0]
 8002638:	6a6c      	ldr	r4, [r5, #36]	; 0x24
    chThdSleepMicroseconds(100000);
 800263a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800263e:	f7ff fe0f 	bl	8002260 <chThdSleep>
    test_assert_time_window(chTimeAddX(time, TIME_US2I(100000)),
 8002642:	f204 31eb 	addw	r1, r4, #1003	; 0x3eb
 8002646:	f504 707a 	add.w	r0, r4, #1000	; 0x3e8
 800264a:	f7fd ff01 	bl	8000450 <_test_assert_time_window.constprop.2>
 800264e:	2800      	cmp	r0, #0
 8002650:	d1ef      	bne.n	8002632 <rt_test_003_001_execute+0x22>
  test_set_step(3);
 8002652:	2303      	movs	r3, #3
 8002654:	6033      	str	r3, [r6, #0]
 8002656:	6a6c      	ldr	r4, [r5, #36]	; 0x24
    chThdSleepMilliseconds(100);
 8002658:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800265c:	f7ff fe00 	bl	8002260 <chThdSleep>
    test_assert_time_window(chTimeAddX(time, TIME_MS2I(100)),
 8002660:	f204 31eb 	addw	r1, r4, #1003	; 0x3eb
 8002664:	f504 707a 	add.w	r0, r4, #1000	; 0x3e8
 8002668:	f7fd fef2 	bl	8000450 <_test_assert_time_window.constprop.2>
 800266c:	2800      	cmp	r0, #0
 800266e:	d1e0      	bne.n	8002632 <rt_test_003_001_execute+0x22>
  test_set_step(4);
 8002670:	2304      	movs	r3, #4
 8002672:	6033      	str	r3, [r6, #0]
 8002674:	6a6c      	ldr	r4, [r5, #36]	; 0x24
    chThdSleepSeconds(1);
 8002676:	f242 7010 	movw	r0, #10000	; 0x2710
 800267a:	f7ff fdf1 	bl	8002260 <chThdSleep>
    test_assert_time_window(chTimeAddX(time, TIME_S2I(1)),
 800267e:	f504 511c 	add.w	r1, r4, #9984	; 0x2700
 8002682:	4608      	mov	r0, r1
 8002684:	3010      	adds	r0, #16
 8002686:	3113      	adds	r1, #19
 8002688:	f7fd fee2 	bl	8000450 <_test_assert_time_window.constprop.2>
 800268c:	2800      	cmp	r0, #0
 800268e:	d1d0      	bne.n	8002632 <rt_test_003_001_execute+0x22>
  test_set_step(5);
 8002690:	2305      	movs	r3, #5
 8002692:	6033      	str	r3, [r6, #0]
 8002694:	6a6e      	ldr	r6, [r5, #36]	; 0x24
 8002696:	2320      	movs	r3, #32
 8002698:	f106 0464 	add.w	r4, r6, #100	; 0x64
 800269c:	f383 8811 	msr	BASEPRI, r3
 80026a0:	6a69      	ldr	r1, [r5, #36]	; 0x24
  if (interval > (sysinterval_t)0) {
 80026a2:	1a61      	subs	r1, r4, r1
 80026a4:	d002      	beq.n	80026ac <rt_test_003_001_execute+0x9c>
 80026a6:	2008      	movs	r0, #8
 80026a8:	f7ff fbf2 	bl	8001e90 <chSchGoSleepTimeoutS>
 80026ac:	2300      	movs	r3, #0
 80026ae:	f383 8811 	msr	BASEPRI, r3
    test_assert_time_window(chTimeAddX(time, 100),
 80026b2:	f106 0167 	add.w	r1, r6, #103	; 0x67
 80026b6:	4620      	mov	r0, r4
}
 80026b8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    test_assert_time_window(chTimeAddX(time, 100),
 80026bc:	f7fd bec8 	b.w	8000450 <_test_assert_time_window.constprop.2>
 80026c0:	20001254 	.word	0x20001254
	...

080026d0 <test_wait_tick>:
}

/*
 * Delays execution until next system time tick.
 */
systime_t test_wait_tick(void) {
 80026d0:	b508      	push	{r3, lr}

  chThdSleep(1);
 80026d2:	2001      	movs	r0, #1
 80026d4:	f7ff fdc4 	bl	8002260 <chThdSleep>
 80026d8:	2320      	movs	r3, #32
 80026da:	f383 8811 	msr	BASEPRI, r3
 80026de:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80026e2:	2300      	movs	r3, #0
 80026e4:	6a50      	ldr	r0, [r2, #36]	; 0x24
 80026e6:	f383 8811 	msr	BASEPRI, r3
  return chVTGetSystemTime();
}
 80026ea:	bd08      	pop	{r3, pc}
 80026ec:	0000      	movs	r0, r0
	...

080026f0 <rt_test_010_009_execute>:
static void rt_test_010_009_execute(void) {
 80026f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  test_set_step(1);
 80026f4:	f8df b090 	ldr.w	fp, [pc, #144]	; 8002788 <rt_test_010_009_execute+0x98>
      chVTDoSetI(&vt1, 1, tmo, NULL);
 80026f8:	4f1e      	ldr	r7, [pc, #120]	; (8002774 <rt_test_010_009_execute+0x84>)
 80026fa:	4e1f      	ldr	r6, [pc, #124]	; (8002778 <rt_test_010_009_execute+0x88>)
      chVTDoSetI(&vt2, 10000, tmo, NULL);
 80026fc:	4d1f      	ldr	r5, [pc, #124]	; (800277c <rt_test_010_009_execute+0x8c>)
  test_set_step(1);
 80026fe:	2301      	movs	r3, #1
 8002700:	f8cb 3000 	str.w	r3, [fp]
    start = test_wait_tick();
 8002704:	f7ff ffe4 	bl	80026d0 <test_wait_tick>
    n = 0;
 8002708:	2400      	movs	r4, #0
      chVTDoSetI(&vt1, 1, tmo, NULL);
 800270a:	46a2      	mov	sl, r4
    start = test_wait_tick();
 800270c:	4681      	mov	r9, r0
 800270e:	f04f 0820 	mov.w	r8, #32
 8002712:	f388 8811 	msr	BASEPRI, r8
      chVTDoSetI(&vt1, 1, tmo, NULL);
 8002716:	2300      	movs	r3, #0
 8002718:	463a      	mov	r2, r7
 800271a:	4630      	mov	r0, r6
 800271c:	2101      	movs	r1, #1
 800271e:	f7fe fd9f 	bl	8001260 <chVTDoSetI>
      chVTDoSetI(&vt2, 10000, tmo, NULL);
 8002722:	463a      	mov	r2, r7
 8002724:	2300      	movs	r3, #0
 8002726:	f242 7110 	movw	r1, #10000	; 0x2710
 800272a:	4628      	mov	r0, r5
 800272c:	f7fe fd98 	bl	8001260 <chVTDoSetI>
      chVTDoResetI(&vt1);
 8002730:	4630      	mov	r0, r6
 8002732:	f7fe fd55 	bl	80011e0 <chVTDoResetI>
      chVTDoResetI(&vt2);
 8002736:	4628      	mov	r0, r5
 8002738:	f7fe fd52 	bl	80011e0 <chVTDoResetI>
 800273c:	f38a 8811 	msr	BASEPRI, sl
 8002740:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    } while (chVTIsSystemTimeWithinX(start, end));
 8002744:	f242 720f 	movw	r2, #9999	; 0x270f
 8002748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  return (bool)((time - start) < (end - start));
 800274a:	eba3 0309 	sub.w	r3, r3, r9
 800274e:	4293      	cmp	r3, r2
      n++;
 8002750:	f104 0401 	add.w	r4, r4, #1
    } while (chVTIsSystemTimeWithinX(start, end));
 8002754:	d9dd      	bls.n	8002712 <rt_test_010_009_execute+0x22>
  test_set_step(2);
 8002756:	2302      	movs	r3, #2
    test_print("--- Score : ");
 8002758:	4809      	ldr	r0, [pc, #36]	; (8002780 <rt_test_010_009_execute+0x90>)
  test_set_step(2);
 800275a:	f8cb 3000 	str.w	r3, [fp]
    test_print("--- Score : ");
 800275e:	f7fe f94f 	bl	8000a00 <test_print>
    test_printn(n * 2);
 8002762:	0060      	lsls	r0, r4, #1
 8002764:	f7fe f8dc 	bl	8000920 <test_printn>
    test_println(" timers/S");
 8002768:	4806      	ldr	r0, [pc, #24]	; (8002784 <rt_test_010_009_execute+0x94>)
}
 800276a:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    test_println(" timers/S");
 800276e:	f7fe b927 	b.w	80009c0 <test_println>
 8002772:	bf00      	nop
 8002774:	08000611 	.word	0x08000611
 8002778:	20001284 	.word	0x20001284
 800277c:	20001298 	.word	0x20001298
 8002780:	08008bf0 	.word	0x08008bf0
 8002784:	08008c00 	.word	0x08008c00
 8002788:	20001254 	.word	0x20001254
 800278c:	00000000 	.word	0x00000000

08002790 <chMsgWait>:
 *
 * @return              A reference to the thread carrying the message.
 *
 * @api
 */
thread_t *chMsgWait(void) {
 8002790:	b510      	push	{r4, lr}
 8002792:	2320      	movs	r3, #32
 8002794:	f383 8811 	msr	BASEPRI, r3
  thread_t *tp;

  chSysLock();
  if (!chMsgIsPendingI(currp)) {
 8002798:	4c0c      	ldr	r4, [pc, #48]	; (80027cc <chMsgWait+0x3c>)
 800279a:	69a2      	ldr	r2, [r4, #24]
 */
static inline bool chMsgIsPendingI(thread_t *tp) {

  chDbgCheckClassI();

  return (bool)(tp->msgqueue.next != (thread_t *)&tp->msgqueue);
 800279c:	4613      	mov	r3, r2
 800279e:	f853 0f2c 	ldr.w	r0, [r3, #44]!
 80027a2:	4298      	cmp	r0, r3
 80027a4:	d009      	beq.n	80027ba <chMsgWait+0x2a>
  tqp->next             = tp->queue.next;
 80027a6:	6801      	ldr	r1, [r0, #0]
 80027a8:	62d1      	str	r1, [r2, #44]	; 0x2c
    chSchGoSleepS(CH_STATE_WTMSG);
  }
  tp = queue_fifo_remove(&currp->msgqueue);
  tp->state = CH_STATE_SNDMSG;
 80027aa:	220d      	movs	r2, #13
  tqp->next->queue.prev = (thread_t *)tqp;
 80027ac:	604b      	str	r3, [r1, #4]
 80027ae:	2300      	movs	r3, #0
 80027b0:	f880 2020 	strb.w	r2, [r0, #32]
 80027b4:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();

  return tp;
}
 80027b8:	bd10      	pop	{r4, pc}
    chSchGoSleepS(CH_STATE_WTMSG);
 80027ba:	200e      	movs	r0, #14
 80027bc:	f7ff fae0 	bl	8001d80 <chSchGoSleepS>
 80027c0:	69a2      	ldr	r2, [r4, #24]
 80027c2:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
 80027c4:	f102 032c 	add.w	r3, r2, #44	; 0x2c
 80027c8:	e7ed      	b.n	80027a6 <chMsgWait+0x16>
 80027ca:	bf00      	nop
 80027cc:	200008f0 	.word	0x200008f0

080027d0 <bmk_thread1>:
static THD_FUNCTION(bmk_thread1, p) {
 80027d0:	b570      	push	{r4, r5, r6, lr}
 80027d2:	2620      	movs	r6, #32
 80027d4:	2500      	movs	r5, #0
    tp = chMsgWait();
 80027d6:	f7ff ffdb 	bl	8002790 <chMsgWait>
    msg = chMsgGet(tp);
 80027da:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80027dc:	f386 8811 	msr	BASEPRI, r6
 */
static inline void chMsgReleaseS(thread_t *tp, msg_t msg) {

  chDbgCheckClassS();

  chSchWakeupS(tp, msg);
 80027e0:	4621      	mov	r1, r4
 80027e2:	f7ff f9ed 	bl	8001bc0 <chSchWakeupS>
 80027e6:	f385 8811 	msr	BASEPRI, r5
  } while (msg);
 80027ea:	2c00      	cmp	r4, #0
 80027ec:	d1f3      	bne.n	80027d6 <bmk_thread1+0x6>
}
 80027ee:	bd70      	pop	{r4, r5, r6, pc}

080027f0 <chMsgSend>:
  thread_t *ctp = currp;
 80027f0:	4b0e      	ldr	r3, [pc, #56]	; (800282c <chMsgSend+0x3c>)
msg_t chMsgSend(thread_t *tp, msg_t msg) {
 80027f2:	b510      	push	{r4, lr}
 80027f4:	2220      	movs	r2, #32
  thread_t *ctp = currp;
 80027f6:	699c      	ldr	r4, [r3, #24]
 80027f8:	f382 8811 	msr	BASEPRI, r2
  ctp->u.sentmsg = msg;
 80027fc:	6261      	str	r1, [r4, #36]	; 0x24
  tp->queue.prev             = tqp->prev;
 80027fe:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8002800:	6062      	str	r2, [r4, #4]
  msg_insert(ctp, &tp->msgqueue);
 8002802:	f100 012c 	add.w	r1, r0, #44	; 0x2c
  tp->queue.next             = (thread_t *)tqp;
 8002806:	6021      	str	r1, [r4, #0]
  tp->queue.prev->queue.next = tp;
 8002808:	6014      	str	r4, [r2, #0]
  if (tp->state == CH_STATE_WTMSG) {
 800280a:	f890 2020 	ldrb.w	r2, [r0, #32]
  tqp->prev                  = tp;
 800280e:	6304      	str	r4, [r0, #48]	; 0x30
 8002810:	2a0e      	cmp	r2, #14
 8002812:	d007      	beq.n	8002824 <chMsgSend+0x34>
  chSchGoSleepS(CH_STATE_SNDMSGQ);
 8002814:	200c      	movs	r0, #12
 8002816:	f7ff fab3 	bl	8001d80 <chSchGoSleepS>
  msg = ctp->u.rdymsg;
 800281a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800281c:	2300      	movs	r3, #0
 800281e:	f383 8811 	msr	BASEPRI, r3
}
 8002822:	bd10      	pop	{r4, pc}
    (void) chSchReadyI(tp);
 8002824:	f7fe fba4 	bl	8000f70 <chSchReadyI>
 8002828:	e7f4      	b.n	8002814 <chMsgSend+0x24>
 800282a:	bf00      	nop
 800282c:	200008f0 	.word	0x200008f0

08002830 <msg_loop_test>:
NOINLINE static unsigned int msg_loop_test(thread_t *tp) {
 8002830:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002834:	4605      	mov	r5, r0
  start = test_wait_tick();
 8002836:	f7ff ff4b 	bl	80026d0 <test_wait_tick>
  uint32_t n = 0;
 800283a:	2400      	movs	r4, #0
  start = test_wait_tick();
 800283c:	4680      	mov	r8, r0
 800283e:	f04f 4780 	mov.w	r7, #1073741824	; 0x40000000
  } while (chVTIsSystemTimeWithinX(start, end));
 8002842:	f242 760f 	movw	r6, #9999	; 0x270f
    (void)chMsgSend(tp, 1);
 8002846:	2101      	movs	r1, #1
 8002848:	4628      	mov	r0, r5
 800284a:	f7ff ffd1 	bl	80027f0 <chMsgSend>
 800284e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002850:	eba3 0308 	sub.w	r3, r3, r8
  } while (chVTIsSystemTimeWithinX(start, end));
 8002854:	42b3      	cmp	r3, r6
    n++;
 8002856:	f104 0401 	add.w	r4, r4, #1
  } while (chVTIsSystemTimeWithinX(start, end));
 800285a:	d9f4      	bls.n	8002846 <msg_loop_test+0x16>
  (void)chMsgSend(tp, 0);
 800285c:	4628      	mov	r0, r5
 800285e:	2100      	movs	r1, #0
 8002860:	f7ff ffc6 	bl	80027f0 <chMsgSend>
}
 8002864:	4620      	mov	r0, r4
 8002866:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800286a:	bf00      	nop
 800286c:	0000      	movs	r0, r0
	...

08002870 <msg_thread1>:

/****************************************************************************
 * Shared code.
 ****************************************************************************/

static THD_FUNCTION(msg_thread1, p) {
 8002870:	b510      	push	{r4, lr}

  chMsgSend(p, 'A');
 8002872:	2141      	movs	r1, #65	; 0x41
static THD_FUNCTION(msg_thread1, p) {
 8002874:	4604      	mov	r4, r0
  chMsgSend(p, 'A');
 8002876:	f7ff ffbb 	bl	80027f0 <chMsgSend>
  chMsgSend(p, 'B');
 800287a:	4620      	mov	r0, r4
 800287c:	2142      	movs	r1, #66	; 0x42
 800287e:	f7ff ffb7 	bl	80027f0 <chMsgSend>
  chMsgSend(p, 'C');
 8002882:	4620      	mov	r0, r4
 8002884:	2143      	movs	r1, #67	; 0x43
 8002886:	f7ff ffb3 	bl	80027f0 <chMsgSend>
  chMsgSend(p, 'D');
 800288a:	4620      	mov	r0, r4
 800288c:	2144      	movs	r1, #68	; 0x44
}
 800288e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  chMsgSend(p, 'D');
 8002892:	f7ff bfad 	b.w	80027f0 <chMsgSend>
 8002896:	bf00      	nop
	...

080028a0 <chMtxLockS>:
void chMtxLockS(mutex_t *mp) {
 80028a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  thread_t *ctp = currp;
 80028a2:	4a37      	ldr	r2, [pc, #220]	; (8002980 <chMtxLockS+0xe0>)
  if (mp->owner != NULL) {
 80028a4:	6883      	ldr	r3, [r0, #8]
  thread_t *ctp = currp;
 80028a6:	6995      	ldr	r5, [r2, #24]
  if (mp->owner != NULL) {
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d040      	beq.n	800292e <chMtxLockS+0x8e>
      while (tp->prio < ctp->prio) {
 80028ac:	68a9      	ldr	r1, [r5, #8]
 80028ae:	689a      	ldr	r2, [r3, #8]
 80028b0:	4291      	cmp	r1, r2
 80028b2:	4604      	mov	r4, r0
 80028b4:	d907      	bls.n	80028c6 <chMtxLockS+0x26>
        switch (tp->state) {
 80028b6:	f893 2020 	ldrb.w	r2, [r3, #32]
        tp->prio = ctp->prio;
 80028ba:	6099      	str	r1, [r3, #8]
        switch (tp->state) {
 80028bc:	2a06      	cmp	r2, #6
 80028be:	d03b      	beq.n	8002938 <chMtxLockS+0x98>
 80028c0:	2a07      	cmp	r2, #7
 80028c2:	d015      	beq.n	80028f0 <chMtxLockS+0x50>
 80028c4:	b342      	cbz	r2, 8002918 <chMtxLockS+0x78>
      queue_prio_insert(ctp, &mp->queue);
 80028c6:	4626      	mov	r6, r4
 80028c8:	4623      	mov	r3, r4
 80028ca:	e003      	b.n	80028d4 <chMtxLockS+0x34>
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 80028cc:	6899      	ldr	r1, [r3, #8]
 80028ce:	68aa      	ldr	r2, [r5, #8]
 80028d0:	4291      	cmp	r1, r2
 80028d2:	d32a      	bcc.n	800292a <chMtxLockS+0x8a>
    cp = cp->queue.next;
 80028d4:	681b      	ldr	r3, [r3, #0]
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 80028d6:	429c      	cmp	r4, r3
 80028d8:	d1f8      	bne.n	80028cc <chMtxLockS+0x2c>
  tp->queue.prev             = cp->queue.prev;
 80028da:	6873      	ldr	r3, [r6, #4]
      chSchGoSleepS(CH_STATE_WTMTX);
 80028dc:	2006      	movs	r0, #6
 80028de:	e9c5 6300 	strd	r6, r3, [r5]
  tp->queue.prev->queue.next = tp;
 80028e2:	601d      	str	r5, [r3, #0]
  cp->queue.prev             = tp;
 80028e4:	6075      	str	r5, [r6, #4]
      ctp->u.wtmtxp = mp;
 80028e6:	626c      	str	r4, [r5, #36]	; 0x24
}
 80028e8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      chSchGoSleepS(CH_STATE_WTMTX);
 80028ec:	f7ff ba48 	b.w	8001d80 <chSchGoSleepS>
  tp->queue.prev->queue.next = tp->queue.next;
 80028f0:	e9d3 0200 	ldrd	r0, r2, [r3]
 80028f4:	6010      	str	r0, [r2, #0]
          queue_prio_insert(queue_dequeue(tp), &tp->u.wtmtxp->queue);
 80028f6:	6a5e      	ldr	r6, [r3, #36]	; 0x24
  tp->queue.next->queue.prev = tp->queue.prev;
 80028f8:	6818      	ldr	r0, [r3, #0]
 80028fa:	6042      	str	r2, [r0, #4]
 80028fc:	4632      	mov	r2, r6
 80028fe:	e002      	b.n	8002906 <chMtxLockS+0x66>
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 8002900:	6890      	ldr	r0, [r2, #8]
 8002902:	4288      	cmp	r0, r1
 8002904:	d332      	bcc.n	800296c <chMtxLockS+0xcc>
    cp = cp->queue.next;
 8002906:	6812      	ldr	r2, [r2, #0]
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 8002908:	4296      	cmp	r6, r2
 800290a:	d1f9      	bne.n	8002900 <chMtxLockS+0x60>
  tp->queue.prev             = cp->queue.prev;
 800290c:	6872      	ldr	r2, [r6, #4]
 800290e:	e9c3 6200 	strd	r6, r2, [r3]
  tp->queue.prev->queue.next = tp;
 8002912:	6013      	str	r3, [r2, #0]
  cp->queue.prev             = tp;
 8002914:	6073      	str	r3, [r6, #4]
 8002916:	e7d6      	b.n	80028c6 <chMtxLockS+0x26>
  tp->queue.prev->queue.next = tp->queue.next;
 8002918:	e9d3 1200 	ldrd	r1, r2, [r3]
 800291c:	6011      	str	r1, [r2, #0]
  tp->queue.next->queue.prev = tp->queue.prev;
 800291e:	6819      	ldr	r1, [r3, #0]
          (void) chSchReadyI(queue_dequeue(tp));
 8002920:	4618      	mov	r0, r3
 8002922:	604a      	str	r2, [r1, #4]
 8002924:	f7fe fb24 	bl	8000f70 <chSchReadyI>
 8002928:	e7cd      	b.n	80028c6 <chMtxLockS+0x26>
    cp = cp->queue.next;
 800292a:	461e      	mov	r6, r3
 800292c:	e7d5      	b.n	80028da <chMtxLockS+0x3a>
    mp->next = ctp->mtxlist;
 800292e:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8002930:	e9c0 5302 	strd	r5, r3, [r0, #8]
    ctp->mtxlist = mp;
 8002934:	63a8      	str	r0, [r5, #56]	; 0x38
}
 8002936:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  tp->queue.prev->queue.next = tp->queue.next;
 8002938:	e9d3 0200 	ldrd	r0, r2, [r3]
 800293c:	6010      	str	r0, [r2, #0]
          queue_prio_insert(queue_dequeue(tp), &tp->u.wtmtxp->queue);
 800293e:	6a5e      	ldr	r6, [r3, #36]	; 0x24
  tp->queue.next->queue.prev = tp->queue.prev;
 8002940:	6818      	ldr	r0, [r3, #0]
 8002942:	4637      	mov	r7, r6
 8002944:	6042      	str	r2, [r0, #4]
 8002946:	4632      	mov	r2, r6
 8002948:	e002      	b.n	8002950 <chMtxLockS+0xb0>
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 800294a:	6890      	ldr	r0, [r2, #8]
 800294c:	4288      	cmp	r0, r1
 800294e:	d314      	bcc.n	800297a <chMtxLockS+0xda>
    cp = cp->queue.next;
 8002950:	6812      	ldr	r2, [r2, #0]
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 8002952:	4296      	cmp	r6, r2
 8002954:	d1f9      	bne.n	800294a <chMtxLockS+0xaa>
  tp->queue.prev             = cp->queue.prev;
 8002956:	687a      	ldr	r2, [r7, #4]
      while (tp->prio < ctp->prio) {
 8002958:	68a9      	ldr	r1, [r5, #8]
 800295a:	e9c3 7200 	strd	r7, r2, [r3]
  tp->queue.prev->queue.next = tp;
 800295e:	6013      	str	r3, [r2, #0]
  cp->queue.prev             = tp;
 8002960:	607b      	str	r3, [r7, #4]
          tp = tp->u.wtmtxp->owner;
 8002962:	68b3      	ldr	r3, [r6, #8]
      while (tp->prio < ctp->prio) {
 8002964:	689a      	ldr	r2, [r3, #8]
 8002966:	428a      	cmp	r2, r1
 8002968:	d3a5      	bcc.n	80028b6 <chMtxLockS+0x16>
 800296a:	e7ac      	b.n	80028c6 <chMtxLockS+0x26>
    cp = cp->queue.next;
 800296c:	4616      	mov	r6, r2
  tp->queue.prev             = cp->queue.prev;
 800296e:	6872      	ldr	r2, [r6, #4]
 8002970:	e9c3 6200 	strd	r6, r2, [r3]
  tp->queue.prev->queue.next = tp;
 8002974:	6013      	str	r3, [r2, #0]
  cp->queue.prev             = tp;
 8002976:	6073      	str	r3, [r6, #4]
 8002978:	e7a5      	b.n	80028c6 <chMtxLockS+0x26>
    cp = cp->queue.next;
 800297a:	4617      	mov	r7, r2
 800297c:	e7eb      	b.n	8002956 <chMtxLockS+0xb6>
 800297e:	bf00      	nop
 8002980:	200008f0 	.word	0x200008f0
	...

08002990 <chMtxLock>:
void chMtxLock(mutex_t *mp) {
 8002990:	b508      	push	{r3, lr}
 8002992:	2320      	movs	r3, #32
 8002994:	f383 8811 	msr	BASEPRI, r3
  chMtxLockS(mp);
 8002998:	f7ff ff82 	bl	80028a0 <chMtxLockS>
 800299c:	2300      	movs	r3, #0
 800299e:	f383 8811 	msr	BASEPRI, r3
}
 80029a2:	bd08      	pop	{r3, pc}
	...

080029b0 <chSemWait>:
 80029b0:	2320      	movs	r3, #32
 80029b2:	f383 8811 	msr	BASEPRI, r3
  if (--sp->cnt < (cnt_t)0) {
 80029b6:	6883      	ldr	r3, [r0, #8]
 80029b8:	3b01      	subs	r3, #1
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	6083      	str	r3, [r0, #8]
 80029be:	db04      	blt.n	80029ca <chSemWait+0x1a>
  return MSG_OK;
 80029c0:	2000      	movs	r0, #0
 80029c2:	2300      	movs	r3, #0
 80029c4:	f383 8811 	msr	BASEPRI, r3
}
 80029c8:	4770      	bx	lr
msg_t chSemWait(semaphore_t *sp) {
 80029ca:	b510      	push	{r4, lr}
    currp->u.wtsemp = sp;
 80029cc:	4c08      	ldr	r4, [pc, #32]	; (80029f0 <chSemWait+0x40>)
 80029ce:	69a2      	ldr	r2, [r4, #24]
 80029d0:	6250      	str	r0, [r2, #36]	; 0x24
  tp->queue.prev             = tqp->prev;
 80029d2:	6841      	ldr	r1, [r0, #4]
 80029d4:	4603      	mov	r3, r0
 80029d6:	e9c2 0100 	strd	r0, r1, [r2]
  tp->queue.prev->queue.next = tp;
 80029da:	600a      	str	r2, [r1, #0]
    chSchGoSleepS(CH_STATE_WTSEM);
 80029dc:	2005      	movs	r0, #5
  tqp->prev                  = tp;
 80029de:	605a      	str	r2, [r3, #4]
 80029e0:	f7ff f9ce 	bl	8001d80 <chSchGoSleepS>
    return currp->u.rdymsg;
 80029e4:	69a3      	ldr	r3, [r4, #24]
 80029e6:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80029e8:	2300      	movs	r3, #0
 80029ea:	f383 8811 	msr	BASEPRI, r3
}
 80029ee:	bd10      	pop	{r4, pc}
 80029f0:	200008f0 	.word	0x200008f0
	...

08002a00 <rt_test_010_010_execute>:
static void rt_test_010_010_execute(void) {
 8002a00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  test_set_step(1);
 8002a04:	f8df 9080 	ldr.w	r9, [pc, #128]	; 8002a88 <rt_test_010_010_execute+0x88>
      chSemWait(&sem1);
 8002a08:	4c1c      	ldr	r4, [pc, #112]	; (8002a7c <rt_test_010_010_execute+0x7c>)
  test_set_step(1);
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	f8c9 3000 	str.w	r3, [r9]
    start = test_wait_tick();
 8002a10:	f7ff fe5e 	bl	80026d0 <test_wait_tick>
    n = 0;
 8002a14:	2500      	movs	r5, #0
    start = test_wait_tick();
 8002a16:	4680      	mov	r8, r0
 8002a18:	f04f 4780 	mov.w	r7, #1073741824	; 0x40000000
    } while (chVTIsSystemTimeWithinX(start, end));
 8002a1c:	f242 760f 	movw	r6, #9999	; 0x270f
      chSemWait(&sem1);
 8002a20:	4620      	mov	r0, r4
 8002a22:	f7ff ffc5 	bl	80029b0 <chSemWait>
      chSemSignal(&sem1);
 8002a26:	4620      	mov	r0, r4
 8002a28:	f7ff f98a 	bl	8001d40 <chSemSignal>
      chSemWait(&sem1);
 8002a2c:	4620      	mov	r0, r4
 8002a2e:	f7ff ffbf 	bl	80029b0 <chSemWait>
      chSemSignal(&sem1);
 8002a32:	4620      	mov	r0, r4
 8002a34:	f7ff f984 	bl	8001d40 <chSemSignal>
      chSemWait(&sem1);
 8002a38:	4620      	mov	r0, r4
 8002a3a:	f7ff ffb9 	bl	80029b0 <chSemWait>
      chSemSignal(&sem1);
 8002a3e:	4620      	mov	r0, r4
 8002a40:	f7ff f97e 	bl	8001d40 <chSemSignal>
      chSemWait(&sem1);
 8002a44:	4620      	mov	r0, r4
 8002a46:	f7ff ffb3 	bl	80029b0 <chSemWait>
      chSemSignal(&sem1);
 8002a4a:	4620      	mov	r0, r4
 8002a4c:	f7ff f978 	bl	8001d40 <chSemSignal>
 8002a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a52:	eba3 0308 	sub.w	r3, r3, r8
    } while (chVTIsSystemTimeWithinX(start, end));
 8002a56:	42b3      	cmp	r3, r6
      n++;
 8002a58:	f105 0501 	add.w	r5, r5, #1
    } while (chVTIsSystemTimeWithinX(start, end));
 8002a5c:	d9e0      	bls.n	8002a20 <rt_test_010_010_execute+0x20>
  test_set_step(2);
 8002a5e:	2302      	movs	r3, #2
    test_print("--- Score : ");
 8002a60:	4807      	ldr	r0, [pc, #28]	; (8002a80 <rt_test_010_010_execute+0x80>)
  test_set_step(2);
 8002a62:	f8c9 3000 	str.w	r3, [r9]
    test_print("--- Score : ");
 8002a66:	f7fd ffcb 	bl	8000a00 <test_print>
    test_printn(n * 4);
 8002a6a:	00a8      	lsls	r0, r5, #2
 8002a6c:	f7fd ff58 	bl	8000920 <test_printn>
    test_println(" wait+signal/S");
 8002a70:	4804      	ldr	r0, [pc, #16]	; (8002a84 <rt_test_010_010_execute+0x84>)
}
 8002a72:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    test_println(" wait+signal/S");
 8002a76:	f7fd bfa3 	b.w	80009c0 <test_println>
 8002a7a:	bf00      	nop
 8002a7c:	20000b34 	.word	0x20000b34
 8002a80:	08008bf0 	.word	0x08008bf0
 8002a84:	08008c1c 	.word	0x08008c1c
 8002a88:	20001254 	.word	0x20001254
 8002a8c:	00000000 	.word	0x00000000

08002a90 <bmk_thread7>:
static THD_FUNCTION(bmk_thread7, p) {
 8002a90:	b538      	push	{r3, r4, r5, lr}
  return ch.rlist.current;
 8002a92:	4c08      	ldr	r4, [pc, #32]	; (8002ab4 <bmk_thread7+0x24>)
  return (bool)((chThdGetSelfX()->flags & CH_FLAG_TERMINATE) != (tmode_t)0);
 8002a94:	69a3      	ldr	r3, [r4, #24]
  while (!chThdShouldTerminateX())
 8002a96:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002a9a:	075a      	lsls	r2, r3, #29
 8002a9c:	d408      	bmi.n	8002ab0 <bmk_thread7+0x20>
    chSemWait(&sem1);
 8002a9e:	4d06      	ldr	r5, [pc, #24]	; (8002ab8 <bmk_thread7+0x28>)
 8002aa0:	4628      	mov	r0, r5
 8002aa2:	f7ff ff85 	bl	80029b0 <chSemWait>
 8002aa6:	69a3      	ldr	r3, [r4, #24]
  while (!chThdShouldTerminateX())
 8002aa8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002aac:	075b      	lsls	r3, r3, #29
 8002aae:	d5f7      	bpl.n	8002aa0 <bmk_thread7+0x10>
}
 8002ab0:	bd38      	pop	{r3, r4, r5, pc}
 8002ab2:	bf00      	nop
 8002ab4:	200008f0 	.word	0x200008f0
 8002ab8:	20000b34 	.word	0x20000b34
 8002abc:	00000000 	.word	0x00000000

08002ac0 <thread3>:
static THD_FUNCTION(thread3, p) {
 8002ac0:	b510      	push	{r4, lr}
  chSemWait(&sem1);
 8002ac2:	4c04      	ldr	r4, [pc, #16]	; (8002ad4 <thread3+0x14>)
 8002ac4:	4620      	mov	r0, r4
 8002ac6:	f7ff ff73 	bl	80029b0 <chSemWait>
  chSemSignal(&sem1);
 8002aca:	4620      	mov	r0, r4
}
 8002acc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  chSemSignal(&sem1);
 8002ad0:	f7ff b936 	b.w	8001d40 <chSemSignal>
 8002ad4:	20000b28 	.word	0x20000b28
	...

08002ae0 <thread1.lto_priv.84>:
static THD_FUNCTION(thread1, p) {
 8002ae0:	b510      	push	{r4, lr}
 8002ae2:	4604      	mov	r4, r0
  chSemWait(&sem1);
 8002ae4:	4803      	ldr	r0, [pc, #12]	; (8002af4 <thread1.lto_priv.84+0x14>)
 8002ae6:	f7ff ff63 	bl	80029b0 <chSemWait>
  test_emit_token(*(char *)p);
 8002aea:	7820      	ldrb	r0, [r4, #0]
}
 8002aec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  test_emit_token(*(char *)p);
 8002af0:	f7fd bf26 	b.w	8000940 <test_emit_token>
 8002af4:	20000b28 	.word	0x20000b28
	...

08002b00 <oqWriteTimeout>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t oqWriteTimeout(output_queue_t *oqp, const uint8_t *bp,
                      size_t n, sysinterval_t timeout) {
 8002b00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b04:	b085      	sub	sp, #20
 8002b06:	e9cd 3202 	strd	r3, r2, [sp, #8]
  qnotify_t nfy = oqp->q_notify;
 8002b0a:	f8d0 901c 	ldr.w	r9, [r0, #28]
 8002b0e:	f04f 0a20 	mov.w	sl, #32
 8002b12:	f38a 8811 	msr	BASEPRI, sl

  osalDbgCheck(n > 0U);

  osalSysLock();

  while (n > 0U) {
 8002b16:	b33a      	cbz	r2, 8002b68 <oqWriteTimeout+0x68>
 8002b18:	4604      	mov	r4, r0
 8002b1a:	460f      	mov	r7, r1
 8002b1c:	4616      	mov	r6, r2
 8002b1e:	f04f 0b00 	mov.w	fp, #0
  if (n > oqGetEmptyI(oqp)) {
 8002b22:	68a2      	ldr	r2, [r4, #8]
 8002b24:	4296      	cmp	r6, r2
  s1 = (size_t)(oqp->q_top - oqp->q_wrptr);
 8002b26:	e9d4 2004 	ldrd	r2, r0, [r4, #16]
    n = oqGetEmptyI(oqp);
 8002b2a:	bf8c      	ite	hi
 8002b2c:	68a5      	ldrhi	r5, [r4, #8]
  if (n > oqGetEmptyI(oqp)) {
 8002b2e:	4635      	movls	r5, r6
  s1 = (size_t)(oqp->q_top - oqp->q_wrptr);
 8002b30:	eba2 0800 	sub.w	r8, r2, r0
  if (n < s1) {
 8002b34:	45a8      	cmp	r8, r5
 8002b36:	d840      	bhi.n	8002bba <oqWriteTimeout+0xba>
  else if (n > s1) {
 8002b38:	d32b      	bcc.n	8002b92 <oqWriteTimeout+0x92>
    memcpy((void *)oqp->q_wrptr, (const void *)bp, n);
 8002b3a:	462a      	mov	r2, r5
 8002b3c:	4639      	mov	r1, r7
 8002b3e:	f7fd fbb3 	bl	80002a8 <memcpy>
    oqp->q_wrptr = oqp->q_buffer;
 8002b42:	68e2      	ldr	r2, [r4, #12]
 8002b44:	6162      	str	r2, [r4, #20]
  oqp->q_counter -= n;
 8002b46:	68a2      	ldr	r2, [r4, #8]
 8002b48:	1b52      	subs	r2, r2, r5
 8002b4a:	60a2      	str	r2, [r4, #8]
    size_t done;

    done = oq_write(oqp, bp, n);
    if (done == (size_t)0) {
 8002b4c:	b19d      	cbz	r5, 8002b76 <oqWriteTimeout+0x76>
      }
    }
    else {
      /* Inform the low side that the queue has at least one character
         available.*/
      if (nfy != NULL) {
 8002b4e:	f1b9 0f00 	cmp.w	r9, #0
 8002b52:	d001      	beq.n	8002b58 <oqWriteTimeout+0x58>
        nfy(oqp);
 8002b54:	4620      	mov	r0, r4
 8002b56:	47c8      	blx	r9
 8002b58:	f38b 8811 	msr	BASEPRI, fp
      }

      /* Giving a preemption chance in a controlled point.*/
      osalSysUnlock();

      n  -= done;
 8002b5c:	1b76      	subs	r6, r6, r5
      bp += done;
 8002b5e:	442f      	add	r7, r5
 8002b60:	f38a 8811 	msr	BASEPRI, sl
  while (n > 0U) {
 8002b64:	2e00      	cmp	r6, #0
 8002b66:	d1dc      	bne.n	8002b22 <oqWriteTimeout+0x22>
  if (n > oqGetEmptyI(oqp)) {
 8002b68:	9803      	ldr	r0, [sp, #12]
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	f383 8811 	msr	BASEPRI, r3
    }
  }

  osalSysUnlock();
  return max - n;
}
 8002b70:	b005      	add	sp, #20
 8002b72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return chThdEnqueueTimeoutS(tqp, timeout);
 8002b76:	9902      	ldr	r1, [sp, #8]
 8002b78:	4620      	mov	r0, r4
 8002b7a:	f7ff fae1 	bl	8002140 <chThdEnqueueTimeoutS>
      if (msg != MSG_OK) {
 8002b7e:	2800      	cmp	r0, #0
 8002b80:	d0cf      	beq.n	8002b22 <oqWriteTimeout+0x22>
 8002b82:	9b03      	ldr	r3, [sp, #12]
 8002b84:	1b98      	subs	r0, r3, r6
 8002b86:	2300      	movs	r3, #0
 8002b88:	f383 8811 	msr	BASEPRI, r3
}
 8002b8c:	b005      	add	sp, #20
 8002b8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    s2 = n - s1;
 8002b92:	eba5 0308 	sub.w	r3, r5, r8
    memcpy((void *)oqp->q_wrptr, (const void *)bp, s1);
 8002b96:	4642      	mov	r2, r8
 8002b98:	4639      	mov	r1, r7
    s2 = n - s1;
 8002b9a:	9301      	str	r3, [sp, #4]
    memcpy((void *)oqp->q_wrptr, (const void *)bp, s1);
 8002b9c:	f7fd fb84 	bl	80002a8 <memcpy>
    memcpy((void *)oqp->q_buffer, (const void *)bp, s2);
 8002ba0:	eb07 0108 	add.w	r1, r7, r8
 8002ba4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8002ba8:	68e0      	ldr	r0, [r4, #12]
 8002baa:	4642      	mov	r2, r8
 8002bac:	f7fd fb7c 	bl	80002a8 <memcpy>
    oqp->q_wrptr = oqp->q_buffer + s2;
 8002bb0:	68e2      	ldr	r2, [r4, #12]
 8002bb2:	4643      	mov	r3, r8
 8002bb4:	18d3      	adds	r3, r2, r3
 8002bb6:	6163      	str	r3, [r4, #20]
 8002bb8:	e7c5      	b.n	8002b46 <oqWriteTimeout+0x46>
    memcpy((void *)oqp->q_wrptr, (const void *)bp, n);
 8002bba:	462a      	mov	r2, r5
 8002bbc:	4639      	mov	r1, r7
 8002bbe:	f7fd fb73 	bl	80002a8 <memcpy>
    oqp->q_wrptr += n;
 8002bc2:	6962      	ldr	r2, [r4, #20]
 8002bc4:	442a      	add	r2, r5
 8002bc6:	6162      	str	r2, [r4, #20]
 8002bc8:	e7bd      	b.n	8002b46 <oqWriteTimeout+0x46>
 8002bca:	bf00      	nop
 8002bcc:	0000      	movs	r0, r0
	...

08002bd0 <_writet>:
  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp, n, timeout);
 8002bd0:	3030      	adds	r0, #48	; 0x30
 8002bd2:	f7ff bf95 	b.w	8002b00 <oqWriteTimeout>
 8002bd6:	bf00      	nop
	...

08002be0 <_write>:
  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp,
 8002be0:	3030      	adds	r0, #48	; 0x30
 8002be2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002be6:	f7ff bf8b 	b.w	8002b00 <oqWriteTimeout>
 8002bea:	bf00      	nop
 8002bec:	0000      	movs	r0, r0
	...

08002bf0 <iqReadTimeout>:
                     size_t n, sysinterval_t timeout) {
 8002bf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002bf4:	b085      	sub	sp, #20
 8002bf6:	e9cd 3202 	strd	r3, r2, [sp, #8]
  qnotify_t nfy = iqp->q_notify;
 8002bfa:	f8d0 901c 	ldr.w	r9, [r0, #28]
 8002bfe:	f04f 0a20 	mov.w	sl, #32
 8002c02:	f38a 8811 	msr	BASEPRI, sl
  while (n > 0U) {
 8002c06:	b33a      	cbz	r2, 8002c58 <iqReadTimeout+0x68>
 8002c08:	4604      	mov	r4, r0
 8002c0a:	460f      	mov	r7, r1
 8002c0c:	4616      	mov	r6, r2
 8002c0e:	f04f 0b00 	mov.w	fp, #0
  if (n > iqGetFullI(iqp)) {
 8002c12:	68a2      	ldr	r2, [r4, #8]
  s1 = (size_t)(iqp->q_top - iqp->q_rdptr);
 8002c14:	69a1      	ldr	r1, [r4, #24]
  if (n > iqGetFullI(iqp)) {
 8002c16:	4296      	cmp	r6, r2
  s1 = (size_t)(iqp->q_top - iqp->q_rdptr);
 8002c18:	6922      	ldr	r2, [r4, #16]
    n = iqGetFullI(iqp);
 8002c1a:	bf8c      	ite	hi
 8002c1c:	68a5      	ldrhi	r5, [r4, #8]
  if (n > iqGetFullI(iqp)) {
 8002c1e:	4635      	movls	r5, r6
  s1 = (size_t)(iqp->q_top - iqp->q_rdptr);
 8002c20:	eba2 0801 	sub.w	r8, r2, r1
  if (n < s1) {
 8002c24:	45a8      	cmp	r8, r5
 8002c26:	d840      	bhi.n	8002caa <iqReadTimeout+0xba>
  else if (n > s1) {
 8002c28:	d32b      	bcc.n	8002c82 <iqReadTimeout+0x92>
    memcpy((void *)bp, (void *)iqp->q_rdptr, n);
 8002c2a:	462a      	mov	r2, r5
 8002c2c:	4638      	mov	r0, r7
 8002c2e:	f7fd fb3b 	bl	80002a8 <memcpy>
    iqp->q_rdptr = iqp->q_buffer;
 8002c32:	68e2      	ldr	r2, [r4, #12]
 8002c34:	61a2      	str	r2, [r4, #24]
  iqp->q_counter -= n;
 8002c36:	68a2      	ldr	r2, [r4, #8]
 8002c38:	1b52      	subs	r2, r2, r5
 8002c3a:	60a2      	str	r2, [r4, #8]
    if (done == (size_t)0) {
 8002c3c:	b19d      	cbz	r5, 8002c66 <iqReadTimeout+0x76>
      if (nfy != NULL) {
 8002c3e:	f1b9 0f00 	cmp.w	r9, #0
 8002c42:	d001      	beq.n	8002c48 <iqReadTimeout+0x58>
        nfy(iqp);
 8002c44:	4620      	mov	r0, r4
 8002c46:	47c8      	blx	r9
 8002c48:	f38b 8811 	msr	BASEPRI, fp
      n  -= done;
 8002c4c:	1b76      	subs	r6, r6, r5
      bp += done;
 8002c4e:	442f      	add	r7, r5
 8002c50:	f38a 8811 	msr	BASEPRI, sl
  while (n > 0U) {
 8002c54:	2e00      	cmp	r6, #0
 8002c56:	d1dc      	bne.n	8002c12 <iqReadTimeout+0x22>
  if (n > iqGetFullI(iqp)) {
 8002c58:	9803      	ldr	r0, [sp, #12]
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	f383 8811 	msr	BASEPRI, r3
}
 8002c60:	b005      	add	sp, #20
 8002c62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002c66:	9902      	ldr	r1, [sp, #8]
 8002c68:	4620      	mov	r0, r4
 8002c6a:	f7ff fa69 	bl	8002140 <chThdEnqueueTimeoutS>
      if (msg != MSG_OK) {
 8002c6e:	2800      	cmp	r0, #0
 8002c70:	d0cf      	beq.n	8002c12 <iqReadTimeout+0x22>
 8002c72:	9b03      	ldr	r3, [sp, #12]
 8002c74:	1b98      	subs	r0, r3, r6
 8002c76:	2300      	movs	r3, #0
 8002c78:	f383 8811 	msr	BASEPRI, r3
}
 8002c7c:	b005      	add	sp, #20
 8002c7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    s2 = n - s1;
 8002c82:	eba5 0308 	sub.w	r3, r5, r8
    memcpy((void *)bp, (void *)iqp->q_rdptr, s1);
 8002c86:	4642      	mov	r2, r8
 8002c88:	4638      	mov	r0, r7
    s2 = n - s1;
 8002c8a:	9301      	str	r3, [sp, #4]
    memcpy((void *)bp, (void *)iqp->q_rdptr, s1);
 8002c8c:	f7fd fb0c 	bl	80002a8 <memcpy>
    memcpy((void *)bp, (void *)iqp->q_buffer, s2);
 8002c90:	eb07 0008 	add.w	r0, r7, r8
 8002c94:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8002c98:	68e1      	ldr	r1, [r4, #12]
 8002c9a:	4642      	mov	r2, r8
 8002c9c:	f7fd fb04 	bl	80002a8 <memcpy>
    iqp->q_rdptr = iqp->q_buffer + s2;
 8002ca0:	68e2      	ldr	r2, [r4, #12]
 8002ca2:	4643      	mov	r3, r8
 8002ca4:	18d3      	adds	r3, r2, r3
 8002ca6:	61a3      	str	r3, [r4, #24]
 8002ca8:	e7c5      	b.n	8002c36 <iqReadTimeout+0x46>
    memcpy((void *)bp, (void *)iqp->q_rdptr, n);
 8002caa:	462a      	mov	r2, r5
 8002cac:	4638      	mov	r0, r7
 8002cae:	f7fd fafb 	bl	80002a8 <memcpy>
    iqp->q_rdptr += n;
 8002cb2:	69a2      	ldr	r2, [r4, #24]
 8002cb4:	442a      	add	r2, r5
 8002cb6:	61a2      	str	r2, [r4, #24]
 8002cb8:	e7bd      	b.n	8002c36 <iqReadTimeout+0x46>
 8002cba:	bf00      	nop
 8002cbc:	0000      	movs	r0, r0
	...

08002cc0 <_readt>:
  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp, n, timeout);
 8002cc0:	300c      	adds	r0, #12
 8002cc2:	f7ff bf95 	b.w	8002bf0 <iqReadTimeout>
 8002cc6:	bf00      	nop
	...

08002cd0 <_read>:
  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp,
 8002cd0:	300c      	adds	r0, #12
 8002cd2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002cd6:	f7ff bf8b 	b.w	8002bf0 <iqReadTimeout>
 8002cda:	bf00      	nop
 8002cdc:	0000      	movs	r0, r0
	...

08002ce0 <main>:
void hal_lld_init(void) {

  /* Reset of all peripherals.
     Note, GPIOs are not reset because initialized before this point in
     board files.*/
  rccResetAHB1(~0);
 8002ce0:	4bc1      	ldr	r3, [pc, #772]	; (8002fe8 <main+0x308>)
 8002ce2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002ce6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
}

/*
 * Application entry point.
 */
int main(void) {
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	2200      	movs	r2, #0
 8002cec:	6299      	str	r1, [r3, #40]	; 0x28
 8002cee:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8002cf0:	629a      	str	r2, [r3, #40]	; 0x28
 8002cf2:	6a98      	ldr	r0, [r3, #40]	; 0x28
  rccResetAHB2(~STM32_GPIO_EN_MASK);
 8002cf4:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8002cf6:	f060 0007 	orn	r0, r0, #7
 8002cfa:	62d8      	str	r0, [r3, #44]	; 0x2c
 8002cfc:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8002cfe:	f000 0007 	and.w	r0, r0, #7
 8002d02:	62d8      	str	r0, [r3, #44]	; 0x2c
 8002d04:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
  rccResetAHB3(~0);
 8002d06:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002d08:	6319      	str	r1, [r3, #48]	; 0x30
 8002d0a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002d0c:	631a      	str	r2, [r3, #48]	; 0x30
 8002d0e:	6b18      	ldr	r0, [r3, #48]	; 0x30
  rccResetAPB1R1(~RCC_APB1RSTR1_PWRRST);
 8002d10:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002d12:	f060 5080 	orn	r0, r0, #268435456	; 0x10000000
 8002d16:	6398      	str	r0, [r3, #56]	; 0x38
 8002d18:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002d1a:	f000 5080 	and.w	r0, r0, #268435456	; 0x10000000
 8002d1e:	6398      	str	r0, [r3, #56]	; 0x38
 8002d20:	6b98      	ldr	r0, [r3, #56]	; 0x38
  rccResetAPB1R2(~0);
 8002d22:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8002d24:	63d9      	str	r1, [r3, #60]	; 0x3c
 8002d26:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8002d28:	63da      	str	r2, [r3, #60]	; 0x3c
 8002d2a:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
  rccResetAPB2(~0);
 8002d2c:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8002d2e:	6419      	str	r1, [r3, #64]	; 0x40
 8002d30:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002d32:	641a      	str	r2, [r3, #64]	; 0x40
 8002d34:	6c19      	ldr	r1, [r3, #64]	; 0x40

  /* PWR clock enabled.*/
  rccEnablePWRInterface(true);
 8002d36:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8002d38:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8002d3c:	6599      	str	r1, [r3, #88]	; 0x58
 8002d3e:	6f99      	ldr	r1, [r3, #120]	; 0x78
 8002d40:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8002d44:	6799      	str	r1, [r3, #120]	; 0x78
 8002d46:	6f99      	ldr	r1, [r3, #120]	; 0x78
  if ((RCC->BDCR & STM32_RTCSEL_MASK) != STM32_RTCSEL) {
 8002d48:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 8002d4c:	f401 7140 	and.w	r1, r1, #768	; 0x300
 8002d50:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8002d54:	b086      	sub	sp, #24
 8002d56:	d005      	beq.n	8002d64 <main+0x84>
    RCC->BDCR = RCC_BDCR_BDRST;
 8002d58:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8002d5c:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
    RCC->BDCR = 0;
 8002d60:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  RCC->BDCR |= STM32_LSEDRV | RCC_BDCR_LSEON;
 8002d64:	4ba0      	ldr	r3, [pc, #640]	; (8002fe8 <main+0x308>)
 8002d66:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8002d6a:	f042 0211 	orr.w	r2, r2, #17
 8002d6e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  while ((RCC->BDCR & RCC_BDCR_LSERDY) == 0)
 8002d72:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8002d76:	0792      	lsls	r2, r2, #30
 8002d78:	d5fb      	bpl.n	8002d72 <main+0x92>
  RCC->CR |= RCC_CR_MSIPLLEN;
 8002d7a:	681a      	ldr	r2, [r3, #0]
  while ((RCC->CR & RCC_CR_MSIRDY) == 0)
 8002d7c:	4f9a      	ldr	r7, [pc, #616]	; (8002fe8 <main+0x308>)
  RCC->CR |= RCC_CR_MSIPLLEN;
 8002d7e:	f042 0204 	orr.w	r2, r2, #4
 8002d82:	601a      	str	r2, [r3, #0]
  while ((RCC->CR & RCC_CR_MSIRDY) == 0)
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	079b      	lsls	r3, r3, #30
 8002d88:	d5fc      	bpl.n	8002d84 <main+0xa4>
  oqObjectInit(&sdp->oqueue, sdp->ob, SERIAL_BUFFERS_SIZE, onotify, sdp);
}
#else
void sdObjectInit(SerialDriver *sdp) {

  sdp->vmt = &vmt;
 8002d8a:	4d98      	ldr	r5, [pc, #608]	; (8002fec <main+0x30c>)
  RCC->BDCR |= STM32_LSCOSEL;
 8002d8c:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8002d90:	4b97      	ldr	r3, [pc, #604]	; (8002ff0 <main+0x310>)
 8002d92:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8002d96:	f04f 0980 	mov.w	r9, #128	; 0x80
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8002d9a:	2260      	movs	r2, #96	; 0x60
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8002d9c:	2140      	movs	r1, #64	; 0x40
 8002d9e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002da2:	462c      	mov	r4, r5
 8002da4:	f44f 7c00 	mov.w	ip, #512	; 0x200
 8002da8:	f44f 6680 	mov.w	r6, #1024	; 0x400

  /* Programmable voltage detector enable.*/
#if STM32_PVD_ENABLE
  PWR->CR2 = PWR_CR2_PVDE | (STM32_PLS & STM32_PLS_MASK);
#else
  PWR->CR2 = 0;
 8002dac:	f8df 827c 	ldr.w	r8, [pc, #636]	; 800302c <main+0x34c>
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8002db0:	f883 2306 	strb.w	r2, [r3, #774]	; 0x306
 8002db4:	f8df e278 	ldr.w	lr, [pc, #632]	; 8003030 <main+0x350>
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8002db8:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8002dbc:	6019      	str	r1, [r3, #0]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8002dbe:	f883 2307 	strb.w	r2, [r3, #775]	; 0x307
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8002dc2:	f8c3 9180 	str.w	r9, [r3, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8002dc6:	f8c3 9000 	str.w	r9, [r3]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8002dca:	f883 2308 	strb.w	r2, [r3, #776]	; 0x308
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8002dce:	f8c3 0180 	str.w	r0, [r3, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8002dd2:	6018      	str	r0, [r3, #0]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8002dd4:	f883 2309 	strb.w	r2, [r3, #777]	; 0x309
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8002dd8:	f8c3 c180 	str.w	ip, [r3, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8002ddc:	f8c3 c000 	str.w	ip, [r3]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8002de0:	f883 230a 	strb.w	r2, [r3, #778]	; 0x30a
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8002de4:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8002de8:	f8c3 6180 	str.w	r6, [r3, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8002dec:	601e      	str	r6, [r3, #0]
 8002dee:	2600      	movs	r6, #0
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8002df0:	f883 2317 	strb.w	r2, [r3, #791]	; 0x317
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8002df4:	f8c3 c180 	str.w	ip, [r3, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8002df8:	f8c3 c000 	str.w	ip, [r3]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8002dfc:	f883 2328 	strb.w	r2, [r3, #808]	; 0x328
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8002e00:	f8c3 0184 	str.w	r0, [r3, #388]	; 0x184
  iqp->q_buffer  = bp;
 8002e04:	4a7b      	ldr	r2, [pc, #492]	; (8002ff4 <main+0x314>)
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8002e06:	6058      	str	r0, [r3, #4]
 8002e08:	f8c8 6004 	str.w	r6, [r8, #4]
 8002e0c:	f844 eb04 	str.w	lr, [r4], #4
  osalEventObjectInit(&sdp->event);
  sdp->state = SD_STOP;
 8002e10:	f04f 0801 	mov.w	r8, #1
  oqp->q_counter = size;
 8002e14:	f04f 0a10 	mov.w	sl, #16
  tqp->next = (thread_t *)tqp;
 8002e18:	f105 000c 	add.w	r0, r5, #12
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8002e1c:	f04f 0cc0 	mov.w	ip, #192	; 0xc0
  esp->next = (event_listener_t *)esp;
 8002e20:	606c      	str	r4, [r5, #4]
  tqp->prev = (thread_t *)tqp;
 8002e22:	e9c5 0003 	strd	r0, r0, [r5, #12]
  iqp->q_buffer  = bp;
 8002e26:	61aa      	str	r2, [r5, #24]
  iqp->q_counter = 0;
 8002e28:	616e      	str	r6, [r5, #20]
 8002e2a:	f885 8008 	strb.w	r8, [r5, #8]
  iqp->q_wrptr   = bp;
 8002e2e:	e9c5 2208 	strd	r2, r2, [r5, #32]
  oqp->q_counter = size;
 8002e32:	f8c5 a038 	str.w	sl, [r5, #56]	; 0x38
 8002e36:	f883 c326 	strb.w	ip, [r3, #806]	; 0x326
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8002e3a:	f8c3 1184 	str.w	r1, [r3, #388]	; 0x184
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8002e3e:	6059      	str	r1, [r3, #4]

#if OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING
  /* Free running counter mode.*/

  /* Enabling timer clock.*/
  ST_ENABLE_CLOCK();
 8002e40:	6dbc      	ldr	r4, [r7, #88]	; 0x58
  iqp->q_notify  = infy;
 8002e42:	62ae      	str	r6, [r5, #40]	; 0x28
 8002e44:	ea44 0408 	orr.w	r4, r4, r8
 8002e48:	65bc      	str	r4, [r7, #88]	; 0x58
 8002e4a:	6fbc      	ldr	r4, [r7, #120]	; 0x78

  /* Enabling the stop mode during debug for this timer.*/
  ST_ENABLE_STOP();
 8002e4c:	486a      	ldr	r0, [pc, #424]	; (8002ff8 <main+0x318>)
  oqp->q_buffer  = bp;
 8002e4e:	496b      	ldr	r1, [pc, #428]	; (8002ffc <main+0x31c>)
  iqp->q_link    = link;
 8002e50:	62ed      	str	r5, [r5, #44]	; 0x2c
  ST_ENABLE_CLOCK();
 8002e52:	ea44 0408 	orr.w	r4, r4, r8
 8002e56:	67bc      	str	r4, [r7, #120]	; 0x78
 8002e58:	6fbc      	ldr	r4, [r7, #120]	; 0x78
  ST_ENABLE_STOP();
 8002e5a:	f8d0 c008 	ldr.w	ip, [r0, #8]
  oqp->q_buffer  = bp;
 8002e5e:	63e9      	str	r1, [r5, #60]	; 0x3c
  oqp->q_wrptr   = bp;
 8002e60:	e9c5 1111 	strd	r1, r1, [r5, #68]	; 0x44
  oqp->q_top     = bp + size;
 8002e64:	4451      	add	r1, sl
 8002e66:	6429      	str	r1, [r5, #64]	; 0x40
  oqp->q_notify  = onfy;
 8002e68:	4965      	ldr	r1, [pc, #404]	; (8003000 <main+0x320>)
 8002e6a:	64e9      	str	r1, [r5, #76]	; 0x4c
  iqp->q_top     = bp + size;
 8002e6c:	4452      	add	r2, sl
#if STM32_SERIAL_USE_USART2
  sdObjectInit(&SD2);
  iqObjectInit(&SD2.iqueue, sd_in_buf2, sizeof sd_in_buf2, NULL, &SD2);
  oqObjectInit(&SD2.oqueue, sd_out_buf2, sizeof sd_out_buf2, notify2, &SD2);
  SD2.usart = USART2;
  SD2.clock = STM32_USART2CLK;
 8002e6e:	f8df e1c4 	ldr.w	lr, [pc, #452]	; 8003034 <main+0x354>
 8002e72:	4964      	ldr	r1, [pc, #400]	; (8003004 <main+0x324>)
  tqp->next = (thread_t *)tqp;
 8002e74:	4c64      	ldr	r4, [pc, #400]	; (8003008 <main+0x328>)
 8002e76:	61ea      	str	r2, [r5, #28]
 8002e78:	ea4c 0c08 	orr.w	ip, ip, r8

  /* Initializing the counter in free running mode.*/
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 8002e7c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002e80:	e9c5 e115 	strd	lr, r1, [r5, #84]	; 0x54
  oqp->q_link    = link;
 8002e84:	652d      	str	r5, [r5, #80]	; 0x50
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
 8002e86:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
  ST_ENABLE_STOP();
 8002e8a:	f8c0 c008 	str.w	ip, [r0, #8]
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 8002e8e:	f641 7e3f 	movw	lr, #7999	; 0x1f3f
 8002e92:	f105 0c30 	add.w	ip, r5, #48	; 0x30
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8002e96:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8002e9a:	f8c2 e028 	str.w	lr, [r2, #40]	; 0x28
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
 8002e9e:	62d1      	str	r1, [r2, #44]	; 0x2c
 8002ea0:	f8c5 c030 	str.w	ip, [r5, #48]	; 0x30
  STM32_ST_TIM->CCMR1  = 0;
 8002ea4:	6196      	str	r6, [r2, #24]
  tqp->prev = (thread_t *)tqp;
 8002ea6:	f8c5 c034 	str.w	ip, [r5, #52]	; 0x34
  STM32_ST_TIM->CCR[0] = 0;
 8002eaa:	6356      	str	r6, [r2, #52]	; 0x34
  ch.vtlist.next = (virtual_timer_t *)&ch.vtlist;
 8002eac:	f104 0c1c 	add.w	ip, r4, #28
  STM32_ST_TIM->DIER   = 0;
 8002eb0:	60d6      	str	r6, [r2, #12]
  STM32_ST_TIM->CR2    = 0;
 8002eb2:	6056      	str	r6, [r2, #4]
  STM32_ST_TIM->EGR    = TIM_EGR_UG;
 8002eb4:	f8c2 8014 	str.w	r8, [r2, #20]
  STM32_ST_TIM->CR1    = TIM_CR1_CEN;
 8002eb8:	f8c2 8000 	str.w	r8, [r2]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8002ebc:	f883 931c 	strb.w	r9, [r3, #796]	; 0x31c
  tmp->cumulative = (rttime_t)0;
 8002ec0:	2200      	movs	r2, #0
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8002ec2:	f8c3 0180 	str.w	r0, [r3, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8002ec6:	6018      	str	r0, [r3, #0]
 8002ec8:	2300      	movs	r3, #0
  chTMStartMeasurementX(&tm);
 8002eca:	4668      	mov	r0, sp
 8002ecc:	e9c4 4400 	strd	r4, r4, [r4]
  tmp->cumulative = (rttime_t)0;
 8002ed0:	e9cd 2304 	strd	r2, r3, [sp, #16]
  tmp->worst      = (rtcnt_t)0;
 8002ed4:	e9cd 1600 	strd	r1, r6, [sp]
  ch.vtlist.delta = (sysinterval_t)-1;
 8002ed8:	6261      	str	r1, [r4, #36]	; 0x24
  ch.vtlist.prev = (virtual_timer_t *)&ch.vtlist;
 8002eda:	e9c4 cc07 	strd	ip, ip, [r4, #28]
  tmp->n          = (ucnt_t)0;
 8002ede:	e9cd 6602 	strd	r6, r6, [sp, #8]
  ch.rlist.prio = NOPRIO;
 8002ee2:	60a6      	str	r6, [r4, #8]
  ch.rlist.older = (thread_t *)&ch.rlist;
 8002ee4:	e9c4 4404 	strd	r4, r4, [r4, #16]
  ch.vtlist.lasttime = (systime_t)0;
 8002ee8:	62a6      	str	r6, [r4, #40]	; 0x28
  ch.tm.offset = (rtcnt_t)0;
 8002eea:	6766      	str	r6, [r4, #116]	; 0x74
  chTMStartMeasurementX(&tm);
 8002eec:	f7fd fa78 	bl	80003e0 <chTMStartMeasurementX.constprop.63>
  chTMStopMeasurementX(&tm);
 8002ef0:	4668      	mov	r0, sp
 8002ef2:	f7fd ff9d 	bl	8000e30 <chTMStopMeasurementX>
  default_heap.provider = chCoreAllocAlignedWithOffset;
 8002ef6:	4945      	ldr	r1, [pc, #276]	; (800300c <main+0x32c>)
  tqp->next = (thread_t *)tqp;
 8002ef8:	4a45      	ldr	r2, [pc, #276]	; (8003010 <main+0x330>)
  ch.tm.offset = tm.last;
 8002efa:	9b02      	ldr	r3, [sp, #8]
 8002efc:	6763      	str	r3, [r4, #116]	; 0x74
 8002efe:	f8df e138 	ldr.w	lr, [pc, #312]	; 8003038 <main+0x358>
  mp->owner = NULL;
 8002f02:	614e      	str	r6, [r1, #20]
 8002f04:	f101 030c 	add.w	r3, r1, #12
  H_PAGES(&default_heap.header) = 0;
 8002f08:	e9c1 6601 	strd	r6, r6, [r1, #4]
  default_heap.provider = chCoreAllocAlignedWithOffset;
 8002f0c:	f8c1 e000 	str.w	lr, [r1]
  tqp->prev = (thread_t *)tqp;
 8002f10:	e9c1 3303 	strd	r3, r3, [r1, #12]
  dlp->next = (dyn_element_t *)dlp;
 8002f14:	eb02 0e0a 	add.w	lr, r2, sl
  mp->object_size = size;
 8002f18:	2114      	movs	r1, #20
 8002f1a:	f102 0324 	add.w	r3, r2, #36	; 0x24
 8002f1e:	f8c2 e010 	str.w	lr, [r2, #16]
 8002f22:	6191      	str	r1, [r2, #24]
 8002f24:	f102 0e28 	add.w	lr, r2, #40	; 0x28
 8002f28:	211c      	movs	r1, #28
 8002f2a:	6253      	str	r3, [r2, #36]	; 0x24
 8002f2c:	f8c2 e028 	str.w	lr, [r2, #40]	; 0x28
 8002f30:	f102 033c 	add.w	r3, r2, #60	; 0x3c
 8002f34:	f102 0e40 	add.w	lr, r2, #64	; 0x40
 8002f38:	6311      	str	r1, [r2, #48]	; 0x30
  mp->align = align;
 8002f3a:	2104      	movs	r1, #4
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f3c:	4835      	ldr	r0, [pc, #212]	; (8003014 <main+0x334>)
 8002f3e:	63d3      	str	r3, [r2, #60]	; 0x3c
 8002f40:	f8c2 e040 	str.w	lr, [r2, #64]	; 0x40
  mp->provider = provider;
 8002f44:	4b34      	ldr	r3, [pc, #208]	; (8003018 <main+0x338>)
  mp->align = align;
 8002f46:	61d1      	str	r1, [r2, #28]
 8002f48:	6351      	str	r1, [r2, #52]	; 0x34
  ch_memcore.nextmem = __heap_base__;
 8002f4a:	f8df c0f0 	ldr.w	ip, [pc, #240]	; 800303c <main+0x35c>
 8002f4e:	f8df e0f0 	ldr.w	lr, [pc, #240]	; 8003040 <main+0x360>
  ch_memcore.endmem  = __heap_end__;
 8002f52:	4932      	ldr	r1, [pc, #200]	; (800301c <main+0x33c>)
  mp->provider = provider;
 8002f54:	6213      	str	r3, [r2, #32]
 8002f56:	6393      	str	r3, [r2, #56]	; 0x38
  tp->name      = name;
 8002f58:	4b31      	ldr	r3, [pc, #196]	; (8003020 <main+0x340>)
  tp->prio      = prio;
 8002f5a:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
 8002f5e:	e9cc e100 	strd	lr, r1, [ip]
  tp->realprio  = prio;
 8002f62:	f8c4 906c 	str.w	r9, [r4, #108]	; 0x6c
 8002f66:	6096      	str	r6, [r2, #8]
  mp->next = NULL;
 8002f68:	6156      	str	r6, [r2, #20]
 8002f6a:	62d6      	str	r6, [r2, #44]	; 0x2c
  tp->flags     = CH_FLAG_MODE_STATIC;
 8002f6c:	f884 6051 	strb.w	r6, [r4, #81]	; 0x51
  tp->epending  = (eventmask_t)0;
 8002f70:	e9c4 6619 	strd	r6, r6, [r4, #100]	; 0x64
  tp->refs      = (trefs_t)1;
 8002f74:	f884 8052 	strb.w	r8, [r4, #82]	; 0x52
 8002f78:	e9c2 2200 	strd	r2, r2, [r2]
  tp->name      = name;
 8002f7c:	64a3      	str	r3, [r4, #72]	; 0x48
 8002f7e:	68c1      	ldr	r1, [r0, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 8002f80:	4b28      	ldr	r3, [pc, #160]	; (8003024 <main+0x344>)
  REG_INSERT(tp);
 8002f82:	f8d4 e014 	ldr.w	lr, [r4, #20]
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8002f86:	f8df c0bc 	ldr.w	ip, [pc, #188]	; 8003044 <main+0x364>
 8002f8a:	6424      	str	r4, [r4, #64]	; 0x40
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f8c:	f64f 02ff 	movw	r2, #63743	; 0xf8ff
 8002f90:	4011      	ands	r1, r2
  reg_value  =  (reg_value                                   |
 8002f92:	430b      	orrs	r3, r1
 8002f94:	f104 0230 	add.w	r2, r4, #48	; 0x30
 8002f98:	f8c4 e044 	str.w	lr, [r4, #68]	; 0x44
 8002f9c:	f8ce 2010 	str.w	r2, [lr, #16]
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
  SCB->AIRCR =  reg_value;
 8002fa0:	60c3      	str	r3, [r0, #12]
 8002fa2:	f8dc 300c 	ldr.w	r3, [ip, #12]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8002fa6:	4920      	ldr	r1, [pc, #128]	; (8003028 <main+0x348>)
 8002fa8:	6162      	str	r2, [r4, #20]
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8002faa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002fae:	f8cc 300c 	str.w	r3, [ip, #12]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8002fb2:	680b      	ldr	r3, [r1, #0]
  currp = _thread_init(&ch.mainthread, (const char *)&ch_debug, NORMALPRIO);
 8002fb4:	61a2      	str	r2, [r4, #24]
 8002fb6:	ea43 0308 	orr.w	r3, r3, r8
  tqp->next = (thread_t *)tqp;
 8002fba:	f104 025c 	add.w	r2, r4, #92	; 0x5c
  tlp->next = (thread_t *)tlp;
 8002fbe:	f104 0c58 	add.w	ip, r4, #88	; 0x58
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fc2:	f04f 0920 	mov.w	r9, #32
  currp->wabase = NULL;
 8002fc6:	64e6      	str	r6, [r4, #76]	; 0x4c
  currp->state = CH_STATE_CURRENT;
 8002fc8:	f884 8050 	strb.w	r8, [r4, #80]	; 0x50
 8002fcc:	600b      	str	r3, [r1, #0]
 8002fce:	f8c4 c058 	str.w	ip, [r4, #88]	; 0x58
 8002fd2:	f880 a01f 	strb.w	sl, [r0, #31]
  tqp->next = (thread_t *)tqp;
 8002fd6:	65e2      	str	r2, [r4, #92]	; 0x5c
 8002fd8:	f880 9022 	strb.w	r9, [r0, #34]	; 0x22
  tqp->prev = (thread_t *)tqp;
 8002fdc:	6622      	str	r2, [r4, #96]	; 0x60
 8002fde:	f386 8811 	msr	BASEPRI, r6
  __ASM volatile ("cpsie i" : : : "memory");
 8002fe2:	b662      	cpsie	i
 8002fe4:	e030      	b.n	8003048 <main+0x368>
 8002fe6:	bf00      	nop
 8002fe8:	40021000 	.word	0x40021000
 8002fec:	20000890 	.word	0x20000890
 8002ff0:	e000e100 	.word	0xe000e100
 8002ff4:	20000b08 	.word	0x20000b08
 8002ff8:	e0042000 	.word	0xe0042000
 8002ffc:	20000b18 	.word	0x20000b18
 8003000:	080004e1 	.word	0x080004e1
 8003004:	04c4b400 	.word	0x04c4b400
 8003008:	200008f0 	.word	0x200008f0
 800300c:	20000a90 	.word	0x20000a90
 8003010:	20000968 	.word	0x20000968
 8003014:	e000ed00 	.word	0xe000ed00
 8003018:	08000b61 	.word	0x08000b61
 800301c:	20010000 	.word	0x20010000
 8003020:	080076f0 	.word	0x080076f0
 8003024:	05fa0300 	.word	0x05fa0300
 8003028:	e0001000 	.word	0xe0001000
 800302c:	40007000 	.word	0x40007000
 8003030:	08009854 	.word	0x08009854
 8003034:	40004400 	.word	0x40004400
 8003038:	08000491 	.word	0x08000491
 800303c:	20000a88 	.word	0x20000a88
 8003040:	200013f8 	.word	0x200013f8
 8003044:	e000edf0 	.word	0xe000edf0
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8003048:	f389 8811 	msr	BASEPRI, r9
  tp = chThdCreateSuspendedI(tdp);
 800304c:	4822      	ldr	r0, [pc, #136]	; (80030d8 <main+0x3f8>)
 800304e:	f7fd ff17 	bl	8000e80 <chThdCreateSuspendedI>
  chSchWakeupS(tp, MSG_OK);
 8003052:	4631      	mov	r1, r6
 8003054:	f7fe fdb4 	bl	8001bc0 <chSchWakeupS>
 8003058:	f386 8811 	msr	BASEPRI, r6
 800305c:	f389 8811 	msr	BASEPRI, r9
void sd_lld_start(SerialDriver *sdp, const SerialConfig *config) {

  if (config == NULL)
    config = &default_config;

  if (sdp->state == SD_STOP) {
 8003060:	7a2b      	ldrb	r3, [r5, #8]
 8003062:	4543      	cmp	r3, r8
 8003064:	d02e      	beq.n	80030c4 <main+0x3e4>
    fck = (uint32_t)(sdp->clock / config->speed);
 8003066:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8003068:	491c      	ldr	r1, [pc, #112]	; (80030dc <main+0x3fc>)
  USART_TypeDef *u = sdp->usart;
 800306a:	6d6a      	ldr	r2, [r5, #84]	; 0x54
    fck = (uint32_t)(sdp->clock / config->speed);
 800306c:	fba1 1303 	umull	r1, r3, r1, r3
 8003070:	0b1b      	lsrs	r3, r3, #12
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
 8003072:	2040      	movs	r0, #64	; 0x40
  u->BRR = fck;
 8003074:	60d3      	str	r3, [r2, #12]
  u->ICR = 0xFFFFFFFFU;
 8003076:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
 800307a:	6050      	str	r0, [r2, #4]
  u->CR3 = config->cr3 | USART_CR3_EIE;
 800307c:	2601      	movs	r6, #1
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
 800307e:	f240 142d 	movw	r4, #301	; 0x12d

  osalSysLock();
  osalDbgAssert((sdp->state == SD_STOP) || (sdp->state == SD_READY),
                "invalid state");
  sd_lld_start(sdp, config);
  sdp->state = SD_READY;
 8003082:	2002      	movs	r0, #2
  u->CR3 = config->cr3 | USART_CR3_EIE;
 8003084:	6096      	str	r6, [r2, #8]
 8003086:	2300      	movs	r3, #0
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
 8003088:	6014      	str	r4, [r2, #0]
  u->ICR = 0xFFFFFFFFU;
 800308a:	6211      	str	r1, [r2, #32]
 800308c:	7228      	strb	r0, [r5, #8]
    sdp->rxmask = 0xFF;
 800308e:	f885 105c 	strb.w	r1, [r5, #92]	; 0x5c
 8003092:	f383 8811 	msr	BASEPRI, r3
  sdStart(&SD2, NULL);

  /*
   * Creates the blinker thread.
   */
  chThdCreateStatic(waThread1, sizeof(waThread1), NORMALPRIO, Thread1, NULL);
 8003096:	4a12      	ldr	r2, [pc, #72]	; (80030e0 <main+0x400>)
 8003098:	4812      	ldr	r0, [pc, #72]	; (80030e4 <main+0x404>)
  /*
   * Normal main() thread activity, in this demo it does nothing except
   * sleeping in a loop and check the button state.
   */
  while (true) {
    if (!palReadLine(LINE_ARD_D3)) {
 800309a:	4c13      	ldr	r4, [pc, #76]	; (80030e8 <main+0x408>)
      test_execute((BaseSequentialStream *)&SD2, &rt_test_suite);
 800309c:	4e13      	ldr	r6, [pc, #76]	; (80030ec <main+0x40c>)
      test_execute((BaseSequentialStream *)&SD2, &oslib_test_suite);
 800309e:	4d14      	ldr	r5, [pc, #80]	; (80030f0 <main+0x410>)
  chThdCreateStatic(waThread1, sizeof(waThread1), NORMALPRIO, Thread1, NULL);
 80030a0:	2180      	movs	r1, #128	; 0x80
 80030a2:	f7fe fdbd 	bl	8001c20 <chThdCreateStatic.constprop.62>
 80030a6:	e003      	b.n	80030b0 <main+0x3d0>
    }
    chThdSleepMilliseconds(500);
 80030a8:	f241 3088 	movw	r0, #5000	; 0x1388
 80030ac:	f7ff f8d8 	bl	8002260 <chThdSleep>
    if (!palReadLine(LINE_ARD_D3)) {
 80030b0:	6923      	ldr	r3, [r4, #16]
 80030b2:	07db      	lsls	r3, r3, #31
 80030b4:	d4f8      	bmi.n	80030a8 <main+0x3c8>
      test_execute((BaseSequentialStream *)&SD2, &rt_test_suite);
 80030b6:	4630      	mov	r0, r6
 80030b8:	f7ff f8e2 	bl	8002280 <test_execute.constprop.1>
      test_execute((BaseSequentialStream *)&SD2, &oslib_test_suite);
 80030bc:	4628      	mov	r0, r5
 80030be:	f7ff f8df 	bl	8002280 <test_execute.constprop.1>
 80030c2:	e7f1      	b.n	80030a8 <main+0x3c8>
      rccEnableUSART1(true);
    }
#endif
#if STM32_SERIAL_USE_USART2
    if (&SD2 == sdp) {
      rccEnableUSART2(true);
 80030c4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80030c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030ca:	65bb      	str	r3, [r7, #88]	; 0x58
 80030cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80030ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030d2:	67bb      	str	r3, [r7, #120]	; 0x78
 80030d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80030d6:	e7c6      	b.n	8003066 <main+0x386>
 80030d8:	08007714 	.word	0x08007714
 80030dc:	1b4e81b5 	.word	0x1b4e81b5
 80030e0:	080025d1 	.word	0x080025d1
 80030e4:	200012b0 	.word	0x200012b0
 80030e8:	48000400 	.word	0x48000400
 80030ec:	08008e24 	.word	0x08008e24
 80030f0:	08007a8c 	.word	0x08007a8c
	...

08003100 <SVC_Handler>:
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 8003100:	f3ef 8309 	mrs	r3, PSP
  ctxp++;
 8003104:	3320      	adds	r3, #32
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 8003106:	f383 8809 	msr	PSP, r3
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 800310a:	2300      	movs	r3, #0
 800310c:	f383 8811 	msr	BASEPRI, r3
}
 8003110:	4770      	bx	lr
 8003112:	bf00      	nop
	...

08003120 <chThdExit>:
void chThdExit(msg_t msg) {
 8003120:	b538      	push	{r3, r4, r5, lr}
 8003122:	2220      	movs	r2, #32
 8003124:	4603      	mov	r3, r0
 8003126:	f382 8811 	msr	BASEPRI, r2
  thread_t *tp = currp;
 800312a:	4a10      	ldr	r2, [pc, #64]	; (800316c <chThdExit+0x4c>)
 800312c:	6994      	ldr	r4, [r2, #24]
  return (bool)(tlp->next != (thread_t *)tlp);
 800312e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  tp->u.exitcode = msg;
 8003130:	6263      	str	r3, [r4, #36]	; 0x24
  while (list_notempty(&tp->waiting)) {
 8003132:	f104 0528 	add.w	r5, r4, #40	; 0x28
 8003136:	42a8      	cmp	r0, r5
 8003138:	d006      	beq.n	8003148 <chThdExit+0x28>
  tlp->next = tp->queue.next;
 800313a:	6803      	ldr	r3, [r0, #0]
 800313c:	62a3      	str	r3, [r4, #40]	; 0x28
    (void) chSchReadyI(list_remove(&tp->waiting));
 800313e:	f7fd ff17 	bl	8000f70 <chSchReadyI>
  return (bool)(tlp->next != (thread_t *)tlp);
 8003142:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  while (list_notempty(&tp->waiting)) {
 8003144:	42a8      	cmp	r0, r5
 8003146:	d1f8      	bne.n	800313a <chThdExit+0x1a>
  if ((tp->refs == (trefs_t)0) &&
 8003148:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 800314c:	b943      	cbnz	r3, 8003160 <chThdExit+0x40>
 800314e:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 8003152:	079b      	lsls	r3, r3, #30
 8003154:	d104      	bne.n	8003160 <chThdExit+0x40>
    REG_REMOVE(tp);
 8003156:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 800315a:	611a      	str	r2, [r3, #16]
 800315c:	6922      	ldr	r2, [r4, #16]
 800315e:	6153      	str	r3, [r2, #20]
  chSchGoSleepS(CH_STATE_FINAL);
 8003160:	200f      	movs	r0, #15
}
 8003162:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  chSchGoSleepS(CH_STATE_FINAL);
 8003166:	f7fe be0b 	b.w	8001d80 <chSchGoSleepS>
 800316a:	bf00      	nop
 800316c:	200008f0 	.word	0x200008f0

08003170 <bmk_thread3>:
  chThdExit((msg_t)p);
 8003170:	f7ff bfd6 	b.w	8003120 <chThdExit>
	...

08003180 <chSchDoReschedule>:
 *          itself.
 *
 * @special
 */
void chSchDoRescheduleAhead(void) {
  thread_t *otp = currp;
 8003180:	4a0e      	ldr	r2, [pc, #56]	; (80031bc <chSchDoReschedule+0x3c>)
  thread_t *tp = tqp->next;
 8003182:	6810      	ldr	r0, [r2, #0]
  tqp->next             = tp->queue.next;
 8003184:	6803      	ldr	r3, [r0, #0]
void chSchDoRescheduleAhead(void) {
 8003186:	b430      	push	{r4, r5}

  /* Picks the first thread from the ready queue and makes it current.*/
  currp = queue_fifo_remove(&ch.rlist.queue);
  currp->state = CH_STATE_CURRENT;
 8003188:	2101      	movs	r1, #1
  thread_t *otp = currp;
 800318a:	6994      	ldr	r4, [r2, #24]
  tqp->next->queue.prev = (thread_t *)tqp;
 800318c:	605a      	str	r2, [r3, #4]
  tp->state = CH_STATE_READY;
 800318e:	2500      	movs	r5, #0
  currp->state = CH_STATE_CURRENT;
 8003190:	f880 1020 	strb.w	r1, [r0, #32]

  /* Handling idle-leave hook.*/
  if (otp->prio == IDLEPRIO) {
 8003194:	68a1      	ldr	r1, [r4, #8]
  tqp->next             = tp->queue.next;
 8003196:	6013      	str	r3, [r2, #0]
  currp = queue_fifo_remove(&ch.rlist.queue);
 8003198:	6190      	str	r0, [r2, #24]
  tp->state = CH_STATE_READY;
 800319a:	f884 5020 	strb.w	r5, [r4, #32]
 800319e:	e000      	b.n	80031a2 <chSchDoReschedule+0x22>
 80031a0:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio > tp->prio);
 80031a2:	689a      	ldr	r2, [r3, #8]
 80031a4:	4291      	cmp	r1, r2
 80031a6:	d3fb      	bcc.n	80031a0 <chSchDoReschedule+0x20>
  tp->queue.prev             = cp->queue.prev;
 80031a8:	685a      	ldr	r2, [r3, #4]

  /* Placing in ready list ahead of peers.*/
  otp = chSchReadyAheadI(otp);

  /* Swap operation as tail call.*/
  chSysSwitch(currp, otp);
 80031aa:	4621      	mov	r1, r4
  tp->queue.prev             = cp->queue.prev;
 80031ac:	e9c4 3200 	strd	r3, r2, [r4]
  tp->queue.prev->queue.next = tp;
 80031b0:	6014      	str	r4, [r2, #0]
  cp->queue.prev             = tp;
 80031b2:	605c      	str	r4, [r3, #4]
}
 80031b4:	bc30      	pop	{r4, r5}
  chSysSwitch(currp, otp);
 80031b6:	f7fd b863 	b.w	8000280 <_port_switch>
 80031ba:	bf00      	nop
 80031bc:	200008f0 	.word	0x200008f0

080031c0 <chSchRescheduleS>:
  return firstprio(&ch.rlist.queue) > currp->prio;
 80031c0:	4b04      	ldr	r3, [pc, #16]	; (80031d4 <chSchRescheduleS+0x14>)
 80031c2:	681a      	ldr	r2, [r3, #0]
 80031c4:	699b      	ldr	r3, [r3, #24]
  if (chSchIsRescRequiredI()) {
 80031c6:	6892      	ldr	r2, [r2, #8]
 80031c8:	689b      	ldr	r3, [r3, #8]
 80031ca:	429a      	cmp	r2, r3
 80031cc:	d800      	bhi.n	80031d0 <chSchRescheduleS+0x10>
}
 80031ce:	4770      	bx	lr
    chSchDoRescheduleAhead();
 80031d0:	f7ff bfd6 	b.w	8003180 <chSchDoReschedule>
 80031d4:	200008f0 	.word	0x200008f0
	...

080031e0 <chSemSignalWait.constprop.55>:
 *                      semaphore has been signaled.
 * @retval MSG_RESET    if the semaphore has been reset using @p chSemReset().
 *
 * @api
 */
msg_t chSemSignalWait(semaphore_t *sps, semaphore_t *spw) {
 80031e0:	b538      	push	{r3, r4, r5, lr}
 80031e2:	2320      	movs	r3, #32
 80031e4:	f383 8811 	msr	BASEPRI, r3
              ((sps->cnt < (cnt_t)0) && queue_notempty(&sps->queue)),
              "inconsistent semaphore");
  chDbgAssert(((spw->cnt >= (cnt_t)0) && queue_isempty(&spw->queue)) ||
              ((spw->cnt < (cnt_t)0) && queue_notempty(&spw->queue)),
              "inconsistent semaphore");
  if (++sps->cnt <= (cnt_t)0) {
 80031e8:	4c15      	ldr	r4, [pc, #84]	; (8003240 <chSemSignalWait.constprop.55+0x60>)
 80031ea:	68a3      	ldr	r3, [r4, #8]
 80031ec:	3301      	adds	r3, #1
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	60a3      	str	r3, [r4, #8]
 80031f2:	dd1a      	ble.n	800322a <chSemSignalWait.constprop.55+0x4a>
    chSchReadyI(queue_fifo_remove(&sps->queue))->u.rdymsg = MSG_OK;
  }
  if (--spw->cnt < (cnt_t)0) {
 80031f4:	3b01      	subs	r3, #1
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	60a3      	str	r3, [r4, #8]
 80031fa:	db06      	blt.n	800320a <chSemSignalWait.constprop.55+0x2a>
    ctp->u.wtsemp = spw;
    chSchGoSleepS(CH_STATE_WTSEM);
    msg = ctp->u.rdymsg;
  }
  else {
    chSchRescheduleS();
 80031fc:	f7ff ffe0 	bl	80031c0 <chSchRescheduleS>
    msg = MSG_OK;
 8003200:	2000      	movs	r0, #0
 8003202:	2300      	movs	r3, #0
 8003204:	f383 8811 	msr	BASEPRI, r3
  }
  chSysUnlock();

  return msg;
}
 8003208:	bd38      	pop	{r3, r4, r5, pc}
    thread_t *ctp = currp;
 800320a:	4a0e      	ldr	r2, [pc, #56]	; (8003244 <chSemSignalWait.constprop.55+0x64>)
  tp->queue.prev             = tqp->prev;
 800320c:	6863      	ldr	r3, [r4, #4]
 800320e:	6995      	ldr	r5, [r2, #24]
    chSchGoSleepS(CH_STATE_WTSEM);
 8003210:	2005      	movs	r0, #5
 8003212:	e9c5 4300 	strd	r4, r3, [r5]
  tp->queue.prev->queue.next = tp;
 8003216:	601d      	str	r5, [r3, #0]
    ctp->u.wtsemp = spw;
 8003218:	626c      	str	r4, [r5, #36]	; 0x24
  tqp->prev                  = tp;
 800321a:	6065      	str	r5, [r4, #4]
    chSchGoSleepS(CH_STATE_WTSEM);
 800321c:	f7fe fdb0 	bl	8001d80 <chSchGoSleepS>
    msg = ctp->u.rdymsg;
 8003220:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8003222:	2300      	movs	r3, #0
 8003224:	f383 8811 	msr	BASEPRI, r3
}
 8003228:	bd38      	pop	{r3, r4, r5, pc}
  thread_t *tp = tqp->next;
 800322a:	6820      	ldr	r0, [r4, #0]
  tqp->next             = tp->queue.next;
 800322c:	6803      	ldr	r3, [r0, #0]
 800322e:	6023      	str	r3, [r4, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 8003230:	605c      	str	r4, [r3, #4]
    chSchReadyI(queue_fifo_remove(&sps->queue))->u.rdymsg = MSG_OK;
 8003232:	f7fd fe9d 	bl	8000f70 <chSchReadyI>
 8003236:	2200      	movs	r2, #0
 8003238:	68a3      	ldr	r3, [r4, #8]
 800323a:	6242      	str	r2, [r0, #36]	; 0x24
 800323c:	e7da      	b.n	80031f4 <chSemSignalWait.constprop.55+0x14>
 800323e:	bf00      	nop
 8003240:	20000b28 	.word	0x20000b28
 8003244:	200008f0 	.word	0x200008f0
	...

08003250 <rt_test_005_005_execute>:

static void rt_test_005_005_teardown(void) {
  test_wait_threads();
}

static void rt_test_005_005_execute(void) {
 8003250:	b538      	push	{r3, r4, r5, lr}
  return ch.rlist.current;
 8003252:	4b1e      	ldr	r3, [pc, #120]	; (80032cc <rt_test_005_005_execute+0x7c>)

  /* [5.5.1] An higher priority thread is created that performs
     non-atomical wait and signal operations on a semaphore.*/
  test_set_step(1);
 8003254:	4d1e      	ldr	r5, [pc, #120]	; (80032d0 <rt_test_005_005_execute+0x80>)
  return chThdGetSelfX()->prio;
 8003256:	699b      	ldr	r3, [r3, #24]
  {
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread3, 0);
 8003258:	4a1e      	ldr	r2, [pc, #120]	; (80032d4 <rt_test_005_005_execute+0x84>)
 800325a:	6899      	ldr	r1, [r3, #8]
 800325c:	481e      	ldr	r0, [pc, #120]	; (80032d8 <rt_test_005_005_execute+0x88>)
  return (bool)(tqp->next == (const thread_t *)tqp);
 800325e:	4c1f      	ldr	r4, [pc, #124]	; (80032dc <rt_test_005_005_execute+0x8c>)
  test_set_step(1);
 8003260:	2301      	movs	r3, #1
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread3, 0);
 8003262:	3101      	adds	r1, #1
  test_set_step(1);
 8003264:	602b      	str	r3, [r5, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread3, 0);
 8003266:	2300      	movs	r3, #0
 8003268:	f7fe fcda 	bl	8001c20 <chThdCreateStatic.constprop.62>
 800326c:	4a1c      	ldr	r2, [pc, #112]	; (80032e0 <rt_test_005_005_execute+0x90>)
  }

  /* [5.5.2] The function chSemSignalWait() is invoked by specifying
     the same semaphore for the wait and signal phases. The counter
     value must be one on exit.*/
  test_set_step(2);
 800326e:	2302      	movs	r3, #2
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread3, 0);
 8003270:	6010      	str	r0, [r2, #0]
  test_set_step(2);
 8003272:	602b      	str	r3, [r5, #0]
  {
    chSemSignalWait(&sem1, &sem1);
 8003274:	f7ff ffb4 	bl	80031e0 <chSemSignalWait.constprop.55>
 8003278:	6820      	ldr	r0, [r4, #0]
    test_assert(queue_isempty(&sem1.queue), "queue not empty");
 800327a:	491a      	ldr	r1, [pc, #104]	; (80032e4 <rt_test_005_005_execute+0x94>)
 800327c:	1b00      	subs	r0, r0, r4
 800327e:	fab0 f080 	clz	r0, r0
 8003282:	0940      	lsrs	r0, r0, #5
 8003284:	f7fd fabc 	bl	8000800 <_test_assert>
 8003288:	b100      	cbz	r0, 800328c <rt_test_005_005_execute+0x3c>
  {
    chSemSignalWait(&sem1, &sem1);
    test_assert(queue_isempty(&sem1.queue), "queue not empty");
    test_assert(sem1.cnt == 0, "counter not zero");
  }
}
 800328a:	bd38      	pop	{r3, r4, r5, pc}
    test_assert(sem1.cnt == 0, "counter not zero");
 800328c:	68a0      	ldr	r0, [r4, #8]
 800328e:	4916      	ldr	r1, [pc, #88]	; (80032e8 <rt_test_005_005_execute+0x98>)
 8003290:	fab0 f080 	clz	r0, r0
 8003294:	0940      	lsrs	r0, r0, #5
 8003296:	f7fd fab3 	bl	8000800 <_test_assert>
 800329a:	2800      	cmp	r0, #0
 800329c:	d1f5      	bne.n	800328a <rt_test_005_005_execute+0x3a>
  test_set_step(3);
 800329e:	2303      	movs	r3, #3
 80032a0:	602b      	str	r3, [r5, #0]
    chSemSignalWait(&sem1, &sem1);
 80032a2:	f7ff ff9d 	bl	80031e0 <chSemSignalWait.constprop.55>
 80032a6:	6820      	ldr	r0, [r4, #0]
    test_assert(queue_isempty(&sem1.queue), "queue not empty");
 80032a8:	490e      	ldr	r1, [pc, #56]	; (80032e4 <rt_test_005_005_execute+0x94>)
 80032aa:	1b00      	subs	r0, r0, r4
 80032ac:	fab0 f080 	clz	r0, r0
 80032b0:	0940      	lsrs	r0, r0, #5
 80032b2:	f7fd faa5 	bl	8000800 <_test_assert>
 80032b6:	2800      	cmp	r0, #0
 80032b8:	d1e7      	bne.n	800328a <rt_test_005_005_execute+0x3a>
    test_assert(sem1.cnt == 0, "counter not zero");
 80032ba:	68a0      	ldr	r0, [r4, #8]
 80032bc:	490a      	ldr	r1, [pc, #40]	; (80032e8 <rt_test_005_005_execute+0x98>)
 80032be:	fab0 f080 	clz	r0, r0
 80032c2:	0940      	lsrs	r0, r0, #5
}
 80032c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    test_assert(sem1.cnt == 0, "counter not zero");
 80032c8:	f7fd ba9a 	b.w	8000800 <_test_assert>
 80032cc:	200008f0 	.word	0x200008f0
 80032d0:	20001254 	.word	0x20001254
 80032d4:	08002ac1 	.word	0x08002ac1
 80032d8:	20000b40 	.word	0x20000b40
 80032dc:	20000b28 	.word	0x20000b28
 80032e0:	2000126c 	.word	0x2000126c
 80032e4:	080087e0 	.word	0x080087e0
 80032e8:	080087f0 	.word	0x080087f0
 80032ec:	00000000 	.word	0x00000000

080032f0 <chMBReset.constprop.29>:
void chMBReset(mailbox_t *mbp) {
 80032f0:	b538      	push	{r3, r4, r5, lr}
 80032f2:	2320      	movs	r3, #32
 80032f4:	f383 8811 	msr	BASEPRI, r3
  mbp->wrptr = mbp->buffer;
 80032f8:	4c0a      	ldr	r4, [pc, #40]	; (8003324 <chMBReset.constprop.29+0x34>)
 80032fa:	6823      	ldr	r3, [r4, #0]
  mbp->reset = true;
 80032fc:	2201      	movs	r2, #1
  chThdDequeueAllI(&mbp->qw, MSG_RESET);
 80032fe:	f104 0018 	add.w	r0, r4, #24
  mbp->cnt   = (size_t)0;
 8003302:	2500      	movs	r5, #0
  mbp->reset = true;
 8003304:	7522      	strb	r2, [r4, #20]
  mbp->rdptr = mbp->buffer;
 8003306:	e9c4 3302 	strd	r3, r3, [r4, #8]
  mbp->cnt   = (size_t)0;
 800330a:	6125      	str	r5, [r4, #16]
  chThdDequeueAllI(&mbp->qw, MSG_RESET);
 800330c:	f7fd fed0 	bl	80010b0 <chThdDequeueAllI.constprop.59>
  chThdDequeueAllI(&mbp->qr, MSG_RESET);
 8003310:	f104 0020 	add.w	r0, r4, #32
 8003314:	f7fd fecc 	bl	80010b0 <chThdDequeueAllI.constprop.59>
  chSchRescheduleS();
 8003318:	f7ff ff52 	bl	80031c0 <chSchRescheduleS>
 800331c:	f385 8811 	msr	BASEPRI, r5
}
 8003320:	bd38      	pop	{r3, r4, r5, pc}
 8003322:	bf00      	nop
 8003324:	2000084c 	.word	0x2000084c
	...

08003330 <oslib_test_001_003_teardown>:

static void oslib_test_001_003_teardown(void) {
  chMBReset(&mb1);
 8003330:	f7ff bfde 	b.w	80032f0 <chMBReset.constprop.29>
	...

08003340 <oslib_test_001_002_teardown>:
 8003340:	f7ff bff6 	b.w	8003330 <oslib_test_001_003_teardown>
	...

08003350 <oslib_test_001_001_teardown>:
 8003350:	f7ff bfee 	b.w	8003330 <oslib_test_001_003_teardown>
	...

08003360 <chMBPostTimeout.constprop.27>:
msg_t chMBPostTimeout(mailbox_t *mbp, msg_t msg, sysinterval_t timeout) {
 8003360:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003364:	2320      	movs	r3, #32
 8003366:	4680      	mov	r8, r0
 8003368:	460e      	mov	r6, r1
 800336a:	f383 8811 	msr	BASEPRI, r3
 800336e:	4c18      	ldr	r4, [pc, #96]	; (80033d0 <chMBPostTimeout.constprop.27+0x70>)
    rdymsg = chThdEnqueueTimeoutS(&mbp->qw, timeout);
 8003370:	f104 0518 	add.w	r5, r4, #24
 8003374:	e00a      	b.n	800338c <chMBPostTimeout.constprop.27+0x2c>
  return chMBGetSizeI(mbp) - chMBGetUsedCountI(mbp);
 8003376:	e9d4 7200 	ldrd	r7, r2, [r4]
 800337a:	6923      	ldr	r3, [r4, #16]
  return (size_t)(mbp->top - mbp->buffer);
 800337c:	eba2 0e07 	sub.w	lr, r2, r7
    if (chMBGetFreeCountI(mbp) > (size_t)0) {
 8003380:	ebb3 0fae 	cmp.w	r3, lr, asr #2
 8003384:	d10e      	bne.n	80033a4 <chMBPostTimeout.constprop.27+0x44>
    rdymsg = chThdEnqueueTimeoutS(&mbp->qw, timeout);
 8003386:	f7fe fedb 	bl	8002140 <chThdEnqueueTimeoutS>
  } while (rdymsg == MSG_OK);
 800338a:	b930      	cbnz	r0, 800339a <chMBPostTimeout.constprop.27+0x3a>
    if (mbp->reset) {
 800338c:	7d23      	ldrb	r3, [r4, #20]
    rdymsg = chThdEnqueueTimeoutS(&mbp->qw, timeout);
 800338e:	4631      	mov	r1, r6
 8003390:	4628      	mov	r0, r5
    if (mbp->reset) {
 8003392:	2b00      	cmp	r3, #0
 8003394:	d0ef      	beq.n	8003376 <chMBPostTimeout.constprop.27+0x16>
      return MSG_RESET;
 8003396:	f06f 0001 	mvn.w	r0, #1
 800339a:	2300      	movs	r3, #0
 800339c:	f383 8811 	msr	BASEPRI, r3
}
 80033a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      *mbp->wrptr++ = msg;
 80033a4:	68a0      	ldr	r0, [r4, #8]
 80033a6:	1d01      	adds	r1, r0, #4
 80033a8:	60a1      	str	r1, [r4, #8]
      if (mbp->wrptr >= mbp->top) {
 80033aa:	428a      	cmp	r2, r1
      *mbp->wrptr++ = msg;
 80033ac:	f8c0 8000 	str.w	r8, [r0]
      mbp->cnt++;
 80033b0:	f103 0301 	add.w	r3, r3, #1
      chThdDequeueNextI(&mbp->qr, MSG_OK);
 80033b4:	4807      	ldr	r0, [pc, #28]	; (80033d4 <chMBPostTimeout.constprop.27+0x74>)
        mbp->wrptr = mbp->buffer;
 80033b6:	bf98      	it	ls
 80033b8:	60a7      	strls	r7, [r4, #8]
      mbp->cnt++;
 80033ba:	6123      	str	r3, [r4, #16]
      chThdDequeueNextI(&mbp->qr, MSG_OK);
 80033bc:	f7fd fdf0 	bl	8000fa0 <chThdDequeueNextI.constprop.75>
      chSchRescheduleS();
 80033c0:	f7ff fefe 	bl	80031c0 <chSchRescheduleS>
      return MSG_OK;
 80033c4:	2000      	movs	r0, #0
 80033c6:	2300      	movs	r3, #0
 80033c8:	f383 8811 	msr	BASEPRI, r3
}
 80033cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80033d0:	2000084c 	.word	0x2000084c
 80033d4:	2000086c 	.word	0x2000086c
	...

080033e0 <chMBPostAheadTimeout.constprop.24>:
msg_t chMBPostAheadTimeout(mailbox_t *mbp, msg_t msg, sysinterval_t timeout) {
 80033e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80033e4:	2320      	movs	r3, #32
 80033e6:	4680      	mov	r8, r0
 80033e8:	460e      	mov	r6, r1
 80033ea:	f383 8811 	msr	BASEPRI, r3
 80033ee:	4c18      	ldr	r4, [pc, #96]	; (8003450 <chMBPostAheadTimeout.constprop.24+0x70>)
    rdymsg = chThdEnqueueTimeoutS(&mbp->qw, timeout);
 80033f0:	f104 0518 	add.w	r5, r4, #24
 80033f4:	e00a      	b.n	800340c <chMBPostAheadTimeout.constprop.24+0x2c>
  return chMBGetSizeI(mbp) - chMBGetUsedCountI(mbp);
 80033f6:	e9d4 2700 	ldrd	r2, r7, [r4]
 80033fa:	6923      	ldr	r3, [r4, #16]
  return (size_t)(mbp->top - mbp->buffer);
 80033fc:	eba7 0e02 	sub.w	lr, r7, r2
    if (chMBGetFreeCountI(mbp) > (size_t)0) {
 8003400:	ebb3 0fae 	cmp.w	r3, lr, asr #2
 8003404:	d10e      	bne.n	8003424 <chMBPostAheadTimeout.constprop.24+0x44>
    rdymsg = chThdEnqueueTimeoutS(&mbp->qw, timeout);
 8003406:	f7fe fe9b 	bl	8002140 <chThdEnqueueTimeoutS>
  } while (rdymsg == MSG_OK);
 800340a:	b930      	cbnz	r0, 800341a <chMBPostAheadTimeout.constprop.24+0x3a>
    if (mbp->reset) {
 800340c:	7d23      	ldrb	r3, [r4, #20]
    rdymsg = chThdEnqueueTimeoutS(&mbp->qw, timeout);
 800340e:	4631      	mov	r1, r6
 8003410:	4628      	mov	r0, r5
    if (mbp->reset) {
 8003412:	2b00      	cmp	r3, #0
 8003414:	d0ef      	beq.n	80033f6 <chMBPostAheadTimeout.constprop.24+0x16>
      return MSG_RESET;
 8003416:	f06f 0001 	mvn.w	r0, #1
 800341a:	2300      	movs	r3, #0
 800341c:	f383 8811 	msr	BASEPRI, r3
}
 8003420:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (--mbp->rdptr < mbp->buffer) {
 8003424:	68e1      	ldr	r1, [r4, #12]
      chThdDequeueNextI(&mbp->qr, MSG_OK);
 8003426:	480b      	ldr	r0, [pc, #44]	; (8003454 <chMBPostAheadTimeout.constprop.24+0x74>)
      if (--mbp->rdptr < mbp->buffer) {
 8003428:	3904      	subs	r1, #4
 800342a:	428a      	cmp	r2, r1
        mbp->rdptr = mbp->top - 1;
 800342c:	bf88      	it	hi
 800342e:	1f39      	subhi	r1, r7, #4
 8003430:	60e1      	str	r1, [r4, #12]
      mbp->cnt++;
 8003432:	3301      	adds	r3, #1
      *mbp->rdptr = msg;
 8003434:	f8c1 8000 	str.w	r8, [r1]
      mbp->cnt++;
 8003438:	6123      	str	r3, [r4, #16]
      chThdDequeueNextI(&mbp->qr, MSG_OK);
 800343a:	f7fd fdb1 	bl	8000fa0 <chThdDequeueNextI.constprop.75>
      chSchRescheduleS();
 800343e:	f7ff febf 	bl	80031c0 <chSchRescheduleS>
      return MSG_OK;
 8003442:	2000      	movs	r0, #0
 8003444:	2300      	movs	r3, #0
 8003446:	f383 8811 	msr	BASEPRI, r3
}
 800344a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800344e:	bf00      	nop
 8003450:	2000084c 	.word	0x2000084c
 8003454:	2000086c 	.word	0x2000086c
	...

08003460 <chMBFetchTimeout.constprop.21>:
msg_t chMBFetchTimeout(mailbox_t *mbp, msg_t *msgp, sysinterval_t timeout) {
 8003460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003462:	4607      	mov	r7, r0
 8003464:	460e      	mov	r6, r1
 8003466:	2320      	movs	r3, #32
 8003468:	f383 8811 	msr	BASEPRI, r3
 800346c:	4c15      	ldr	r4, [pc, #84]	; (80034c4 <chMBFetchTimeout.constprop.21+0x64>)
    rdymsg = chThdEnqueueTimeoutS(&mbp->qr, timeout);
 800346e:	18e5      	adds	r5, r4, r3
 8003470:	e004      	b.n	800347c <chMBFetchTimeout.constprop.21+0x1c>
    if (chMBGetUsedCountI(mbp) > (size_t)0) {
 8003472:	6923      	ldr	r3, [r4, #16]
 8003474:	b96b      	cbnz	r3, 8003492 <chMBFetchTimeout.constprop.21+0x32>
    rdymsg = chThdEnqueueTimeoutS(&mbp->qr, timeout);
 8003476:	f7fe fe63 	bl	8002140 <chThdEnqueueTimeoutS>
  } while (rdymsg == MSG_OK);
 800347a:	b930      	cbnz	r0, 800348a <chMBFetchTimeout.constprop.21+0x2a>
    if (mbp->reset) {
 800347c:	7d23      	ldrb	r3, [r4, #20]
    rdymsg = chThdEnqueueTimeoutS(&mbp->qr, timeout);
 800347e:	4631      	mov	r1, r6
 8003480:	4628      	mov	r0, r5
    if (mbp->reset) {
 8003482:	2b00      	cmp	r3, #0
 8003484:	d0f5      	beq.n	8003472 <chMBFetchTimeout.constprop.21+0x12>
      return MSG_RESET;
 8003486:	f06f 0001 	mvn.w	r0, #1
 800348a:	2300      	movs	r3, #0
 800348c:	f383 8811 	msr	BASEPRI, r3
}
 8003490:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      *msgp = *mbp->rdptr++;
 8003492:	68e2      	ldr	r2, [r4, #12]
      if (mbp->rdptr >= mbp->top) {
 8003494:	6861      	ldr	r1, [r4, #4]
      *msgp = *mbp->rdptr++;
 8003496:	6810      	ldr	r0, [r2, #0]
 8003498:	3204      	adds	r2, #4
      if (mbp->rdptr >= mbp->top) {
 800349a:	428a      	cmp	r2, r1
      *msgp = *mbp->rdptr++;
 800349c:	60e2      	str	r2, [r4, #12]
      mbp->cnt--;
 800349e:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
      *msgp = *mbp->rdptr++;
 80034a2:	6038      	str	r0, [r7, #0]
        mbp->rdptr = mbp->buffer;
 80034a4:	bf28      	it	cs
 80034a6:	6822      	ldrcs	r2, [r4, #0]
      chThdDequeueNextI(&mbp->qw, MSG_OK);
 80034a8:	4807      	ldr	r0, [pc, #28]	; (80034c8 <chMBFetchTimeout.constprop.21+0x68>)
        mbp->rdptr = mbp->buffer;
 80034aa:	bf28      	it	cs
 80034ac:	60e2      	strcs	r2, [r4, #12]
      mbp->cnt--;
 80034ae:	6123      	str	r3, [r4, #16]
      chThdDequeueNextI(&mbp->qw, MSG_OK);
 80034b0:	f7fd fd76 	bl	8000fa0 <chThdDequeueNextI.constprop.75>
      chSchRescheduleS();
 80034b4:	f7ff fe84 	bl	80031c0 <chSchRescheduleS>
      return MSG_OK;
 80034b8:	2000      	movs	r0, #0
 80034ba:	2300      	movs	r3, #0
 80034bc:	f383 8811 	msr	BASEPRI, r3
}
 80034c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80034c2:	bf00      	nop
 80034c4:	2000084c 	.word	0x2000084c
 80034c8:	20000864 	.word	0x20000864
 80034cc:	00000000 	.word	0x00000000

080034d0 <oslib_test_001_003_execute>:
}

static void oslib_test_001_003_execute(void) {
 80034d0:	b570      	push	{r4, r5, r6, lr}
  msg_t msg1, msg2;
  unsigned i;

  /* [1.3.1] Filling the mailbox.*/
  test_set_step(1);
 80034d2:	4e40      	ldr	r6, [pc, #256]	; (80035d4 <oslib_test_001_003_execute+0x104>)
  {
    for (i = 0; i < MB_SIZE; i++) {
      msg1 = chMBPostTimeout(&mb1, 'B' + i, TIME_INFINITE);
      test_assert(msg1 == MSG_OK, "wrong wake-up message");
 80034d4:	4d40      	ldr	r5, [pc, #256]	; (80035d8 <oslib_test_001_003_execute+0x108>)
  test_set_step(1);
 80034d6:	2301      	movs	r3, #1
static void oslib_test_001_003_execute(void) {
 80034d8:	b082      	sub	sp, #8
  test_set_step(1);
 80034da:	6033      	str	r3, [r6, #0]
 80034dc:	2442      	movs	r4, #66	; 0x42
      msg1 = chMBPostTimeout(&mb1, 'B' + i, TIME_INFINITE);
 80034de:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80034e2:	4620      	mov	r0, r4
 80034e4:	f7ff ff3c 	bl	8003360 <chMBPostTimeout.constprop.27>
      test_assert(msg1 == MSG_OK, "wrong wake-up message");
 80034e8:	fab0 f080 	clz	r0, r0
 80034ec:	4629      	mov	r1, r5
 80034ee:	0940      	lsrs	r0, r0, #5
 80034f0:	f7fd f986 	bl	8000800 <_test_assert>
 80034f4:	3401      	adds	r4, #1
 80034f6:	b988      	cbnz	r0, 800351c <oslib_test_001_003_execute+0x4c>
    for (i = 0; i < MB_SIZE; i++) {
 80034f8:	2c46      	cmp	r4, #70	; 0x46
 80034fa:	d1f0      	bne.n	80034de <oslib_test_001_003_execute+0xe>
    }
  }

  /* [1.3.2] Testing chMBPostTimeout(), chMBPostI(),
     chMBPostAheadTimeout() and chMBPostAheadI() timeout.*/
  test_set_step(2);
 80034fc:	2302      	movs	r3, #2
  {
    msg1 = chMBPostTimeout(&mb1, 'X', 1);
 80034fe:	2101      	movs	r1, #1
 8003500:	2058      	movs	r0, #88	; 0x58
  test_set_step(2);
 8003502:	6033      	str	r3, [r6, #0]
    msg1 = chMBPostTimeout(&mb1, 'X', 1);
 8003504:	f7ff ff2c 	bl	8003360 <chMBPostTimeout.constprop.27>
    test_assert(msg1 == MSG_TIMEOUT, "wrong wake-up message");
 8003508:	f1a0 30ff 	sub.w	r0, r0, #4294967295	; 0xffffffff
 800350c:	fab0 f080 	clz	r0, r0
 8003510:	4931      	ldr	r1, [pc, #196]	; (80035d8 <oslib_test_001_003_execute+0x108>)
 8003512:	0940      	lsrs	r0, r0, #5
 8003514:	f7fd f974 	bl	8000800 <_test_assert>
 8003518:	4604      	mov	r4, r0
 800351a:	b108      	cbz	r0, 8003520 <oslib_test_001_003_execute+0x50>
    chSysLock();
    msg1 = chMBFetchI(&mb1, &msg2);
    chSysUnlock();
    test_assert(msg1 == MSG_TIMEOUT, "wrong wake-up message");
  }
}
 800351c:	b002      	add	sp, #8
 800351e:	bd70      	pop	{r4, r5, r6, pc}
 8003520:	2520      	movs	r5, #32
 8003522:	f385 8811 	msr	BASEPRI, r5
    msg1 = chMBPostI(&mb1, 'X');
 8003526:	2058      	movs	r0, #88	; 0x58
 8003528:	f7fd fd4a 	bl	8000fc0 <chMBPostI.constprop.26>
 800352c:	f384 8811 	msr	BASEPRI, r4
    test_assert(msg1 == MSG_TIMEOUT, "wrong wake-up message");
 8003530:	f1a0 30ff 	sub.w	r0, r0, #4294967295	; 0xffffffff
 8003534:	fab0 f080 	clz	r0, r0
 8003538:	4927      	ldr	r1, [pc, #156]	; (80035d8 <oslib_test_001_003_execute+0x108>)
 800353a:	0940      	lsrs	r0, r0, #5
 800353c:	f7fd f960 	bl	8000800 <_test_assert>
 8003540:	2800      	cmp	r0, #0
 8003542:	d1eb      	bne.n	800351c <oslib_test_001_003_execute+0x4c>
    msg1 = chMBPostAheadTimeout(&mb1, 'X', 1);
 8003544:	2101      	movs	r1, #1
 8003546:	2058      	movs	r0, #88	; 0x58
 8003548:	f7ff ff4a 	bl	80033e0 <chMBPostAheadTimeout.constprop.24>
    test_assert(msg1 == MSG_TIMEOUT, "wrong wake-up message");
 800354c:	f1a0 30ff 	sub.w	r0, r0, #4294967295	; 0xffffffff
 8003550:	fab0 f080 	clz	r0, r0
 8003554:	4920      	ldr	r1, [pc, #128]	; (80035d8 <oslib_test_001_003_execute+0x108>)
 8003556:	0940      	lsrs	r0, r0, #5
 8003558:	f7fd f952 	bl	8000800 <_test_assert>
 800355c:	4604      	mov	r4, r0
 800355e:	2800      	cmp	r0, #0
 8003560:	d1dc      	bne.n	800351c <oslib_test_001_003_execute+0x4c>
 8003562:	f385 8811 	msr	BASEPRI, r5
    msg1 = chMBPostAheadI(&mb1, 'X');
 8003566:	2058      	movs	r0, #88	; 0x58
 8003568:	f7fd fd52 	bl	8001010 <chMBPostAheadI.constprop.23>
 800356c:	f384 8811 	msr	BASEPRI, r4
    test_assert(msg1 == MSG_TIMEOUT, "wrong wake-up message");
 8003570:	f1a0 30ff 	sub.w	r0, r0, #4294967295	; 0xffffffff
 8003574:	fab0 f080 	clz	r0, r0
 8003578:	4917      	ldr	r1, [pc, #92]	; (80035d8 <oslib_test_001_003_execute+0x108>)
 800357a:	0940      	lsrs	r0, r0, #5
 800357c:	f7fd f940 	bl	8000800 <_test_assert>
 8003580:	4604      	mov	r4, r0
 8003582:	2800      	cmp	r0, #0
 8003584:	d1ca      	bne.n	800351c <oslib_test_001_003_execute+0x4c>
  test_set_step(3);
 8003586:	2303      	movs	r3, #3
 8003588:	6033      	str	r3, [r6, #0]
    chMBReset(&mb1);
 800358a:	f7ff feb1 	bl	80032f0 <chMBReset.constprop.29>
 *
 * @xclass
 */
static inline void chMBResumeX(mailbox_t *mbp) {

  mbp->reset = false;
 800358e:	4b13      	ldr	r3, [pc, #76]	; (80035dc <oslib_test_001_003_execute+0x10c>)
    msg1 = chMBFetchTimeout(&mb1, &msg2, 1);
 8003590:	2101      	movs	r1, #1
 8003592:	751c      	strb	r4, [r3, #20]
 8003594:	a801      	add	r0, sp, #4
  test_set_step(4);
 8003596:	2304      	movs	r3, #4
 8003598:	6033      	str	r3, [r6, #0]
    msg1 = chMBFetchTimeout(&mb1, &msg2, 1);
 800359a:	f7ff ff61 	bl	8003460 <chMBFetchTimeout.constprop.21>
    test_assert(msg1 == MSG_TIMEOUT, "wrong wake-up message");
 800359e:	f1a0 30ff 	sub.w	r0, r0, #4294967295	; 0xffffffff
 80035a2:	fab0 f080 	clz	r0, r0
 80035a6:	490c      	ldr	r1, [pc, #48]	; (80035d8 <oslib_test_001_003_execute+0x108>)
 80035a8:	0940      	lsrs	r0, r0, #5
 80035aa:	f7fd f929 	bl	8000800 <_test_assert>
 80035ae:	4604      	mov	r4, r0
 80035b0:	2800      	cmp	r0, #0
 80035b2:	d1b3      	bne.n	800351c <oslib_test_001_003_execute+0x4c>
 80035b4:	f385 8811 	msr	BASEPRI, r5
    msg1 = chMBFetchI(&mb1, &msg2);
 80035b8:	a801      	add	r0, sp, #4
 80035ba:	f7fd fd51 	bl	8001060 <chMBFetchI.constprop.20>
 80035be:	f384 8811 	msr	BASEPRI, r4
    test_assert(msg1 == MSG_TIMEOUT, "wrong wake-up message");
 80035c2:	f1a0 30ff 	sub.w	r0, r0, #4294967295	; 0xffffffff
 80035c6:	fab0 f080 	clz	r0, r0
 80035ca:	4903      	ldr	r1, [pc, #12]	; (80035d8 <oslib_test_001_003_execute+0x108>)
 80035cc:	0940      	lsrs	r0, r0, #5
 80035ce:	f7fd f917 	bl	8000800 <_test_assert>
 80035d2:	e7a3      	b.n	800351c <oslib_test_001_003_execute+0x4c>
 80035d4:	20001254 	.word	0x20001254
 80035d8:	08007828 	.word	0x08007828
 80035dc:	2000084c 	.word	0x2000084c

080035e0 <oslib_test_001_002_execute>:
static void oslib_test_001_002_execute(void) {
 80035e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  test_set_step(1);
 80035e4:	4fad      	ldr	r7, [pc, #692]	; (800389c <oslib_test_001_002_execute+0x2bc>)
 80035e6:	f04f 0801 	mov.w	r8, #1
static void oslib_test_001_002_execute(void) {
 80035ea:	b082      	sub	sp, #8
  test_set_step(1);
 80035ec:	f8c7 8000 	str.w	r8, [r7]
 80035f0:	2620      	movs	r6, #32
 80035f2:	f386 8811 	msr	BASEPRI, r6
  return chMBGetSizeI(mbp) - chMBGetUsedCountI(mbp);
 80035f6:	4caa      	ldr	r4, [pc, #680]	; (80038a0 <oslib_test_001_002_execute+0x2c0>)
    test_assert_lock(chMBGetFreeCountI(&mb1) == MB_SIZE, "wrong size");
 80035f8:	49aa      	ldr	r1, [pc, #680]	; (80038a4 <oslib_test_001_002_execute+0x2c4>)
 80035fa:	6920      	ldr	r0, [r4, #16]
  return (size_t)(mbp->top - mbp->buffer);
 80035fc:	e9d4 2300 	ldrd	r2, r3, [r4]
 8003600:	1a9b      	subs	r3, r3, r2
  return chMBGetSizeI(mbp) - chMBGetUsedCountI(mbp);
 8003602:	ebc0 00a3 	rsb	r0, r0, r3, asr #2
 8003606:	f1a0 0004 	sub.w	r0, r0, #4
 800360a:	fab0 f080 	clz	r0, r0
 800360e:	0940      	lsrs	r0, r0, #5
 8003610:	f7fd f8f6 	bl	8000800 <_test_assert>
 8003614:	b128      	cbz	r0, 8003622 <oslib_test_001_002_execute+0x42>
 8003616:	2300      	movs	r3, #0
 8003618:	f383 8811 	msr	BASEPRI, r3
}
 800361c:	b002      	add	sp, #8
 800361e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003622:	4605      	mov	r5, r0
 8003624:	f380 8811 	msr	BASEPRI, r0
  test_set_step(2);
 8003628:	2302      	movs	r3, #2
 800362a:	603b      	str	r3, [r7, #0]
 800362c:	f386 8811 	msr	BASEPRI, r6
  mbp->wrptr = mbp->buffer;
 8003630:	6823      	ldr	r3, [r4, #0]
  mbp->cnt   = (size_t)0;
 8003632:	6120      	str	r0, [r4, #16]
  chThdDequeueAllI(&mbp->qw, MSG_RESET);
 8003634:	f104 0018 	add.w	r0, r4, #24
  mbp->rdptr = mbp->buffer;
 8003638:	e9c4 3302 	strd	r3, r3, [r4, #8]
  mbp->reset = true;
 800363c:	f884 8014 	strb.w	r8, [r4, #20]
  chThdDequeueAllI(&mbp->qw, MSG_RESET);
 8003640:	f7fd fd36 	bl	80010b0 <chThdDequeueAllI.constprop.59>
  chThdDequeueAllI(&mbp->qr, MSG_RESET);
 8003644:	f104 0020 	add.w	r0, r4, #32
 8003648:	f7fd fd32 	bl	80010b0 <chThdDequeueAllI.constprop.59>
 800364c:	f385 8811 	msr	BASEPRI, r5
 8003650:	f386 8811 	msr	BASEPRI, r6
  return (size_t)(mbp->top - mbp->buffer);
 8003654:	e9d4 2300 	ldrd	r2, r3, [r4]
  return chMBGetSizeI(mbp) - chMBGetUsedCountI(mbp);
 8003658:	6920      	ldr	r0, [r4, #16]
    test_assert_lock(chMBGetFreeCountI(&mb1) == MB_SIZE, "not empty");
 800365a:	4993      	ldr	r1, [pc, #588]	; (80038a8 <oslib_test_001_002_execute+0x2c8>)
  return (size_t)(mbp->top - mbp->buffer);
 800365c:	1a9b      	subs	r3, r3, r2
  return chMBGetSizeI(mbp) - chMBGetUsedCountI(mbp);
 800365e:	ebc0 00a3 	rsb	r0, r0, r3, asr #2
 8003662:	f1a0 0004 	sub.w	r0, r0, #4
 8003666:	fab0 f080 	clz	r0, r0
 800366a:	0940      	lsrs	r0, r0, #5
 800366c:	f7fd f8c8 	bl	8000800 <_test_assert>
 8003670:	4680      	mov	r8, r0
 8003672:	b120      	cbz	r0, 800367e <oslib_test_001_002_execute+0x9e>
 8003674:	f385 8811 	msr	BASEPRI, r5
}
 8003678:	b002      	add	sp, #8
 800367a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800367e:	f380 8811 	msr	BASEPRI, r0
 8003682:	f386 8811 	msr	BASEPRI, r6
    test_assert_lock(chMBGetUsedCountI(&mb1) == 0, "still full");
 8003686:	6920      	ldr	r0, [r4, #16]
 8003688:	4988      	ldr	r1, [pc, #544]	; (80038ac <oslib_test_001_002_execute+0x2cc>)
 800368a:	fab0 f080 	clz	r0, r0
 800368e:	0940      	lsrs	r0, r0, #5
 8003690:	f7fd f8b6 	bl	8000800 <_test_assert>
 8003694:	4605      	mov	r5, r0
 8003696:	b110      	cbz	r0, 800369e <oslib_test_001_002_execute+0xbe>
 8003698:	f388 8811 	msr	BASEPRI, r8
 800369c:	e7be      	b.n	800361c <oslib_test_001_002_execute+0x3c>
 800369e:	f380 8811 	msr	BASEPRI, r0
 80036a2:	f386 8811 	msr	BASEPRI, r6
    test_assert_lock(mb1.buffer == mb1.wrptr, "write pointer not aligned to base");
 80036a6:	6820      	ldr	r0, [r4, #0]
 80036a8:	68a3      	ldr	r3, [r4, #8]
 80036aa:	4981      	ldr	r1, [pc, #516]	; (80038b0 <oslib_test_001_002_execute+0x2d0>)
 80036ac:	1ac0      	subs	r0, r0, r3
 80036ae:	fab0 f080 	clz	r0, r0
 80036b2:	0940      	lsrs	r0, r0, #5
 80036b4:	f7fd f8a4 	bl	8000800 <_test_assert>
 80036b8:	4680      	mov	r8, r0
 80036ba:	2800      	cmp	r0, #0
 80036bc:	d1da      	bne.n	8003674 <oslib_test_001_002_execute+0x94>
 80036be:	f380 8811 	msr	BASEPRI, r0
 80036c2:	f386 8811 	msr	BASEPRI, r6
    test_assert_lock(mb1.buffer == mb1.rdptr, "read pointer not aligned to base");
 80036c6:	6820      	ldr	r0, [r4, #0]
 80036c8:	68e3      	ldr	r3, [r4, #12]
 80036ca:	497a      	ldr	r1, [pc, #488]	; (80038b4 <oslib_test_001_002_execute+0x2d4>)
 80036cc:	1ac0      	subs	r0, r0, r3
 80036ce:	fab0 f080 	clz	r0, r0
 80036d2:	0940      	lsrs	r0, r0, #5
 80036d4:	f7fd f894 	bl	8000800 <_test_assert>
 80036d8:	2800      	cmp	r0, #0
 80036da:	d1dd      	bne.n	8003698 <oslib_test_001_002_execute+0xb8>
 80036dc:	f380 8811 	msr	BASEPRI, r0
  test_set_step(3);
 80036e0:	2303      	movs	r3, #3
      test_assert(msg1 == MSG_OK, "wrong wake-up message");
 80036e2:	f8df a1d4 	ldr.w	sl, [pc, #468]	; 80038b8 <oslib_test_001_002_execute+0x2d8>
  mbp->reset = false;
 80036e6:	7520      	strb	r0, [r4, #20]
 80036e8:	4680      	mov	r8, r0
  test_set_step(3);
 80036ea:	603b      	str	r3, [r7, #0]
 80036ec:	2542      	movs	r5, #66	; 0x42
 80036ee:	f386 8811 	msr	BASEPRI, r6
      msg1 = chMBPostI(&mb1, 'B' + i);
 80036f2:	4628      	mov	r0, r5
 80036f4:	f7fd fc64 	bl	8000fc0 <chMBPostI.constprop.26>
 80036f8:	f388 8811 	msr	BASEPRI, r8
      test_assert(msg1 == MSG_OK, "wrong wake-up message");
 80036fc:	fab0 f080 	clz	r0, r0
 8003700:	0940      	lsrs	r0, r0, #5
 8003702:	4651      	mov	r1, sl
 8003704:	f7fd f87c 	bl	8000800 <_test_assert>
 8003708:	3501      	adds	r5, #1
 800370a:	4681      	mov	r9, r0
 800370c:	2800      	cmp	r0, #0
 800370e:	d185      	bne.n	800361c <oslib_test_001_002_execute+0x3c>
    for (i = 0; i < MB_SIZE - 1; i++) {
 8003710:	2d45      	cmp	r5, #69	; 0x45
 8003712:	d1ec      	bne.n	80036ee <oslib_test_001_002_execute+0x10e>
 8003714:	f386 8811 	msr	BASEPRI, r6
    msg1 = chMBPostAheadI(&mb1, 'A');
 8003718:	2041      	movs	r0, #65	; 0x41
 800371a:	f7fd fc79 	bl	8001010 <chMBPostAheadI.constprop.23>
 800371e:	f389 8811 	msr	BASEPRI, r9
    test_assert(msg1 == MSG_OK, "wrong wake-up message");
 8003722:	fab0 f080 	clz	r0, r0
 8003726:	0940      	lsrs	r0, r0, #5
 8003728:	4963      	ldr	r1, [pc, #396]	; (80038b8 <oslib_test_001_002_execute+0x2d8>)
 800372a:	f7fd f869 	bl	8000800 <_test_assert>
 800372e:	4605      	mov	r5, r0
 8003730:	2800      	cmp	r0, #0
 8003732:	f47f af73 	bne.w	800361c <oslib_test_001_002_execute+0x3c>
  test_set_step(4);
 8003736:	f04f 0804 	mov.w	r8, #4
 800373a:	f8c7 8000 	str.w	r8, [r7]
 800373e:	f386 8811 	msr	BASEPRI, r6
  return (size_t)(mbp->top - mbp->buffer);
 8003742:	e9d4 1300 	ldrd	r1, r3, [r4]
    test_assert_lock(chMBGetFreeCountI(&mb1) == 0, "still empty");
 8003746:	6922      	ldr	r2, [r4, #16]
 8003748:	1a5b      	subs	r3, r3, r1
 800374a:	ebb2 0fa3 	cmp.w	r2, r3, asr #2
 800374e:	bf0c      	ite	eq
 8003750:	2001      	moveq	r0, #1
 8003752:	2000      	movne	r0, #0
 8003754:	4959      	ldr	r1, [pc, #356]	; (80038bc <oslib_test_001_002_execute+0x2dc>)
 8003756:	f7fd f853 	bl	8000800 <_test_assert>
 800375a:	4681      	mov	r9, r0
 800375c:	2800      	cmp	r0, #0
 800375e:	d189      	bne.n	8003674 <oslib_test_001_002_execute+0x94>
 8003760:	f380 8811 	msr	BASEPRI, r0
 8003764:	f386 8811 	msr	BASEPRI, r6
    test_assert_lock(chMBGetUsedCountI(&mb1) == MB_SIZE, "not full");
 8003768:	6920      	ldr	r0, [r4, #16]
 800376a:	4955      	ldr	r1, [pc, #340]	; (80038c0 <oslib_test_001_002_execute+0x2e0>)
 800376c:	f1a0 0004 	sub.w	r0, r0, #4
 8003770:	fab0 f080 	clz	r0, r0
 8003774:	0940      	lsrs	r0, r0, #5
 8003776:	f7fd f843 	bl	8000800 <_test_assert>
 800377a:	4605      	mov	r5, r0
 800377c:	b110      	cbz	r0, 8003784 <oslib_test_001_002_execute+0x1a4>
 800377e:	f389 8811 	msr	BASEPRI, r9
 8003782:	e74b      	b.n	800361c <oslib_test_001_002_execute+0x3c>
 8003784:	f380 8811 	msr	BASEPRI, r0
 8003788:	f386 8811 	msr	BASEPRI, r6
    test_assert_lock(mb1.rdptr == mb1.wrptr, "pointers not aligned");
 800378c:	e9d4 3002 	ldrd	r3, r0, [r4, #8]
 8003790:	1ac6      	subs	r6, r0, r3
 8003792:	4270      	negs	r0, r6
 8003794:	4170      	adcs	r0, r6
 8003796:	494b      	ldr	r1, [pc, #300]	; (80038c4 <oslib_test_001_002_execute+0x2e4>)
 8003798:	f7fd f832 	bl	8000800 <_test_assert>
 800379c:	2800      	cmp	r0, #0
 800379e:	f47f af69 	bne.w	8003674 <oslib_test_001_002_execute+0x94>
 80037a2:	f380 8811 	msr	BASEPRI, r0
  test_set_step(5);
 80037a6:	2305      	movs	r3, #5
      test_assert(msg1 == MSG_OK, "wrong wake-up message");
 80037a8:	f8df 910c 	ldr.w	r9, [pc, #268]	; 80038b8 <oslib_test_001_002_execute+0x2d8>
  test_set_step(5);
 80037ac:	603b      	str	r3, [r7, #0]
 80037ae:	4645      	mov	r5, r8
 80037b0:	4606      	mov	r6, r0
 80037b2:	f04f 0820 	mov.w	r8, #32
 80037b6:	f388 8811 	msr	BASEPRI, r8
      msg1 = chMBFetchI(&mb1, &msg2);
 80037ba:	a801      	add	r0, sp, #4
 80037bc:	f7fd fc50 	bl	8001060 <chMBFetchI.constprop.20>
 80037c0:	f386 8811 	msr	BASEPRI, r6
      test_assert(msg1 == MSG_OK, "wrong wake-up message");
 80037c4:	fab0 f080 	clz	r0, r0
 80037c8:	0940      	lsrs	r0, r0, #5
 80037ca:	4649      	mov	r1, r9
 80037cc:	f7fd f818 	bl	8000800 <_test_assert>
 80037d0:	2800      	cmp	r0, #0
 80037d2:	f47f af23 	bne.w	800361c <oslib_test_001_002_execute+0x3c>
      test_emit_token(msg2);
 80037d6:	f89d 0004 	ldrb.w	r0, [sp, #4]
 80037da:	f7fd f8b1 	bl	8000940 <test_emit_token>
    for (i = 0; i < MB_SIZE; i++) {
 80037de:	3d01      	subs	r5, #1
 80037e0:	d1e9      	bne.n	80037b6 <oslib_test_001_002_execute+0x1d6>
    test_assert_sequence("ABCD", "wrong get sequence");
 80037e2:	4939      	ldr	r1, [pc, #228]	; (80038c8 <oslib_test_001_002_execute+0x2e8>)
 80037e4:	4839      	ldr	r0, [pc, #228]	; (80038cc <oslib_test_001_002_execute+0x2ec>)
 80037e6:	f7fd f923 	bl	8000a30 <_test_assert_sequence>
 80037ea:	2800      	cmp	r0, #0
 80037ec:	f47f af16 	bne.w	800361c <oslib_test_001_002_execute+0x3c>
  test_set_step(6);
 80037f0:	2306      	movs	r3, #6
    msg1 = chMBPostTimeout(&mb1, 'B' + i, TIME_INFINITE);
 80037f2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80037f6:	2046      	movs	r0, #70	; 0x46
  test_set_step(6);
 80037f8:	603b      	str	r3, [r7, #0]
    msg1 = chMBPostTimeout(&mb1, 'B' + i, TIME_INFINITE);
 80037fa:	f7ff fdb1 	bl	8003360 <chMBPostTimeout.constprop.27>
    test_assert(msg1 == MSG_OK, "wrong wake-up message");
 80037fe:	fab0 f080 	clz	r0, r0
 8003802:	0940      	lsrs	r0, r0, #5
 8003804:	492c      	ldr	r1, [pc, #176]	; (80038b8 <oslib_test_001_002_execute+0x2d8>)
 8003806:	f7fc fffb 	bl	8000800 <_test_assert>
 800380a:	2800      	cmp	r0, #0
 800380c:	f47f af06 	bne.w	800361c <oslib_test_001_002_execute+0x3c>
    msg1 = chMBFetchTimeout(&mb1, &msg2, TIME_INFINITE);
 8003810:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003814:	a801      	add	r0, sp, #4
 8003816:	f7ff fe23 	bl	8003460 <chMBFetchTimeout.constprop.21>
    test_assert(msg1 == MSG_OK, "wrong wake-up message");
 800381a:	fab0 f080 	clz	r0, r0
 800381e:	0940      	lsrs	r0, r0, #5
 8003820:	4925      	ldr	r1, [pc, #148]	; (80038b8 <oslib_test_001_002_execute+0x2d8>)
 8003822:	f7fc ffed 	bl	8000800 <_test_assert>
 8003826:	2800      	cmp	r0, #0
 8003828:	f47f aef8 	bne.w	800361c <oslib_test_001_002_execute+0x3c>
  test_set_step(7);
 800382c:	2307      	movs	r3, #7
 800382e:	603b      	str	r3, [r7, #0]
 8003830:	f388 8811 	msr	BASEPRI, r8
 8003834:	e9d4 1200 	ldrd	r1, r2, [r4]
  return chMBGetSizeI(mbp) - chMBGetUsedCountI(mbp);
 8003838:	6923      	ldr	r3, [r4, #16]
  return (size_t)(mbp->top - mbp->buffer);
 800383a:	1a52      	subs	r2, r2, r1
  return chMBGetSizeI(mbp) - chMBGetUsedCountI(mbp);
 800383c:	ebc3 03a2 	rsb	r3, r3, r2, asr #2
    test_assert_lock(chMBGetFreeCountI(&mb1) == MB_SIZE, "not empty");
 8003840:	1f19      	subs	r1, r3, #4
 8003842:	4248      	negs	r0, r1
 8003844:	4148      	adcs	r0, r1
 8003846:	4918      	ldr	r1, [pc, #96]	; (80038a8 <oslib_test_001_002_execute+0x2c8>)
 8003848:	f7fc ffda 	bl	8000800 <_test_assert>
 800384c:	2800      	cmp	r0, #0
 800384e:	f47f af11 	bne.w	8003674 <oslib_test_001_002_execute+0x94>
 8003852:	f385 8811 	msr	BASEPRI, r5
 8003856:	f388 8811 	msr	BASEPRI, r8
    test_assert_lock(chMBGetUsedCountI(&mb1) == 0, "still full");
 800385a:	6920      	ldr	r0, [r4, #16]
 800385c:	4913      	ldr	r1, [pc, #76]	; (80038ac <oslib_test_001_002_execute+0x2cc>)
 800385e:	fab0 f080 	clz	r0, r0
 8003862:	0940      	lsrs	r0, r0, #5
 8003864:	f7fc ffcc 	bl	8000800 <_test_assert>
 8003868:	2800      	cmp	r0, #0
 800386a:	f47f af03 	bne.w	8003674 <oslib_test_001_002_execute+0x94>
 800386e:	f385 8811 	msr	BASEPRI, r5
    test_assert(mb1.buffer == mb1.wrptr, "write pointer not aligned to base");
 8003872:	6820      	ldr	r0, [r4, #0]
 8003874:	68a3      	ldr	r3, [r4, #8]
 8003876:	490e      	ldr	r1, [pc, #56]	; (80038b0 <oslib_test_001_002_execute+0x2d0>)
 8003878:	1ac2      	subs	r2, r0, r3
 800387a:	4250      	negs	r0, r2
 800387c:	4150      	adcs	r0, r2
 800387e:	f7fc ffbf 	bl	8000800 <_test_assert>
 8003882:	2800      	cmp	r0, #0
 8003884:	f47f aeca 	bne.w	800361c <oslib_test_001_002_execute+0x3c>
    test_assert(mb1.buffer == mb1.rdptr, "read pointer not aligned to base");
 8003888:	6820      	ldr	r0, [r4, #0]
 800388a:	68e3      	ldr	r3, [r4, #12]
 800388c:	4909      	ldr	r1, [pc, #36]	; (80038b4 <oslib_test_001_002_execute+0x2d4>)
 800388e:	1ac3      	subs	r3, r0, r3
 8003890:	4258      	negs	r0, r3
 8003892:	4158      	adcs	r0, r3
 8003894:	f7fc ffb4 	bl	8000800 <_test_assert>
 8003898:	e6c0      	b.n	800361c <oslib_test_001_002_execute+0x3c>
 800389a:	bf00      	nop
 800389c:	20001254 	.word	0x20001254
 80038a0:	2000084c 	.word	0x2000084c
 80038a4:	08007760 	.word	0x08007760
 80038a8:	0800776c 	.word	0x0800776c
 80038ac:	08007778 	.word	0x08007778
 80038b0:	08007784 	.word	0x08007784
 80038b4:	080077a8 	.word	0x080077a8
 80038b8:	08007828 	.word	0x08007828
 80038bc:	080077cc 	.word	0x080077cc
 80038c0:	080077d8 	.word	0x080077d8
 80038c4:	080077e4 	.word	0x080077e4
 80038c8:	080077fc 	.word	0x080077fc
 80038cc:	08007810 	.word	0x08007810

080038d0 <oslib_test_001_001_execute>:
static void oslib_test_001_001_execute(void) {
 80038d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  test_set_step(1);
 80038d4:	4fb3      	ldr	r7, [pc, #716]	; (8003ba4 <oslib_test_001_001_execute+0x2d4>)
 80038d6:	2301      	movs	r3, #1
static void oslib_test_001_001_execute(void) {
 80038d8:	b082      	sub	sp, #8
  test_set_step(1);
 80038da:	603b      	str	r3, [r7, #0]
 80038dc:	2620      	movs	r6, #32
 80038de:	f386 8811 	msr	BASEPRI, r6
 80038e2:	4cb1      	ldr	r4, [pc, #708]	; (8003ba8 <oslib_test_001_001_execute+0x2d8>)
    test_assert_lock(chMBGetFreeCountI(&mb1) == MB_SIZE, "wrong size");
 80038e4:	49b1      	ldr	r1, [pc, #708]	; (8003bac <oslib_test_001_001_execute+0x2dc>)
 80038e6:	6920      	ldr	r0, [r4, #16]
  return (size_t)(mbp->top - mbp->buffer);
 80038e8:	e9d4 2300 	ldrd	r2, r3, [r4]
 80038ec:	1a9b      	subs	r3, r3, r2
  return chMBGetSizeI(mbp) - chMBGetUsedCountI(mbp);
 80038ee:	ebc0 00a3 	rsb	r0, r0, r3, asr #2
 80038f2:	f1a0 0004 	sub.w	r0, r0, #4
 80038f6:	fab0 f080 	clz	r0, r0
 80038fa:	0940      	lsrs	r0, r0, #5
 80038fc:	f7fc ff80 	bl	8000800 <_test_assert>
 8003900:	b128      	cbz	r0, 800390e <oslib_test_001_001_execute+0x3e>
 8003902:	2300      	movs	r3, #0
 8003904:	f383 8811 	msr	BASEPRI, r3
}
 8003908:	b002      	add	sp, #8
 800390a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800390e:	4605      	mov	r5, r0
 8003910:	f380 8811 	msr	BASEPRI, r0
  test_set_step(2);
 8003914:	2302      	movs	r3, #2
 8003916:	603b      	str	r3, [r7, #0]
    chMBReset(&mb1);
 8003918:	f7ff fcea 	bl	80032f0 <chMBReset.constprop.29>
 800391c:	f386 8811 	msr	BASEPRI, r6
  return (size_t)(mbp->top - mbp->buffer);
 8003920:	e9d4 2300 	ldrd	r2, r3, [r4]
  return chMBGetSizeI(mbp) - chMBGetUsedCountI(mbp);
 8003924:	6920      	ldr	r0, [r4, #16]
    test_assert_lock(chMBGetFreeCountI(&mb1) == MB_SIZE, "not empty");
 8003926:	49a2      	ldr	r1, [pc, #648]	; (8003bb0 <oslib_test_001_001_execute+0x2e0>)
  return (size_t)(mbp->top - mbp->buffer);
 8003928:	1a9b      	subs	r3, r3, r2
  return chMBGetSizeI(mbp) - chMBGetUsedCountI(mbp);
 800392a:	ebc0 00a3 	rsb	r0, r0, r3, asr #2
 800392e:	f1a0 0004 	sub.w	r0, r0, #4
 8003932:	fab0 f080 	clz	r0, r0
 8003936:	0940      	lsrs	r0, r0, #5
 8003938:	f7fc ff62 	bl	8000800 <_test_assert>
 800393c:	4680      	mov	r8, r0
 800393e:	b120      	cbz	r0, 800394a <oslib_test_001_001_execute+0x7a>
 8003940:	f385 8811 	msr	BASEPRI, r5
}
 8003944:	b002      	add	sp, #8
 8003946:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800394a:	f380 8811 	msr	BASEPRI, r0
 800394e:	f386 8811 	msr	BASEPRI, r6
    test_assert_lock(chMBGetUsedCountI(&mb1) == 0, "still full");
 8003952:	6920      	ldr	r0, [r4, #16]
 8003954:	4997      	ldr	r1, [pc, #604]	; (8003bb4 <oslib_test_001_001_execute+0x2e4>)
 8003956:	fab0 f080 	clz	r0, r0
 800395a:	0940      	lsrs	r0, r0, #5
 800395c:	f7fc ff50 	bl	8000800 <_test_assert>
 8003960:	4605      	mov	r5, r0
 8003962:	b110      	cbz	r0, 800396a <oslib_test_001_001_execute+0x9a>
 8003964:	f388 8811 	msr	BASEPRI, r8
 8003968:	e7ce      	b.n	8003908 <oslib_test_001_001_execute+0x38>
 800396a:	f380 8811 	msr	BASEPRI, r0
 800396e:	f386 8811 	msr	BASEPRI, r6
    test_assert_lock(mb1.buffer == mb1.wrptr, "write pointer not aligned to base");
 8003972:	6820      	ldr	r0, [r4, #0]
 8003974:	68a3      	ldr	r3, [r4, #8]
 8003976:	4990      	ldr	r1, [pc, #576]	; (8003bb8 <oslib_test_001_001_execute+0x2e8>)
 8003978:	1ac0      	subs	r0, r0, r3
 800397a:	fab0 f080 	clz	r0, r0
 800397e:	0940      	lsrs	r0, r0, #5
 8003980:	f7fc ff3e 	bl	8000800 <_test_assert>
 8003984:	4680      	mov	r8, r0
 8003986:	2800      	cmp	r0, #0
 8003988:	d1da      	bne.n	8003940 <oslib_test_001_001_execute+0x70>
 800398a:	f380 8811 	msr	BASEPRI, r0
 800398e:	f386 8811 	msr	BASEPRI, r6
    test_assert_lock(mb1.buffer == mb1.rdptr, "read pointer not aligned to base");
 8003992:	6820      	ldr	r0, [r4, #0]
 8003994:	68e3      	ldr	r3, [r4, #12]
 8003996:	4989      	ldr	r1, [pc, #548]	; (8003bbc <oslib_test_001_001_execute+0x2ec>)
 8003998:	1ac0      	subs	r0, r0, r3
 800399a:	fab0 f080 	clz	r0, r0
 800399e:	0940      	lsrs	r0, r0, #5
 80039a0:	f7fc ff2e 	bl	8000800 <_test_assert>
 80039a4:	2800      	cmp	r0, #0
 80039a6:	d1dd      	bne.n	8003964 <oslib_test_001_001_execute+0x94>
 80039a8:	f380 8811 	msr	BASEPRI, r0
  test_set_step(3);
 80039ac:	2303      	movs	r3, #3
    msg1 = chMBPostTimeout(&mb1, (msg_t)0, TIME_INFINITE);
 80039ae:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
  test_set_step(3);
 80039b2:	603b      	str	r3, [r7, #0]
    msg1 = chMBPostTimeout(&mb1, (msg_t)0, TIME_INFINITE);
 80039b4:	f7ff fcd4 	bl	8003360 <chMBPostTimeout.constprop.27>
    test_assert(msg1 == MSG_RESET, "not in reset state");
 80039b8:	1c85      	adds	r5, r0, #2
 80039ba:	bf14      	ite	ne
 80039bc:	2000      	movne	r0, #0
 80039be:	2001      	moveq	r0, #1
 80039c0:	497f      	ldr	r1, [pc, #508]	; (8003bc0 <oslib_test_001_001_execute+0x2f0>)
 80039c2:	f7fc ff1d 	bl	8000800 <_test_assert>
 80039c6:	2800      	cmp	r0, #0
 80039c8:	d19e      	bne.n	8003908 <oslib_test_001_001_execute+0x38>
    msg1 = chMBPostAheadTimeout(&mb1, (msg_t)0, TIME_INFINITE);
 80039ca:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80039ce:	f7ff fd07 	bl	80033e0 <chMBPostAheadTimeout.constprop.24>
    test_assert(msg1 == MSG_RESET, "not in reset state");
 80039d2:	1c82      	adds	r2, r0, #2
 80039d4:	bf14      	ite	ne
 80039d6:	2000      	movne	r0, #0
 80039d8:	2001      	moveq	r0, #1
 80039da:	4979      	ldr	r1, [pc, #484]	; (8003bc0 <oslib_test_001_001_execute+0x2f0>)
 80039dc:	f7fc ff10 	bl	8000800 <_test_assert>
 80039e0:	2800      	cmp	r0, #0
 80039e2:	d191      	bne.n	8003908 <oslib_test_001_001_execute+0x38>
    msg1 = chMBFetchTimeout(&mb1, &msg2, TIME_INFINITE);
 80039e4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80039e8:	a801      	add	r0, sp, #4
 80039ea:	f7ff fd39 	bl	8003460 <chMBFetchTimeout.constprop.21>
    test_assert(msg1 == MSG_RESET, "not in reset state");
 80039ee:	1c83      	adds	r3, r0, #2
 80039f0:	bf14      	ite	ne
 80039f2:	2000      	movne	r0, #0
 80039f4:	2001      	moveq	r0, #1
 80039f6:	4972      	ldr	r1, [pc, #456]	; (8003bc0 <oslib_test_001_001_execute+0x2f0>)
 80039f8:	f7fc ff02 	bl	8000800 <_test_assert>
 80039fc:	2800      	cmp	r0, #0
 80039fe:	d183      	bne.n	8003908 <oslib_test_001_001_execute+0x38>
  test_set_step(4);
 8003a00:	2304      	movs	r3, #4
      test_assert(msg1 == MSG_OK, "wrong wake-up message");
 8003a02:	4e70      	ldr	r6, [pc, #448]	; (8003bc4 <oslib_test_001_001_execute+0x2f4>)
  mbp->reset = false;
 8003a04:	7520      	strb	r0, [r4, #20]
  test_set_step(4);
 8003a06:	603b      	str	r3, [r7, #0]
 8003a08:	2542      	movs	r5, #66	; 0x42
      msg1 = chMBPostTimeout(&mb1, 'B' + i, TIME_INFINITE);
 8003a0a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003a0e:	4628      	mov	r0, r5
 8003a10:	f7ff fca6 	bl	8003360 <chMBPostTimeout.constprop.27>
      test_assert(msg1 == MSG_OK, "wrong wake-up message");
 8003a14:	fab0 f080 	clz	r0, r0
 8003a18:	4631      	mov	r1, r6
 8003a1a:	0940      	lsrs	r0, r0, #5
 8003a1c:	f7fc fef0 	bl	8000800 <_test_assert>
 8003a20:	3501      	adds	r5, #1
 8003a22:	2800      	cmp	r0, #0
 8003a24:	f47f af70 	bne.w	8003908 <oslib_test_001_001_execute+0x38>
    for (i = 0; i < MB_SIZE - 1; i++) {
 8003a28:	2d45      	cmp	r5, #69	; 0x45
 8003a2a:	d1ee      	bne.n	8003a0a <oslib_test_001_001_execute+0x13a>
    msg1 = chMBPostAheadTimeout(&mb1, 'A', TIME_INFINITE);
 8003a2c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003a30:	2041      	movs	r0, #65	; 0x41
 8003a32:	f7ff fcd5 	bl	80033e0 <chMBPostAheadTimeout.constprop.24>
    test_assert(msg1 == MSG_OK, "wrong wake-up message");
 8003a36:	fab0 f080 	clz	r0, r0
 8003a3a:	0940      	lsrs	r0, r0, #5
 8003a3c:	4961      	ldr	r1, [pc, #388]	; (8003bc4 <oslib_test_001_001_execute+0x2f4>)
 8003a3e:	f7fc fedf 	bl	8000800 <_test_assert>
 8003a42:	4605      	mov	r5, r0
 8003a44:	2800      	cmp	r0, #0
 8003a46:	f47f af5f 	bne.w	8003908 <oslib_test_001_001_execute+0x38>
  test_set_step(5);
 8003a4a:	2305      	movs	r3, #5
 8003a4c:	603b      	str	r3, [r7, #0]
 8003a4e:	2620      	movs	r6, #32
 8003a50:	f386 8811 	msr	BASEPRI, r6
  return (size_t)(mbp->top - mbp->buffer);
 8003a54:	e9d4 1300 	ldrd	r1, r3, [r4]
    test_assert_lock(chMBGetFreeCountI(&mb1) == 0, "still empty");
 8003a58:	6922      	ldr	r2, [r4, #16]
 8003a5a:	1a5b      	subs	r3, r3, r1
 8003a5c:	ebb2 0fa3 	cmp.w	r2, r3, asr #2
 8003a60:	bf0c      	ite	eq
 8003a62:	2001      	moveq	r0, #1
 8003a64:	2000      	movne	r0, #0
 8003a66:	4958      	ldr	r1, [pc, #352]	; (8003bc8 <oslib_test_001_001_execute+0x2f8>)
 8003a68:	f7fc feca 	bl	8000800 <_test_assert>
 8003a6c:	4680      	mov	r8, r0
 8003a6e:	2800      	cmp	r0, #0
 8003a70:	f47f af66 	bne.w	8003940 <oslib_test_001_001_execute+0x70>
 8003a74:	f380 8811 	msr	BASEPRI, r0
 8003a78:	f386 8811 	msr	BASEPRI, r6
    test_assert_lock(chMBGetUsedCountI(&mb1) == MB_SIZE, "not full");
 8003a7c:	6920      	ldr	r0, [r4, #16]
 8003a7e:	4953      	ldr	r1, [pc, #332]	; (8003bcc <oslib_test_001_001_execute+0x2fc>)
 8003a80:	f1a0 0c04 	sub.w	ip, r0, #4
 8003a84:	f1dc 0000 	rsbs	r0, ip, #0
 8003a88:	eb40 000c 	adc.w	r0, r0, ip
 8003a8c:	f7fc feb8 	bl	8000800 <_test_assert>
 8003a90:	4605      	mov	r5, r0
 8003a92:	2800      	cmp	r0, #0
 8003a94:	f47f af66 	bne.w	8003964 <oslib_test_001_001_execute+0x94>
 8003a98:	f380 8811 	msr	BASEPRI, r0
 8003a9c:	f386 8811 	msr	BASEPRI, r6
    test_assert_lock(mb1.rdptr == mb1.wrptr, "pointers not aligned");
 8003aa0:	e9d4 3002 	ldrd	r3, r0, [r4, #8]
 8003aa4:	1ac6      	subs	r6, r0, r3
 8003aa6:	4270      	negs	r0, r6
 8003aa8:	4170      	adcs	r0, r6
 8003aaa:	4949      	ldr	r1, [pc, #292]	; (8003bd0 <oslib_test_001_001_execute+0x300>)
 8003aac:	f7fc fea8 	bl	8000800 <_test_assert>
 8003ab0:	2800      	cmp	r0, #0
 8003ab2:	f47f af45 	bne.w	8003940 <oslib_test_001_001_execute+0x70>
 8003ab6:	f380 8811 	msr	BASEPRI, r0
  test_set_step(6);
 8003aba:	2306      	movs	r3, #6
      test_assert(msg1 == MSG_OK, "wrong wake-up message");
 8003abc:	4e41      	ldr	r6, [pc, #260]	; (8003bc4 <oslib_test_001_001_execute+0x2f4>)
  test_set_step(6);
 8003abe:	603b      	str	r3, [r7, #0]
 8003ac0:	2504      	movs	r5, #4
      msg1 = chMBFetchTimeout(&mb1, &msg2, TIME_INFINITE);
 8003ac2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003ac6:	a801      	add	r0, sp, #4
 8003ac8:	f7ff fcca 	bl	8003460 <chMBFetchTimeout.constprop.21>
      test_assert(msg1 == MSG_OK, "wrong wake-up message");
 8003acc:	fab0 f080 	clz	r0, r0
 8003ad0:	4631      	mov	r1, r6
 8003ad2:	0940      	lsrs	r0, r0, #5
 8003ad4:	f7fc fe94 	bl	8000800 <_test_assert>
 8003ad8:	2800      	cmp	r0, #0
 8003ada:	f47f af15 	bne.w	8003908 <oslib_test_001_001_execute+0x38>
      test_emit_token(msg2);
 8003ade:	f89d 0004 	ldrb.w	r0, [sp, #4]
 8003ae2:	f7fc ff2d 	bl	8000940 <test_emit_token>
    for (i = 0; i < MB_SIZE; i++) {
 8003ae6:	3d01      	subs	r5, #1
 8003ae8:	d1eb      	bne.n	8003ac2 <oslib_test_001_001_execute+0x1f2>
    test_assert_sequence("ABCD", "wrong get sequence");
 8003aea:	493a      	ldr	r1, [pc, #232]	; (8003bd4 <oslib_test_001_001_execute+0x304>)
 8003aec:	483a      	ldr	r0, [pc, #232]	; (8003bd8 <oslib_test_001_001_execute+0x308>)
 8003aee:	f7fc ff9f 	bl	8000a30 <_test_assert_sequence>
 8003af2:	2800      	cmp	r0, #0
 8003af4:	f47f af08 	bne.w	8003908 <oslib_test_001_001_execute+0x38>
  test_set_step(7);
 8003af8:	2307      	movs	r3, #7
    msg1 = chMBPostTimeout(&mb1, 'B' + i, TIME_INFINITE);
 8003afa:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003afe:	2046      	movs	r0, #70	; 0x46
  test_set_step(7);
 8003b00:	603b      	str	r3, [r7, #0]
    msg1 = chMBPostTimeout(&mb1, 'B' + i, TIME_INFINITE);
 8003b02:	f7ff fc2d 	bl	8003360 <chMBPostTimeout.constprop.27>
    test_assert(msg1 == MSG_OK, "wrong wake-up message");
 8003b06:	fab0 f080 	clz	r0, r0
 8003b0a:	0940      	lsrs	r0, r0, #5
 8003b0c:	492d      	ldr	r1, [pc, #180]	; (8003bc4 <oslib_test_001_001_execute+0x2f4>)
 8003b0e:	f7fc fe77 	bl	8000800 <_test_assert>
 8003b12:	2800      	cmp	r0, #0
 8003b14:	f47f aef8 	bne.w	8003908 <oslib_test_001_001_execute+0x38>
    msg1 = chMBFetchTimeout(&mb1, &msg2, TIME_INFINITE);
 8003b18:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003b1c:	a801      	add	r0, sp, #4
 8003b1e:	f7ff fc9f 	bl	8003460 <chMBFetchTimeout.constprop.21>
    test_assert(msg1 == MSG_OK, "wrong wake-up message");
 8003b22:	fab0 f080 	clz	r0, r0
 8003b26:	0940      	lsrs	r0, r0, #5
 8003b28:	4926      	ldr	r1, [pc, #152]	; (8003bc4 <oslib_test_001_001_execute+0x2f4>)
 8003b2a:	f7fc fe69 	bl	8000800 <_test_assert>
 8003b2e:	2800      	cmp	r0, #0
 8003b30:	f47f aeea 	bne.w	8003908 <oslib_test_001_001_execute+0x38>
  test_set_step(8);
 8003b34:	2308      	movs	r3, #8
 8003b36:	603b      	str	r3, [r7, #0]
 8003b38:	2620      	movs	r6, #32
 8003b3a:	f386 8811 	msr	BASEPRI, r6
 8003b3e:	e9d4 1200 	ldrd	r1, r2, [r4]
  return chMBGetSizeI(mbp) - chMBGetUsedCountI(mbp);
 8003b42:	6923      	ldr	r3, [r4, #16]
  return (size_t)(mbp->top - mbp->buffer);
 8003b44:	1a52      	subs	r2, r2, r1
  return chMBGetSizeI(mbp) - chMBGetUsedCountI(mbp);
 8003b46:	ebc3 03a2 	rsb	r3, r3, r2, asr #2
    test_assert_lock(chMBGetFreeCountI(&mb1) == MB_SIZE, "not empty");
 8003b4a:	1f19      	subs	r1, r3, #4
 8003b4c:	4248      	negs	r0, r1
 8003b4e:	4148      	adcs	r0, r1
 8003b50:	4917      	ldr	r1, [pc, #92]	; (8003bb0 <oslib_test_001_001_execute+0x2e0>)
 8003b52:	f7fc fe55 	bl	8000800 <_test_assert>
 8003b56:	2800      	cmp	r0, #0
 8003b58:	f47f aef2 	bne.w	8003940 <oslib_test_001_001_execute+0x70>
 8003b5c:	f385 8811 	msr	BASEPRI, r5
 8003b60:	f386 8811 	msr	BASEPRI, r6
    test_assert_lock(chMBGetUsedCountI(&mb1) == 0, "still full");
 8003b64:	6920      	ldr	r0, [r4, #16]
 8003b66:	4913      	ldr	r1, [pc, #76]	; (8003bb4 <oslib_test_001_001_execute+0x2e4>)
 8003b68:	fab0 f080 	clz	r0, r0
 8003b6c:	0940      	lsrs	r0, r0, #5
 8003b6e:	f7fc fe47 	bl	8000800 <_test_assert>
 8003b72:	2800      	cmp	r0, #0
 8003b74:	f47f aee4 	bne.w	8003940 <oslib_test_001_001_execute+0x70>
 8003b78:	f385 8811 	msr	BASEPRI, r5
    test_assert(mb1.buffer == mb1.wrptr, "write pointer not aligned to base");
 8003b7c:	6820      	ldr	r0, [r4, #0]
 8003b7e:	68a3      	ldr	r3, [r4, #8]
 8003b80:	490d      	ldr	r1, [pc, #52]	; (8003bb8 <oslib_test_001_001_execute+0x2e8>)
 8003b82:	1ac2      	subs	r2, r0, r3
 8003b84:	4250      	negs	r0, r2
 8003b86:	4150      	adcs	r0, r2
 8003b88:	f7fc fe3a 	bl	8000800 <_test_assert>
 8003b8c:	2800      	cmp	r0, #0
 8003b8e:	f47f aebb 	bne.w	8003908 <oslib_test_001_001_execute+0x38>
    test_assert(mb1.buffer == mb1.rdptr, "read pointer not aligned to base");
 8003b92:	6820      	ldr	r0, [r4, #0]
 8003b94:	68e3      	ldr	r3, [r4, #12]
 8003b96:	4909      	ldr	r1, [pc, #36]	; (8003bbc <oslib_test_001_001_execute+0x2ec>)
 8003b98:	1ac3      	subs	r3, r0, r3
 8003b9a:	4258      	negs	r0, r3
 8003b9c:	4158      	adcs	r0, r3
 8003b9e:	f7fc fe2f 	bl	8000800 <_test_assert>
 8003ba2:	e6b1      	b.n	8003908 <oslib_test_001_001_execute+0x38>
 8003ba4:	20001254 	.word	0x20001254
 8003ba8:	2000084c 	.word	0x2000084c
 8003bac:	08007760 	.word	0x08007760
 8003bb0:	0800776c 	.word	0x0800776c
 8003bb4:	08007778 	.word	0x08007778
 8003bb8:	08007784 	.word	0x08007784
 8003bbc:	080077a8 	.word	0x080077a8
 8003bc0:	0800773c 	.word	0x0800773c
 8003bc4:	08007828 	.word	0x08007828
 8003bc8:	080077cc 	.word	0x080077cc
 8003bcc:	080077d8 	.word	0x080077d8
 8003bd0:	080077e4 	.word	0x080077e4
 8003bd4:	080077fc 	.word	0x080077fc
 8003bd8:	08007810 	.word	0x08007810
 8003bdc:	00000000 	.word	0x00000000

08003be0 <oslib_test_002_002_execute>:
static void oslib_test_002_002_execute(void) {
 8003be0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  test_set_step(1);
 8003be4:	f8df a0f4 	ldr.w	sl, [pc, #244]	; 8003cdc <oslib_test_002_002_execute+0xfc>
 8003be8:	4d38      	ldr	r5, [pc, #224]	; (8003ccc <oslib_test_002_002_execute+0xec>)
 8003bea:	4c39      	ldr	r4, [pc, #228]	; (8003cd0 <oslib_test_002_002_execute+0xf0>)
 8003bec:	2301      	movs	r3, #1
 8003bee:	f8ca 3000 	str.w	r3, [sl]
 * @iclass
 */
static inline void chGuardedPoolFreeI(guarded_memory_pool_t *gmp, void *objp) {

  chPoolFreeI(&gmp->pool, objp);
  chSemSignalI(&gmp->sem);
 8003bf2:	46a9      	mov	r9, r5
 8003bf4:	2604      	movs	r6, #4
 8003bf6:	f04f 0820 	mov.w	r8, #32
 8003bfa:	2700      	movs	r7, #0
 8003bfc:	f388 8811 	msr	BASEPRI, r8
  php->next = mp->next;
 8003c00:	68eb      	ldr	r3, [r5, #12]
 8003c02:	6023      	str	r3, [r4, #0]
 8003c04:	4648      	mov	r0, r9
  mp->next = php;
 8003c06:	60ec      	str	r4, [r5, #12]
 8003c08:	f7fd fada 	bl	80011c0 <chSemSignalI>
 */
void chGuardedPoolFree(guarded_memory_pool_t *gmp, void *objp) {

  chSysLock();
  chGuardedPoolFreeI(gmp, objp);
  chSchRescheduleS();
 8003c0c:	f7ff fad8 	bl	80031c0 <chSchRescheduleS>
 8003c10:	f387 8811 	msr	BASEPRI, r7
    p = (void *)(((uint8_t *)p) + gmp->pool.object_size);
 8003c14:	692b      	ldr	r3, [r5, #16]
  while (n != 0U) {
 8003c16:	3e01      	subs	r6, #1
    p = (void *)(((uint8_t *)p) + gmp->pool.object_size);
 8003c18:	441c      	add	r4, r3
  while (n != 0U) {
 8003c1a:	d1ef      	bne.n	8003bfc <oslib_test_002_002_execute+0x1c>
  test_set_step(2);
 8003c1c:	2302      	movs	r3, #2
      test_assert(chGuardedPoolAllocTimeout(&gmp1, TIME_IMMEDIATE) != NULL, "list empty");
 8003c1e:	4e2d      	ldr	r6, [pc, #180]	; (8003cd4 <oslib_test_002_002_execute+0xf4>)
  test_set_step(2);
 8003c20:	f8ca 3000 	str.w	r3, [sl]
 8003c24:	2404      	movs	r4, #4
      test_assert(chGuardedPoolAllocTimeout(&gmp1, TIME_IMMEDIATE) != NULL, "list empty");
 8003c26:	2000      	movs	r0, #0
 8003c28:	f7fe f982 	bl	8001f30 <chGuardedPoolAllocTimeout.constprop.15>
 8003c2c:	3000      	adds	r0, #0
 8003c2e:	bf18      	it	ne
 8003c30:	2001      	movne	r0, #1
 8003c32:	4631      	mov	r1, r6
 8003c34:	f7fc fde4 	bl	8000800 <_test_assert>
 8003c38:	2800      	cmp	r0, #0
 8003c3a:	d144      	bne.n	8003cc6 <oslib_test_002_002_execute+0xe6>
    for (i = 0; i < MEMORY_POOL_SIZE; i++)
 8003c3c:	3c01      	subs	r4, #1
 8003c3e:	d1f2      	bne.n	8003c26 <oslib_test_002_002_execute+0x46>
  test_set_step(3);
 8003c40:	2303      	movs	r3, #3
 8003c42:	f8ca 3000 	str.w	r3, [sl]
    test_assert(chGuardedPoolAllocTimeout(&gmp1, TIME_IMMEDIATE) == NULL, "list not empty");
 8003c46:	f7fe f973 	bl	8001f30 <chGuardedPoolAllocTimeout.constprop.15>
 8003c4a:	fab0 f080 	clz	r0, r0
 8003c4e:	0940      	lsrs	r0, r0, #5
 8003c50:	4921      	ldr	r1, [pc, #132]	; (8003cd8 <oslib_test_002_002_execute+0xf8>)
 8003c52:	f7fc fdd5 	bl	8000800 <_test_assert>
 8003c56:	bbb0      	cbnz	r0, 8003cc6 <oslib_test_002_002_execute+0xe6>
 8003c58:	4e1d      	ldr	r6, [pc, #116]	; (8003cd0 <oslib_test_002_002_execute+0xf0>)
 8003c5a:	f8df 8070 	ldr.w	r8, [pc, #112]	; 8003ccc <oslib_test_002_002_execute+0xec>
  test_set_step(4);
 8003c5e:	2304      	movs	r3, #4
 8003c60:	f106 0910 	add.w	r9, r6, #16
 8003c64:	f8ca 3000 	str.w	r3, [sl]
 8003c68:	2720      	movs	r7, #32
      chGuardedPoolFree(&gmp1, &objects[i]);
 8003c6a:	4633      	mov	r3, r6
 8003c6c:	f387 8811 	msr	BASEPRI, r7
  php->next = mp->next;
 8003c70:	68ea      	ldr	r2, [r5, #12]
 8003c72:	f846 2b04 	str.w	r2, [r6], #4
 8003c76:	4640      	mov	r0, r8
  mp->next = php;
 8003c78:	60eb      	str	r3, [r5, #12]
 8003c7a:	f7fd faa1 	bl	80011c0 <chSemSignalI>
  chSchRescheduleS();
 8003c7e:	f7ff fa9f 	bl	80031c0 <chSchRescheduleS>
 8003c82:	f384 8811 	msr	BASEPRI, r4
    for (i = 0; i < MEMORY_POOL_SIZE; i++)
 8003c86:	45b1      	cmp	r9, r6
 8003c88:	d1ef      	bne.n	8003c6a <oslib_test_002_002_execute+0x8a>
  test_set_step(5);
 8003c8a:	2305      	movs	r3, #5
      test_assert(chGuardedPoolAllocTimeout(&gmp1, TIME_IMMEDIATE) != NULL, "list empty");
 8003c8c:	4d11      	ldr	r5, [pc, #68]	; (8003cd4 <oslib_test_002_002_execute+0xf4>)
  test_set_step(5);
 8003c8e:	f8ca 3000 	str.w	r3, [sl]
 8003c92:	2404      	movs	r4, #4
      test_assert(chGuardedPoolAllocTimeout(&gmp1, TIME_IMMEDIATE) != NULL, "list empty");
 8003c94:	2000      	movs	r0, #0
 8003c96:	f7fe f94b 	bl	8001f30 <chGuardedPoolAllocTimeout.constprop.15>
 8003c9a:	3000      	adds	r0, #0
 8003c9c:	bf18      	it	ne
 8003c9e:	2001      	movne	r0, #1
 8003ca0:	4629      	mov	r1, r5
 8003ca2:	f7fc fdad 	bl	8000800 <_test_assert>
 8003ca6:	b970      	cbnz	r0, 8003cc6 <oslib_test_002_002_execute+0xe6>
    for (i = 0; i < MEMORY_POOL_SIZE; i++)
 8003ca8:	3c01      	subs	r4, #1
 8003caa:	d1f3      	bne.n	8003c94 <oslib_test_002_002_execute+0xb4>
  test_set_step(6);
 8003cac:	2306      	movs	r3, #6
 8003cae:	f8ca 3000 	str.w	r3, [sl]
    test_assert(chGuardedPoolAllocTimeout(&gmp1, TIME_IMMEDIATE) == NULL, "list not empty");
 8003cb2:	f7fe f93d 	bl	8001f30 <chGuardedPoolAllocTimeout.constprop.15>
 8003cb6:	fab0 f080 	clz	r0, r0
 8003cba:	0940      	lsrs	r0, r0, #5
 8003cbc:	4906      	ldr	r1, [pc, #24]	; (8003cd8 <oslib_test_002_002_execute+0xf8>)
}
 8003cbe:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    test_assert(chGuardedPoolAllocTimeout(&gmp1, TIME_IMMEDIATE) == NULL, "list not empty");
 8003cc2:	f7fc bd9d 	b.w	8000800 <_test_assert>
}
 8003cc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003cca:	bf00      	nop
 8003ccc:	20000810 	.word	0x20000810
 8003cd0:	20000af8 	.word	0x20000af8
 8003cd4:	08007850 	.word	0x08007850
 8003cd8:	0800785c 	.word	0x0800785c
 8003cdc:	20001254 	.word	0x20001254

08003ce0 <evt_thread7>:
static THD_FUNCTION(evt_thread7, p) {
 8003ce0:	b538      	push	{r3, r4, r5, lr}
 8003ce2:	2520      	movs	r5, #32
 8003ce4:	f385 8811 	msr	BASEPRI, r5
  chEvtBroadcastFlagsI(esp, flags);
 8003ce8:	2100      	movs	r1, #0
 8003cea:	480b      	ldr	r0, [pc, #44]	; (8003d18 <evt_thread7+0x38>)
 8003cec:	f7fd fa28 	bl	8001140 <chEvtBroadcastFlagsI>
 8003cf0:	2400      	movs	r4, #0
  chSchRescheduleS();
 8003cf2:	f7ff fa65 	bl	80031c0 <chSchRescheduleS>
 8003cf6:	f384 8811 	msr	BASEPRI, r4
  chThdSleepMilliseconds(50);
 8003cfa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003cfe:	f7fe faaf 	bl	8002260 <chThdSleep>
 8003d02:	f385 8811 	msr	BASEPRI, r5
  chEvtBroadcastFlagsI(esp, flags);
 8003d06:	4805      	ldr	r0, [pc, #20]	; (8003d1c <evt_thread7+0x3c>)
 8003d08:	4621      	mov	r1, r4
 8003d0a:	f7fd fa19 	bl	8001140 <chEvtBroadcastFlagsI>
  chSchRescheduleS();
 8003d0e:	f7ff fa57 	bl	80031c0 <chSchRescheduleS>
 8003d12:	f384 8811 	msr	BASEPRI, r4
}
 8003d16:	bd38      	pop	{r3, r4, r5, pc}
 8003d18:	20000808 	.word	0x20000808
 8003d1c:	2000080c 	.word	0x2000080c

08003d20 <evt_thread3>:
static THD_FUNCTION(evt_thread3, p) {
 8003d20:	b510      	push	{r4, lr}
 8003d22:	4604      	mov	r4, r0
  chThdSleepMilliseconds(50);
 8003d24:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003d28:	f7fe fa9a 	bl	8002260 <chThdSleep>
 8003d2c:	2320      	movs	r3, #32
 8003d2e:	f383 8811 	msr	BASEPRI, r3
  chEvtSignalI(tp, events);
 8003d32:	2101      	movs	r1, #1
 8003d34:	4620      	mov	r0, r4
 8003d36:	f7fd f9eb 	bl	8001110 <chEvtSignalI>
  chSchRescheduleS();
 8003d3a:	f7ff fa41 	bl	80031c0 <chSchRescheduleS>
 8003d3e:	2300      	movs	r3, #0
 8003d40:	f383 8811 	msr	BASEPRI, r3
}
 8003d44:	bd10      	pop	{r4, pc}
 8003d46:	bf00      	nop
	...

08003d50 <thread4B>:
static THD_FUNCTION(thread4B, p) {
 8003d50:	b510      	push	{r4, lr}
  chThdSleepMilliseconds(150);
 8003d52:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8003d56:	f7fe fa83 	bl	8002260 <chThdSleep>
 8003d5a:	2320      	movs	r3, #32
 8003d5c:	f383 8811 	msr	BASEPRI, r3
  chMtxLockS(&m2);   /* For coverage of the chMtxLockS() function variant.*/
 8003d60:	4c06      	ldr	r4, [pc, #24]	; (8003d7c <thread4B+0x2c>)
 8003d62:	4620      	mov	r0, r4
 8003d64:	f7fe fd9c 	bl	80028a0 <chMtxLockS>
  chMtxUnlockS(&m2); /* For coverage of the chMtxUnlockS() function variant.*/
 8003d68:	4620      	mov	r0, r4
 8003d6a:	f7fd fa01 	bl	8001170 <chMtxUnlockS>
  chSchRescheduleS();
 8003d6e:	f7ff fa27 	bl	80031c0 <chSchRescheduleS>
 8003d72:	2300      	movs	r3, #0
 8003d74:	f383 8811 	msr	BASEPRI, r3
}
 8003d78:	bd10      	pop	{r4, pc}
 8003d7a:	bf00      	nop
 8003d7c:	2000083c 	.word	0x2000083c

08003d80 <thread2>:
static THD_FUNCTION(thread2, p) {
 8003d80:	b508      	push	{r3, lr}
  chThdSleepMilliseconds(50);
 8003d82:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003d86:	f7fe fa6b 	bl	8002260 <chThdSleep>
 8003d8a:	2320      	movs	r3, #32
 8003d8c:	f383 8811 	msr	BASEPRI, r3
  chSemSignalI(&sem1); /* For coverage reasons */
 8003d90:	4804      	ldr	r0, [pc, #16]	; (8003da4 <thread2+0x24>)
 8003d92:	f7fd fa15 	bl	80011c0 <chSemSignalI>
  chSchRescheduleS();
 8003d96:	f7ff fa13 	bl	80031c0 <chSchRescheduleS>
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	f383 8811 	msr	BASEPRI, r3
}
 8003da0:	bd08      	pop	{r3, pc}
 8003da2:	bf00      	nop
 8003da4:	20000b28 	.word	0x20000b28
	...

08003db0 <thread4>:
static THD_FUNCTION(thread4, p) {
 8003db0:	b508      	push	{r3, lr}
 8003db2:	2220      	movs	r2, #32
 8003db4:	f382 8811 	msr	BASEPRI, r2
 */
static inline void chBSemSignalI(binary_semaphore_t *bsp) {

  chDbgCheckClassI();

  if (bsp->sem.cnt < (cnt_t)1) {
 8003db8:	6883      	ldr	r3, [r0, #8]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	dd05      	ble.n	8003dca <thread4+0x1a>
 */
static inline void chBSemSignal(binary_semaphore_t *bsp) {

  chSysLock();
  chBSemSignalI(bsp);
  chSchRescheduleS();
 8003dbe:	f7ff f9ff 	bl	80031c0 <chSchRescheduleS>
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	f383 8811 	msr	BASEPRI, r3
}
 8003dc8:	bd08      	pop	{r3, pc}
    chSemSignalI(&bsp->sem);
 8003dca:	f7fd f9f9 	bl	80011c0 <chSemSignalI>
  chSchRescheduleS();
 8003dce:	f7ff f9f7 	bl	80031c0 <chSchRescheduleS>
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	f383 8811 	msr	BASEPRI, r3
 8003dd8:	bd08      	pop	{r3, pc}
 8003dda:	bf00      	nop
 8003ddc:	0000      	movs	r0, r0
	...

08003de0 <thread1.lto_priv.83>:
static THD_FUNCTION(thread1, p) {
 8003de0:	b510      	push	{r4, lr}
 8003de2:	2320      	movs	r3, #32
 8003de4:	4604      	mov	r4, r0
 8003de6:	f383 8811 	msr	BASEPRI, r3
  if (*trp != NULL) {
 8003dea:	4b09      	ldr	r3, [pc, #36]	; (8003e10 <thread1.lto_priv.83+0x30>)
 8003dec:	6818      	ldr	r0, [r3, #0]
 8003dee:	b120      	cbz	r0, 8003dfa <thread1.lto_priv.83+0x1a>
    *trp = NULL;
 8003df0:	2200      	movs	r2, #0
    tp->u.rdymsg = msg;
 8003df2:	6242      	str	r2, [r0, #36]	; 0x24
    *trp = NULL;
 8003df4:	601a      	str	r2, [r3, #0]
    (void) chSchReadyI(tp);
 8003df6:	f7fd f8bb 	bl	8000f70 <chSchReadyI>
  chSchRescheduleS();
 8003dfa:	f7ff f9e1 	bl	80031c0 <chSchRescheduleS>
 8003dfe:	2300      	movs	r3, #0
 8003e00:	f383 8811 	msr	BASEPRI, r3
  test_emit_token(*(char *)p);
 8003e04:	7820      	ldrb	r0, [r4, #0]
}
 8003e06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  test_emit_token(*(char *)p);
 8003e0a:	f7fc bd99 	b.w	8000940 <test_emit_token>
 8003e0e:	bf00      	nop
 8003e10:	20001280 	.word	0x20001280
	...

08003e20 <chMtxUnlock>:
  thread_t *ctp = currp;
 8003e20:	4b17      	ldr	r3, [pc, #92]	; (8003e80 <chMtxUnlock+0x60>)
void chMtxUnlock(mutex_t *mp) {
 8003e22:	b570      	push	{r4, r5, r6, lr}
  thread_t *ctp = currp;
 8003e24:	699d      	ldr	r5, [r3, #24]
 8003e26:	2320      	movs	r3, #32
 8003e28:	f383 8811 	msr	BASEPRI, r3
  return (bool)(tqp->next != (const thread_t *)tqp);
 8003e2c:	6804      	ldr	r4, [r0, #0]
    ctp->mtxlist = mp->next;
 8003e2e:	68c3      	ldr	r3, [r0, #12]
 8003e30:	63ab      	str	r3, [r5, #56]	; 0x38
    if (chMtxQueueNotEmptyS(mp)) {
 8003e32:	4284      	cmp	r4, r0
 8003e34:	d01d      	beq.n	8003e72 <chMtxUnlock+0x52>
      tprio_t newprio = ctp->realprio;
 8003e36:	6be9      	ldr	r1, [r5, #60]	; 0x3c
      while (lmp != NULL) {
 8003e38:	b14b      	cbz	r3, 8003e4e <chMtxUnlock+0x2e>
 8003e3a:	681a      	ldr	r2, [r3, #0]
        if (chMtxQueueNotEmptyS(lmp) &&
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d003      	beq.n	8003e48 <chMtxUnlock+0x28>
 8003e40:	6892      	ldr	r2, [r2, #8]
 8003e42:	4291      	cmp	r1, r2
 8003e44:	bf38      	it	cc
 8003e46:	4611      	movcc	r1, r2
        lmp = lmp->next;
 8003e48:	68db      	ldr	r3, [r3, #12]
      while (lmp != NULL) {
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d1f5      	bne.n	8003e3a <chMtxUnlock+0x1a>
 8003e4e:	4603      	mov	r3, r0
  tqp->next             = tp->queue.next;
 8003e50:	6822      	ldr	r2, [r4, #0]
      mp->next = tp->mtxlist;
 8003e52:	6ba6      	ldr	r6, [r4, #56]	; 0x38
      ctp->prio = newprio;
 8003e54:	60a9      	str	r1, [r5, #8]
      (void) chSchReadyI(tp);
 8003e56:	4620      	mov	r0, r4
 8003e58:	601a      	str	r2, [r3, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 8003e5a:	6053      	str	r3, [r2, #4]
      mp->next = tp->mtxlist;
 8003e5c:	e9c3 4602 	strd	r4, r6, [r3, #8]
      tp->mtxlist = mp;
 8003e60:	63a3      	str	r3, [r4, #56]	; 0x38
      (void) chSchReadyI(tp);
 8003e62:	f7fd f885 	bl	8000f70 <chSchReadyI>
      chSchRescheduleS();
 8003e66:	f7ff f9ab 	bl	80031c0 <chSchRescheduleS>
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	f383 8811 	msr	BASEPRI, r3
}
 8003e70:	bd70      	pop	{r4, r5, r6, pc}
      mp->owner = NULL;
 8003e72:	2300      	movs	r3, #0
 8003e74:	60a3      	str	r3, [r4, #8]
 8003e76:	2300      	movs	r3, #0
 8003e78:	f383 8811 	msr	BASEPRI, r3
}
 8003e7c:	bd70      	pop	{r4, r5, r6, pc}
 8003e7e:	bf00      	nop
 8003e80:	200008f0 	.word	0x200008f0
	...

08003e90 <chHeapAllocAligned.constprop.33>:
 * @return              A pointer to the aligned allocated block.
 * @retval NULL         if the block cannot be allocated.
 *
 * @api
 */
void *chHeapAllocAligned(memory_heap_t *heapp, size_t size, unsigned align) {
 8003e90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

  chDbgCheck((size > 0U) && MEM_IS_VALID_ALIGNMENT(align));

  /* If an heap is not specified then the default system header is used.*/
  if (heapp == NULL) {
    heapp = &default_heap;
 8003e94:	4c37      	ldr	r4, [pc, #220]	; (8003f74 <chHeapAllocAligned.constprop.33+0xe4>)
 8003e96:	2800      	cmp	r0, #0
 8003e98:	bf18      	it	ne
 8003e9a:	4604      	movne	r4, r0

  /* Size is converted in number of elementary allocation units.*/
  pages = MEM_ALIGN_NEXT(size, CH_HEAP_ALIGNMENT) / CH_HEAP_ALIGNMENT;

  /* Taking heap mutex/semaphore.*/
  H_LOCK(heapp);
 8003e9c:	f104 070c 	add.w	r7, r4, #12
 8003ea0:	4638      	mov	r0, r7
  pages = MEM_ALIGN_NEXT(size, CH_HEAP_ALIGNMENT) / CH_HEAP_ALIGNMENT;
 8003ea2:	f101 0807 	add.w	r8, r1, #7
void *chHeapAllocAligned(memory_heap_t *heapp, size_t size, unsigned align) {
 8003ea6:	460d      	mov	r5, r1
  pages = MEM_ALIGN_NEXT(size, CH_HEAP_ALIGNMENT) / CH_HEAP_ALIGNMENT;
 8003ea8:	ea4f 08d8 	mov.w	r8, r8, lsr #3
  H_LOCK(heapp);
 8003eac:	f7fe fd70 	bl	8002990 <chMtxLock>

  /* Start of the free blocks list.*/
  qp = &heapp->header;
 8003eb0:	1d20      	adds	r0, r4, #4
  while (H_NEXT(qp) != NULL) {
 8003eb2:	6802      	ldr	r2, [r0, #0]

    /* Next free block.*/
    hp = H_NEXT(qp);

    /* Pointer aligned to the requested alignment.*/
    ahp = (heap_header_t *)MEM_ALIGN_NEXT(H_BLOCK(hp), align) - 1U;
 8003eb4:	f102 030f 	add.w	r3, r2, #15
 8003eb8:	f023 0307 	bic.w	r3, r3, #7

    if ((ahp < H_LIMIT(hp)) && (pages <= NPAGES(H_LIMIT(hp), ahp + 1U))) {
 8003ebc:	461e      	mov	r6, r3
    ahp = (heap_header_t *)MEM_ALIGN_NEXT(H_BLOCK(hp), align) - 1U;
 8003ebe:	f102 0908 	add.w	r9, r2, #8
 8003ec2:	3b08      	subs	r3, #8
  while (H_NEXT(qp) != NULL) {
 8003ec4:	b17a      	cbz	r2, 8003ee6 <chHeapAllocAligned.constprop.33+0x56>
    if ((ahp < H_LIMIT(hp)) && (pages <= NPAGES(H_LIMIT(hp), ahp + 1U))) {
 8003ec6:	f8d2 c004 	ldr.w	ip, [r2, #4]
 8003eca:	f10c 0101 	add.w	r1, ip, #1
 8003ece:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 8003ed2:	eba1 0e06 	sub.w	lr, r1, r6
 8003ed6:	428b      	cmp	r3, r1
 8003ed8:	ea4f 0eee 	mov.w	lr, lr, asr #3
 8003edc:	d201      	bcs.n	8003ee2 <chHeapAllocAligned.constprop.33+0x52>
 8003ede:	45f0      	cmp	r8, lr
 8003ee0:	d912      	bls.n	8003f08 <chHeapAllocAligned.constprop.33+0x78>
          heap_header_t *fp;

          fp = H_BLOCK(hp) + pages;
          H_NEXT(fp) = H_NEXT(hp);
          H_PAGES(fp) = NPAGES(H_LIMIT(hp), H_BLOCK(fp));
          H_NEXT(qp) = fp;
 8003ee2:	4610      	mov	r0, r2
 8003ee4:	e7e5      	b.n	8003eb2 <chHeapAllocAligned.constprop.33+0x22>
    /* Next in the free blocks list.*/
    qp = hp;
  }

  /* Releasing heap mutex/semaphore.*/
  H_UNLOCK(heapp);
 8003ee6:	4638      	mov	r0, r7
 8003ee8:	f7ff ff9a 	bl	8003e20 <chMtxUnlock>

  /* More memory is required, tries to get it from the associated provider
     else fails.*/
  if (heapp->provider != NULL) {
 8003eec:	6826      	ldr	r6, [r4, #0]
 8003eee:	b146      	cbz	r6, 8003f02 <chHeapAllocAligned.constprop.33+0x72>
    ahp = heapp->provider(pages * CH_HEAP_ALIGNMENT,
 8003ef0:	2208      	movs	r2, #8
 8003ef2:	ea4f 00c8 	mov.w	r0, r8, lsl #3
 8003ef6:	4611      	mov	r1, r2
 8003ef8:	47b0      	blx	r6
                          align,
                          sizeof (heap_header_t));
    if (ahp != NULL) {
 8003efa:	4606      	mov	r6, r0
 8003efc:	b108      	cbz	r0, 8003f02 <chHeapAllocAligned.constprop.33+0x72>
      hp = ahp - 1U;
      H_HEAP(hp) = heapp;
      H_SIZE(hp) = size;
 8003efe:	e940 4502 	strd	r4, r5, [r0, #-8]
      /*lint -restore*/
    }
  }

  return NULL;
}
 8003f02:	4630      	mov	r0, r6
 8003f04:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (ahp > hp) {
 8003f08:	429a      	cmp	r2, r3
 8003f0a:	d31a      	bcc.n	8003f42 <chHeapAllocAligned.constprop.33+0xb2>
        if (H_PAGES(hp) == pages) {
 8003f0c:	45e0      	cmp	r8, ip
 8003f0e:	6813      	ldr	r3, [r2, #0]
 8003f10:	d02c      	beq.n	8003f6c <chHeapAllocAligned.constprop.33+0xdc>
          fp = H_BLOCK(hp) + pages;
 8003f12:	f108 0801 	add.w	r8, r8, #1
 8003f16:	eb02 0cc8 	add.w	ip, r2, r8, lsl #3
          H_PAGES(fp) = NPAGES(H_LIMIT(hp), H_BLOCK(fp));
 8003f1a:	f10c 0608 	add.w	r6, ip, #8
 8003f1e:	1b89      	subs	r1, r1, r6
 8003f20:	10c9      	asrs	r1, r1, #3
          H_NEXT(fp) = H_NEXT(hp);
 8003f22:	f842 3038 	str.w	r3, [r2, r8, lsl #3]
    ahp = (heap_header_t *)MEM_ALIGN_NEXT(H_BLOCK(hp), align) - 1U;
 8003f26:	464e      	mov	r6, r9
          H_PAGES(fp) = NPAGES(H_LIMIT(hp), H_BLOCK(fp));
 8003f28:	f8cc 1004 	str.w	r1, [ip, #4]
          H_NEXT(qp) = fp;
 8003f2c:	4613      	mov	r3, r2
 8003f2e:	f8c0 c000 	str.w	ip, [r0]
      H_UNLOCK(heapp);
 8003f32:	4638      	mov	r0, r7
      H_HEAP(hp) = heapp;
 8003f34:	e9c3 4500 	strd	r4, r5, [r3]
      H_UNLOCK(heapp);
 8003f38:	f7ff ff72 	bl	8003e20 <chMtxUnlock>
}
 8003f3c:	4630      	mov	r0, r6
 8003f3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        H_PAGES(hp) = NPAGES(ahp, H_BLOCK(hp));
 8003f42:	eba3 0909 	sub.w	r9, r3, r9
 8003f46:	ea4f 01e9 	mov.w	r1, r9, asr #3
        if (bpages > pages) {
 8003f4a:	45f0      	cmp	r8, lr
        H_PAGES(hp) = NPAGES(ahp, H_BLOCK(hp));
 8003f4c:	6051      	str	r1, [r2, #4]
        if (bpages > pages) {
 8003f4e:	d2f0      	bcs.n	8003f32 <chHeapAllocAligned.constprop.33+0xa2>
          fp = H_BLOCK(ahp) + pages;
 8003f50:	f108 0c01 	add.w	ip, r8, #1
 8003f54:	eb03 00cc 	add.w	r0, r3, ip, lsl #3
          H_PAGES(fp) = (bpages - pages) - 1U;
 8003f58:	ea6f 0108 	mvn.w	r1, r8
 8003f5c:	4471      	add	r1, lr
          H_NEXT(fp) = H_NEXT(hp);
 8003f5e:	f8d2 e000 	ldr.w	lr, [r2]
          H_PAGES(fp) = (bpages - pages) - 1U;
 8003f62:	6041      	str	r1, [r0, #4]
          H_NEXT(fp) = H_NEXT(hp);
 8003f64:	f843 e03c 	str.w	lr, [r3, ip, lsl #3]
          H_NEXT(hp) = fp;
 8003f68:	6010      	str	r0, [r2, #0]
 8003f6a:	e7e2      	b.n	8003f32 <chHeapAllocAligned.constprop.33+0xa2>
          H_NEXT(qp) = H_NEXT(hp);
 8003f6c:	6003      	str	r3, [r0, #0]
    ahp = (heap_header_t *)MEM_ALIGN_NEXT(H_BLOCK(hp), align) - 1U;
 8003f6e:	464e      	mov	r6, r9
          H_NEXT(qp) = H_NEXT(hp);
 8003f70:	4613      	mov	r3, r2
 8003f72:	e7de      	b.n	8003f32 <chHeapAllocAligned.constprop.33+0xa2>
 8003f74:	20000a90 	.word	0x20000a90
	...

08003f80 <chThdCreateFromHeap.constprop.32>:
thread_t *chThdCreateFromHeap(memory_heap_t *heapp, size_t size,
 8003f80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f82:	4604      	mov	r4, r0
 8003f84:	b087      	sub	sp, #28
 8003f86:	460f      	mov	r7, r1
  wsp = chHeapAllocAligned(heapp, size, PORT_WORKING_AREA_ALIGN);
 8003f88:	4811      	ldr	r0, [pc, #68]	; (8003fd0 <chThdCreateFromHeap.constprop.32+0x50>)
 8003f8a:	4621      	mov	r1, r4
thread_t *chThdCreateFromHeap(memory_heap_t *heapp, size_t size,
 8003f8c:	4616      	mov	r6, r2
 8003f8e:	461d      	mov	r5, r3
  wsp = chHeapAllocAligned(heapp, size, PORT_WORKING_AREA_ALIGN);
 8003f90:	f7ff ff7e 	bl	8003e90 <chHeapAllocAligned.constprop.33>
  if (wsp == NULL) {
 8003f94:	b1d0      	cbz	r0, 8003fcc <chThdCreateFromHeap.constprop.32+0x4c>
  thread_descriptor_t td = {
 8003f96:	4b0f      	ldr	r3, [pc, #60]	; (8003fd4 <chThdCreateFromHeap.constprop.32+0x54>)
 8003f98:	9603      	str	r6, [sp, #12]
    (stkalign_t *)((uint8_t *)wsp + size),
 8003f9a:	4404      	add	r4, r0
  thread_descriptor_t td = {
 8003f9c:	e9cd 3504 	strd	r3, r5, [sp, #16]
 8003fa0:	9402      	str	r4, [sp, #8]
 8003fa2:	e9cd 7000 	strd	r7, r0, [sp]
 8003fa6:	2320      	movs	r3, #32
 8003fa8:	f383 8811 	msr	BASEPRI, r3
  tp = chThdCreateSuspendedI(&td);
 8003fac:	4668      	mov	r0, sp
 8003fae:	f7fc ff67 	bl	8000e80 <chThdCreateSuspendedI>
  tp->flags = CH_FLAG_MODE_HEAP;
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
  chSchWakeupS(tp, MSG_OK);
 8003fb8:	2100      	movs	r1, #0
  tp = chThdCreateSuspendedI(&td);
 8003fba:	4604      	mov	r4, r0
  chSchWakeupS(tp, MSG_OK);
 8003fbc:	f7fd fe00 	bl	8001bc0 <chSchWakeupS>
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	f383 8811 	msr	BASEPRI, r3
}
 8003fc6:	4620      	mov	r0, r4
 8003fc8:	b007      	add	sp, #28
 8003fca:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return NULL;
 8003fcc:	4604      	mov	r4, r0
 8003fce:	e7fa      	b.n	8003fc6 <chThdCreateFromHeap.constprop.32+0x46>
 8003fd0:	20000aac 	.word	0x20000aac
 8003fd4:	080009b1 	.word	0x080009b1
	...

08003fe0 <dyn_create_object_heap>:
                                             size_t size) {
 8003fe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  dyn_element_t *p = dlp->next;
 8003fe2:	680c      	ldr	r4, [r1, #0]
  while (p != (dyn_element_t *)dlp) {
 8003fe4:	42a1      	cmp	r1, r4
                                             size_t size) {
 8003fe6:	460d      	mov	r5, r1
 8003fe8:	4606      	mov	r6, r0
 8003fea:	4617      	mov	r7, r2
  while (p != (dyn_element_t *)dlp) {
 8003fec:	d103      	bne.n	8003ff6 <dyn_create_object_heap+0x16>
 8003fee:	e00d      	b.n	800400c <dyn_create_object_heap+0x2c>
    p = p->next;
 8003ff0:	6824      	ldr	r4, [r4, #0]
  while (p != (dyn_element_t *)dlp) {
 8003ff2:	42a5      	cmp	r5, r4
 8003ff4:	d00a      	beq.n	800400c <dyn_create_object_heap+0x2c>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 8003ff6:	2208      	movs	r2, #8
 8003ff8:	4631      	mov	r1, r6
 8003ffa:	18a0      	adds	r0, r4, r2
 8003ffc:	f003 fad4 	bl	80075a8 <strncmp>
 8004000:	2800      	cmp	r0, #0
 8004002:	d1f5      	bne.n	8003ff0 <dyn_create_object_heap+0x10>
  if (dep != NULL) {
 8004004:	b114      	cbz	r4, 800400c <dyn_create_object_heap+0x2c>
    return NULL;
 8004006:	4604      	mov	r4, r0
}
 8004008:	4620      	mov	r0, r4
 800400a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 *
 * @api
 */
static inline void *chHeapAlloc(memory_heap_t *heapp, size_t size) {

  return chHeapAllocAligned(heapp, size, CH_HEAP_ALIGNMENT);
 800400c:	4639      	mov	r1, r7
 800400e:	2000      	movs	r0, #0
 8004010:	f7ff ff3e 	bl	8003e90 <chHeapAllocAligned.constprop.33>
  if (dep == NULL) {
 8004014:	4604      	mov	r4, r0
 8004016:	b148      	cbz	r0, 800402c <dyn_create_object_heap+0x4c>
  strncpy(dep->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH);
 8004018:	2208      	movs	r2, #8
 800401a:	4410      	add	r0, r2
 800401c:	4631      	mov	r1, r6
 800401e:	f003 fb0f 	bl	8007640 <strncpy>
  dep->next = dlp->next;
 8004022:	682b      	ldr	r3, [r5, #0]
  dep->refs = (ucnt_t)1;
 8004024:	2201      	movs	r2, #1
  dep->next = dlp->next;
 8004026:	e9c4 3200 	strd	r3, r2, [r4]
  dlp->next = dep;
 800402a:	602c      	str	r4, [r5, #0]
}
 800402c:	4620      	mov	r0, r4
 800402e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004030 <chFactoryRegisterObject.constprop.12>:
 * @retval NULL         if the object to be registered cannot be allocated or
 *                      a registered object with the same name exists.
 *
 * @api
 */
registered_object_t *chFactoryRegisterObject(const char *name,
 8004030:	b538      	push	{r3, r4, r5, lr}
 8004032:	4605      	mov	r5, r0
                                             void *objp) {
  registered_object_t *rop;

  F_LOCK();
 8004034:	4807      	ldr	r0, [pc, #28]	; (8004054 <chFactoryRegisterObject.constprop.12+0x24>)
 8004036:	f7fe fcab 	bl	8002990 <chMtxLock>

  rop = (registered_object_t *)dyn_create_object_pool(name,
 800403a:	4a07      	ldr	r2, [pc, #28]	; (8004058 <chFactoryRegisterObject.constprop.12+0x28>)
 800403c:	4807      	ldr	r0, [pc, #28]	; (800405c <chFactoryRegisterObject.constprop.12+0x2c>)
 800403e:	1f11      	subs	r1, r2, #4
 8004040:	f7fd fd4e 	bl	8001ae0 <dyn_create_object_pool>
                                                      &ch_factory.obj_list,
                                                      &ch_factory.obj_pool);
  if (rop != NULL) {
 8004044:	4604      	mov	r4, r0
 8004046:	b100      	cbz	r0, 800404a <chFactoryRegisterObject.constprop.12+0x1a>
    /* Initializing registered object data.*/
    rop->objp = objp;
 8004048:	6105      	str	r5, [r0, #16]
  }

  F_UNLOCK();
 800404a:	4802      	ldr	r0, [pc, #8]	; (8004054 <chFactoryRegisterObject.constprop.12+0x24>)
 800404c:	f7ff fee8 	bl	8003e20 <chMtxUnlock>

  return rop;
}
 8004050:	4620      	mov	r0, r4
 8004052:	bd38      	pop	{r3, r4, r5, pc}
 8004054:	20000968 	.word	0x20000968
 8004058:	2000097c 	.word	0x2000097c
 800405c:	080076e0 	.word	0x080076e0

08004060 <chFactoryFindObject.constprop.11>:
 * @retval NULL         if a registered object with the specified name
 *                      does not exist.
 *
 * @api
 */
registered_object_t *chFactoryFindObject(const char *name) {
 8004060:	b538      	push	{r3, r4, r5, lr}
  registered_object_t *rop;

  F_LOCK();
 8004062:	4c07      	ldr	r4, [pc, #28]	; (8004080 <chFactoryFindObject.constprop.11+0x20>)
 8004064:	4620      	mov	r0, r4
 8004066:	f7fe fc93 	bl	8002990 <chMtxLock>

  rop = (registered_object_t *)dyn_find_object(name, &ch_factory.obj_list);
 800406a:	f104 0110 	add.w	r1, r4, #16
 800406e:	4805      	ldr	r0, [pc, #20]	; (8004084 <chFactoryFindObject.constprop.11+0x24>)
 8004070:	f7fd fd16 	bl	8001aa0 <dyn_find_object>
 8004074:	4605      	mov	r5, r0

  F_UNLOCK();
 8004076:	4620      	mov	r0, r4
 8004078:	f7ff fed2 	bl	8003e20 <chMtxUnlock>

  return rop;
}
 800407c:	4628      	mov	r0, r5
 800407e:	bd38      	pop	{r3, r4, r5, pc}
 8004080:	20000968 	.word	0x20000968
 8004084:	080076e0 	.word	0x080076e0
	...

08004090 <chFactoryCreateBuffer.constprop.10>:
 * @retval NULL         if the dynamic buffer object cannot be allocated or
 *                      a dynamic buffer object with the same name exists.
 *
 * @api
 */
dyn_buffer_t *chFactoryCreateBuffer(const char *name, size_t size) {
 8004090:	b510      	push	{r4, lr}
  dyn_buffer_t *dbp;

  F_LOCK();
 8004092:	480a      	ldr	r0, [pc, #40]	; (80040bc <chFactoryCreateBuffer.constprop.10+0x2c>)
 8004094:	f7fe fc7c 	bl	8002990 <chMtxLock>

  dbp = (dyn_buffer_t *)dyn_create_object_heap(name,
 8004098:	2280      	movs	r2, #128	; 0x80
 800409a:	4909      	ldr	r1, [pc, #36]	; (80040c0 <chFactoryCreateBuffer.constprop.10+0x30>)
 800409c:	4809      	ldr	r0, [pc, #36]	; (80040c4 <chFactoryCreateBuffer.constprop.10+0x34>)
 800409e:	f7ff ff9f 	bl	8003fe0 <dyn_create_object_heap>
                                               &ch_factory.buf_list,
                                               size);
  if (dbp != NULL) {
 80040a2:	4604      	mov	r4, r0
 80040a4:	b120      	cbz	r0, 80040b0 <chFactoryCreateBuffer.constprop.10+0x20>
    /* Initializing buffer object data.*/
    memset((void *)dbp->buffer, 0, size);
 80040a6:	2280      	movs	r2, #128	; 0x80
 80040a8:	2100      	movs	r1, #0
 80040aa:	3010      	adds	r0, #16
 80040ac:	f003 fa32 	bl	8007514 <memset>
  }

  F_UNLOCK();
 80040b0:	4802      	ldr	r0, [pc, #8]	; (80040bc <chFactoryCreateBuffer.constprop.10+0x2c>)
 80040b2:	f7ff feb5 	bl	8003e20 <chMtxUnlock>

  return dbp;
}
 80040b6:	4620      	mov	r0, r4
 80040b8:	bd10      	pop	{r4, pc}
 80040ba:	bf00      	nop
 80040bc:	20000968 	.word	0x20000968
 80040c0:	2000098c 	.word	0x2000098c
 80040c4:	080076c0 	.word	0x080076c0
	...

080040d0 <chFactoryFindBuffer.constprop.9>:
 * @retval NULL         if a dynamic buffer object with the specified name
 *                      does not exist.
 *
 * @api
 */
dyn_buffer_t *chFactoryFindBuffer(const char *name) {
 80040d0:	b538      	push	{r3, r4, r5, lr}
  dyn_buffer_t *dbp;

  F_LOCK();
 80040d2:	4c07      	ldr	r4, [pc, #28]	; (80040f0 <chFactoryFindBuffer.constprop.9+0x20>)
 80040d4:	4620      	mov	r0, r4
 80040d6:	f7fe fc5b 	bl	8002990 <chMtxLock>

  dbp = (dyn_buffer_t *)dyn_find_object(name, &ch_factory.buf_list);
 80040da:	f104 0124 	add.w	r1, r4, #36	; 0x24
 80040de:	4805      	ldr	r0, [pc, #20]	; (80040f4 <chFactoryFindBuffer.constprop.9+0x24>)
 80040e0:	f7fd fcde 	bl	8001aa0 <dyn_find_object>
 80040e4:	4605      	mov	r5, r0

  F_UNLOCK();
 80040e6:	4620      	mov	r0, r4
 80040e8:	f7ff fe9a 	bl	8003e20 <chMtxUnlock>

  return dbp;
}
 80040ec:	4628      	mov	r0, r5
 80040ee:	bd38      	pop	{r3, r4, r5, pc}
 80040f0:	20000968 	.word	0x20000968
 80040f4:	080076c0 	.word	0x080076c0
	...

08004100 <chFactoryCreateSemaphore.constprop.8>:
 * @retval NULL         if the dynamic semaphore object cannot be allocated or
 *                      a dynamic semaphore with the same name exists.
 *
 * @api
 */
dyn_semaphore_t *chFactoryCreateSemaphore(const char *name, cnt_t n) {
 8004100:	b510      	push	{r4, lr}
  dyn_semaphore_t *dsp;

  F_LOCK();
 8004102:	480a      	ldr	r0, [pc, #40]	; (800412c <chFactoryCreateSemaphore.constprop.8+0x2c>)
 8004104:	f7fe fc44 	bl	8002990 <chMtxLock>

  dsp = (dyn_semaphore_t *)dyn_create_object_pool(name,
 8004108:	4a09      	ldr	r2, [pc, #36]	; (8004130 <chFactoryCreateSemaphore.constprop.8+0x30>)
 800410a:	480a      	ldr	r0, [pc, #40]	; (8004134 <chFactoryCreateSemaphore.constprop.8+0x34>)
 800410c:	1f11      	subs	r1, r2, #4
 800410e:	f7fd fce7 	bl	8001ae0 <dyn_create_object_pool>
                                                  &ch_factory.sem_list,
                                                  &ch_factory.sem_pool);
  if (dsp != NULL) {
 8004112:	4604      	mov	r4, r0
 8004114:	b128      	cbz	r0, 8004122 <chFactoryCreateSemaphore.constprop.8+0x22>
    /* Initializing semaphore object dataa.*/
    chSemObjectInit(&dsp->sem, n);
 8004116:	f100 0310 	add.w	r3, r0, #16
  tqp->prev = (thread_t *)tqp;
 800411a:	e9c0 3304 	strd	r3, r3, [r0, #16]
  sp->cnt = n;
 800411e:	2200      	movs	r2, #0
 8004120:	6182      	str	r2, [r0, #24]
  }

  F_UNLOCK();
 8004122:	4802      	ldr	r0, [pc, #8]	; (800412c <chFactoryCreateSemaphore.constprop.8+0x2c>)
 8004124:	f7ff fe7c 	bl	8003e20 <chMtxUnlock>

  return dsp;
}
 8004128:	4620      	mov	r0, r4
 800412a:	bd10      	pop	{r4, pc}
 800412c:	20000968 	.word	0x20000968
 8004130:	20000994 	.word	0x20000994
 8004134:	080076d8 	.word	0x080076d8
	...

08004140 <chFactoryFindSemaphore.constprop.7>:
 * @retval NULL         if a dynamic semaphore object with the specified name
 *                      does not exist.
 *
 * @api
 */
dyn_semaphore_t *chFactoryFindSemaphore(const char *name) {
 8004140:	b538      	push	{r3, r4, r5, lr}
  dyn_semaphore_t *dsp;

  F_LOCK();
 8004142:	4c07      	ldr	r4, [pc, #28]	; (8004160 <chFactoryFindSemaphore.constprop.7+0x20>)
 8004144:	4620      	mov	r0, r4
 8004146:	f7fe fc23 	bl	8002990 <chMtxLock>

  dsp = (dyn_semaphore_t *)dyn_find_object(name, &ch_factory.sem_list);
 800414a:	f104 0128 	add.w	r1, r4, #40	; 0x28
 800414e:	4805      	ldr	r0, [pc, #20]	; (8004164 <chFactoryFindSemaphore.constprop.7+0x24>)
 8004150:	f7fd fca6 	bl	8001aa0 <dyn_find_object>
 8004154:	4605      	mov	r5, r0

  F_UNLOCK();
 8004156:	4620      	mov	r0, r4
 8004158:	f7ff fe62 	bl	8003e20 <chMtxUnlock>

  return dsp;
}
 800415c:	4628      	mov	r0, r5
 800415e:	bd38      	pop	{r3, r4, r5, pc}
 8004160:	20000968 	.word	0x20000968
 8004164:	080076d8 	.word	0x080076d8
	...

08004170 <chFactoryCreateMailbox.constprop.6>:
 * @retval NULL         if the dynamic mailbox object cannot be allocated or
 *                      a dynamic mailbox object with the same name exists.
 *
 * @api
 */
dyn_mailbox_t *chFactoryCreateMailbox(const char *name, size_t n) {
 8004170:	b538      	push	{r3, r4, r5, lr}
  dyn_mailbox_t *dmp;

  F_LOCK();
 8004172:	4811      	ldr	r0, [pc, #68]	; (80041b8 <chFactoryCreateMailbox.constprop.6+0x48>)
 8004174:	f7fe fc0c 	bl	8002990 <chMtxLock>

  dmp = (dyn_mailbox_t *)dyn_create_object_heap(name,
 8004178:	2278      	movs	r2, #120	; 0x78
 800417a:	4910      	ldr	r1, [pc, #64]	; (80041bc <chFactoryCreateMailbox.constprop.6+0x4c>)
 800417c:	4810      	ldr	r0, [pc, #64]	; (80041c0 <chFactoryCreateMailbox.constprop.6+0x50>)
 800417e:	f7ff ff2f 	bl	8003fe0 <dyn_create_object_heap>
                                                &ch_factory.mbx_list,
                                                sizeof (dyn_mailbox_t) +
                                                (n * sizeof (msg_t)));
  if (dmp != NULL) {
 8004182:	4604      	mov	r4, r0
 8004184:	b198      	cbz	r0, 80041ae <chFactoryCreateMailbox.constprop.6+0x3e>
    /* Initializing mailbox object data.*/
    chMBObjectInit(&dmp->mbx, dmp->msgbuf, n);
 8004186:	f100 0338 	add.w	r3, r0, #56	; 0x38
  chThdQueueObjectInit(&mbp->qw);
 800418a:	f104 0128 	add.w	r1, r4, #40	; 0x28
  chThdQueueObjectInit(&mbp->qr);
 800418e:	f104 0230 	add.w	r2, r4, #48	; 0x30
  mbp->wrptr  = buf;
 8004192:	e9c4 3306 	strd	r3, r3, [r4, #24]
 8004196:	e9c4 110a 	strd	r1, r1, [r4, #40]	; 0x28
 800419a:	e9c4 220c 	strd	r2, r2, [r4, #48]	; 0x30
  mbp->top    = &buf[n];
 800419e:	f100 0578 	add.w	r5, r0, #120	; 0x78
  mbp->cnt    = (size_t)0;
 80041a2:	2000      	movs	r0, #0
  mbp->buffer = buf;
 80041a4:	6123      	str	r3, [r4, #16]
  mbp->top    = &buf[n];
 80041a6:	6165      	str	r5, [r4, #20]
  mbp->cnt    = (size_t)0;
 80041a8:	6220      	str	r0, [r4, #32]
  mbp->reset  = false;
 80041aa:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
  }

  F_UNLOCK();
 80041ae:	4802      	ldr	r0, [pc, #8]	; (80041b8 <chFactoryCreateMailbox.constprop.6+0x48>)
 80041b0:	f7ff fe36 	bl	8003e20 <chMtxUnlock>

  return dmp;
}
 80041b4:	4620      	mov	r0, r4
 80041b6:	bd38      	pop	{r3, r4, r5, pc}
 80041b8:	20000968 	.word	0x20000968
 80041bc:	200009a4 	.word	0x200009a4
 80041c0:	080076c8 	.word	0x080076c8
	...

080041d0 <chFactoryFindMailbox.constprop.5>:
 * @retval NULL         if a dynamic mailbox object with the specified name
 *                      does not exist.
 *
 * @api
 */
dyn_mailbox_t *chFactoryFindMailbox(const char *name) {
 80041d0:	b538      	push	{r3, r4, r5, lr}
  dyn_mailbox_t *dmp;

  F_LOCK();
 80041d2:	4c07      	ldr	r4, [pc, #28]	; (80041f0 <chFactoryFindMailbox.constprop.5+0x20>)
 80041d4:	4620      	mov	r0, r4
 80041d6:	f7fe fbdb 	bl	8002990 <chMtxLock>

  dmp = (dyn_mailbox_t *)dyn_find_object(name, &ch_factory.mbx_list);
 80041da:	f104 013c 	add.w	r1, r4, #60	; 0x3c
 80041de:	4805      	ldr	r0, [pc, #20]	; (80041f4 <chFactoryFindMailbox.constprop.5+0x24>)
 80041e0:	f7fd fc5e 	bl	8001aa0 <dyn_find_object>
 80041e4:	4605      	mov	r5, r0

  F_UNLOCK();
 80041e6:	4620      	mov	r0, r4
 80041e8:	f7ff fe1a 	bl	8003e20 <chMtxUnlock>

  return dmp;
}
 80041ec:	4628      	mov	r0, r5
 80041ee:	bd38      	pop	{r3, r4, r5, pc}
 80041f0:	20000968 	.word	0x20000968
 80041f4:	080076c8 	.word	0x080076c8
	...

08004200 <chFactoryCreateObjectsFIFO.constprop.4>:
 *                      allocated or a dynamic "objects FIFO" object with
 *                      the same name exists.
 *
 * @api
 */
dyn_objects_fifo_t *chFactoryCreateObjectsFIFO(const char *name,
 8004200:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
                                               size_t objsize,
                                               size_t objn,
                                               unsigned objalign) {
  dyn_objects_fifo_t *dofp;

  F_LOCK();
 8004204:	4822      	ldr	r0, [pc, #136]	; (8004290 <chFactoryCreateObjectsFIFO.constprop.4+0x90>)
 8004206:	f7fe fbc3 	bl	8002990 <chMtxLock>

  dofp = (dyn_objects_fifo_t *)dyn_create_object_heap(name,
 800420a:	f44f 72ca 	mov.w	r2, #404	; 0x194
 800420e:	4921      	ldr	r1, [pc, #132]	; (8004294 <chFactoryCreateObjectsFIFO.constprop.4+0x94>)
 8004210:	4821      	ldr	r0, [pc, #132]	; (8004298 <chFactoryCreateObjectsFIFO.constprop.4+0x98>)
 8004212:	f7ff fee5 	bl	8003fe0 <dyn_create_object_heap>
                                                      &ch_factory.fifo_list,
                                                      sizeof (dyn_objects_fifo_t) +
                                                      (objn * sizeof (msg_t)) +
                                                      (objn * objsize));
  if (dofp != NULL) {
 8004216:	4604      	mov	r4, r0
 8004218:	b398      	cbz	r0, 8004282 <chFactoryCreateObjectsFIFO.constprop.4+0x82>
 */
static inline void chFifoObjectInit(objects_fifo_t *ofp, size_t objsize,
                                    size_t objn, unsigned objalign,
                                    void *objbuf, msg_t *msgbuf) {

  chGuardedPoolObjectInitAligned(&ofp->free, objsize, objalign);
 800421a:	f100 0810 	add.w	r8, r0, #16
  mp->object_size = size;
 800421e:	2610      	movs	r6, #16
  mp->align = align;
 8004220:	2304      	movs	r3, #4
 8004222:	e9c0 8804 	strd	r8, r8, [r0, #16]
 8004226:	e9c0 6308 	strd	r6, r3, [r0, #32]
  mp->next = NULL;
 800422a:	2700      	movs	r7, #0
    /* Initializing mailbox object data.*/
    chFifoObjectInit(&dofp->fifo, objsize, objn, objalign,
                     (void *)&dofp->msgbuf[objn], dofp->msgbuf);
 800422c:	f100 0b94 	add.w	fp, r0, #148	; 0x94
 8004230:	465d      	mov	r5, fp
 8004232:	61c7      	str	r7, [r0, #28]
  mp->provider = provider;
 8004234:	6287      	str	r7, [r0, #40]	; 0x28
 8004236:	6187      	str	r7, [r0, #24]
 8004238:	f100 0a54 	add.w	sl, r0, #84	; 0x54
 800423c:	f04f 0920 	mov.w	r9, #32
 8004240:	f389 8811 	msr	BASEPRI, r9
  php->next = mp->next;
 8004244:	69e3      	ldr	r3, [r4, #28]
 8004246:	602b      	str	r3, [r5, #0]
 8004248:	4640      	mov	r0, r8
  mp->next = php;
 800424a:	61e5      	str	r5, [r4, #28]
 800424c:	f7fc ffb8 	bl	80011c0 <chSemSignalI>
  chSchRescheduleS();
 8004250:	f7fe ffb6 	bl	80031c0 <chSchRescheduleS>
 8004254:	f387 8811 	msr	BASEPRI, r7
    p = (void *)(((uint8_t *)p) + gmp->pool.object_size);
 8004258:	6a23      	ldr	r3, [r4, #32]
  while (n != 0U) {
 800425a:	3e01      	subs	r6, #1
    p = (void *)(((uint8_t *)p) + gmp->pool.object_size);
 800425c:	441d      	add	r5, r3
  while (n != 0U) {
 800425e:	d1ef      	bne.n	8004240 <chFactoryCreateObjectsFIFO.constprop.4+0x40>
  chThdQueueObjectInit(&mbp->qw);
 8004260:	f104 0244 	add.w	r2, r4, #68	; 0x44
  chThdQueueObjectInit(&mbp->qr);
 8004264:	f104 034c 	add.w	r3, r4, #76	; 0x4c
  mbp->wrptr  = buf;
 8004268:	e9c4 aa0d 	strd	sl, sl, [r4, #52]	; 0x34
 800426c:	e9c4 2211 	strd	r2, r2, [r4, #68]	; 0x44
 8004270:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
  mbp->buffer = buf;
 8004274:	f8c4 a02c 	str.w	sl, [r4, #44]	; 0x2c
  mbp->top    = &buf[n];
 8004278:	f8c4 b030 	str.w	fp, [r4, #48]	; 0x30
  mbp->cnt    = (size_t)0;
 800427c:	63e6      	str	r6, [r4, #60]	; 0x3c
  mbp->reset  = false;
 800427e:	f884 6040 	strb.w	r6, [r4, #64]	; 0x40
  }

  F_UNLOCK();
 8004282:	4803      	ldr	r0, [pc, #12]	; (8004290 <chFactoryCreateObjectsFIFO.constprop.4+0x90>)
 8004284:	f7ff fdcc 	bl	8003e20 <chMtxUnlock>

  return dofp;
}
 8004288:	4620      	mov	r0, r4
 800428a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800428e:	bf00      	nop
 8004290:	20000968 	.word	0x20000968
 8004294:	200009a8 	.word	0x200009a8
 8004298:	080076d0 	.word	0x080076d0
 800429c:	00000000 	.word	0x00000000

080042a0 <chFactoryFindObjectsFIFO.constprop.3>:
 * @retval NULL         if a dynamic "objects FIFO" object with the specified
 *                      name does not exist.
 *
 * @api
 */
dyn_objects_fifo_t *chFactoryFindObjectsFIFO(const char *name) {
 80042a0:	b538      	push	{r3, r4, r5, lr}
  dyn_objects_fifo_t *dofp;

  F_LOCK();
 80042a2:	4c07      	ldr	r4, [pc, #28]	; (80042c0 <chFactoryFindObjectsFIFO.constprop.3+0x20>)
 80042a4:	4620      	mov	r0, r4
 80042a6:	f7fe fb73 	bl	8002990 <chMtxLock>

  dofp = (dyn_objects_fifo_t *)dyn_find_object(name, &ch_factory.fifo_list);
 80042aa:	f104 0140 	add.w	r1, r4, #64	; 0x40
 80042ae:	4805      	ldr	r0, [pc, #20]	; (80042c4 <chFactoryFindObjectsFIFO.constprop.3+0x24>)
 80042b0:	f7fd fbf6 	bl	8001aa0 <dyn_find_object>
 80042b4:	4605      	mov	r5, r0

  F_UNLOCK();
 80042b6:	4620      	mov	r0, r4
 80042b8:	f7ff fdb2 	bl	8003e20 <chMtxUnlock>

  return dofp;
}
 80042bc:	4628      	mov	r0, r5
 80042be:	bd38      	pop	{r3, r4, r5, pc}
 80042c0:	20000968 	.word	0x20000968
 80042c4:	080076d0 	.word	0x080076d0
	...

080042d0 <rt_test_010_011_execute>:
static void rt_test_010_011_execute(void) {
 80042d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  test_set_step(1);
 80042d4:	f8df 9080 	ldr.w	r9, [pc, #128]	; 8004358 <rt_test_010_011_execute+0x88>
      chMtxLock(&mtx1);
 80042d8:	4c1c      	ldr	r4, [pc, #112]	; (800434c <rt_test_010_011_execute+0x7c>)
  test_set_step(1);
 80042da:	2301      	movs	r3, #1
 80042dc:	f8c9 3000 	str.w	r3, [r9]
    start = test_wait_tick();
 80042e0:	f7fe f9f6 	bl	80026d0 <test_wait_tick>
    n = 0;
 80042e4:	2500      	movs	r5, #0
    start = test_wait_tick();
 80042e6:	4680      	mov	r8, r0
 80042e8:	f04f 4780 	mov.w	r7, #1073741824	; 0x40000000
    } while (chVTIsSystemTimeWithinX(start, end));
 80042ec:	f242 760f 	movw	r6, #9999	; 0x270f
      chMtxLock(&mtx1);
 80042f0:	4620      	mov	r0, r4
 80042f2:	f7fe fb4d 	bl	8002990 <chMtxLock>
      chMtxUnlock(&mtx1);
 80042f6:	4620      	mov	r0, r4
 80042f8:	f7ff fd92 	bl	8003e20 <chMtxUnlock>
      chMtxLock(&mtx1);
 80042fc:	4620      	mov	r0, r4
 80042fe:	f7fe fb47 	bl	8002990 <chMtxLock>
      chMtxUnlock(&mtx1);
 8004302:	4620      	mov	r0, r4
 8004304:	f7ff fd8c 	bl	8003e20 <chMtxUnlock>
      chMtxLock(&mtx1);
 8004308:	4620      	mov	r0, r4
 800430a:	f7fe fb41 	bl	8002990 <chMtxLock>
      chMtxUnlock(&mtx1);
 800430e:	4620      	mov	r0, r4
 8004310:	f7ff fd86 	bl	8003e20 <chMtxUnlock>
      chMtxLock(&mtx1);
 8004314:	4620      	mov	r0, r4
 8004316:	f7fe fb3b 	bl	8002990 <chMtxLock>
      chMtxUnlock(&mtx1);
 800431a:	4620      	mov	r0, r4
 800431c:	f7ff fd80 	bl	8003e20 <chMtxUnlock>
 8004320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004322:	eba3 0308 	sub.w	r3, r3, r8
    } while (chVTIsSystemTimeWithinX(start, end));
 8004326:	42b3      	cmp	r3, r6
      n++;
 8004328:	f105 0501 	add.w	r5, r5, #1
    } while (chVTIsSystemTimeWithinX(start, end));
 800432c:	d9e0      	bls.n	80042f0 <rt_test_010_011_execute+0x20>
  test_set_step(2);
 800432e:	2302      	movs	r3, #2
    test_print("--- Score : ");
 8004330:	4807      	ldr	r0, [pc, #28]	; (8004350 <rt_test_010_011_execute+0x80>)
  test_set_step(2);
 8004332:	f8c9 3000 	str.w	r3, [r9]
    test_print("--- Score : ");
 8004336:	f7fc fb63 	bl	8000a00 <test_print>
    test_printn(n * 4);
 800433a:	00a8      	lsls	r0, r5, #2
 800433c:	f7fc faf0 	bl	8000920 <test_printn>
    test_println(" lock+unlock/S");
 8004340:	4804      	ldr	r0, [pc, #16]	; (8004354 <rt_test_010_011_execute+0x84>)
}
 8004342:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    test_println(" lock+unlock/S");
 8004346:	f7fc bb3b 	b.w	80009c0 <test_println>
 800434a:	bf00      	nop
 800434c:	20000ae8 	.word	0x20000ae8
 8004350:	08008bf0 	.word	0x08008bf0
 8004354:	08008c3c 	.word	0x08008c3c
 8004358:	20001254 	.word	0x20001254
 800435c:	00000000 	.word	0x00000000

08004360 <thread8>:
static THD_FUNCTION(thread8, p) {
 8004360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004362:	4607      	mov	r7, r0
  chMtxLock(&m2);
 8004364:	481b      	ldr	r0, [pc, #108]	; (80043d4 <thread8+0x74>)
 8004366:	f7fe fb13 	bl	8002990 <chMtxLock>
  chMtxLock(&m1);
 800436a:	481b      	ldr	r0, [pc, #108]	; (80043d8 <thread8+0x78>)
 800436c:	f7fe fb10 	bl	8002990 <chMtxLock>
 8004370:	2320      	movs	r3, #32
 8004372:	f383 8811 	msr	BASEPRI, r3
  return ch.rlist.current;
 8004376:	4d19      	ldr	r5, [pc, #100]	; (80043dc <thread8+0x7c>)
 *
 * @sclass
 */
static inline mutex_t *chMtxGetNextMutexS(void) {

  return chThdGetSelfX()->mtxlist;
 8004378:	69ab      	ldr	r3, [r5, #24]
 800437a:	6b9e      	ldr	r6, [r3, #56]	; 0x38
  chDbgCheck((cp != NULL) && (timeout != TIME_IMMEDIATE));
  chDbgAssert(currp->mtxlist != NULL, "not owning a mutex");

  /* Getting "current" mutex and releasing it.*/
  mp = chMtxGetNextMutexS();
  chMtxUnlockS(mp);
 800437c:	4630      	mov	r0, r6
 800437e:	f7fc fef7 	bl	8001170 <chMtxUnlockS>

  /* Start waiting on the condition variable, on exit the mutex is taken
     again.*/
  currp->u.wtobjp = cp;
 8004382:	4b17      	ldr	r3, [pc, #92]	; (80043e0 <thread8+0x80>)
 8004384:	69ac      	ldr	r4, [r5, #24]
  thread_t *cp = (thread_t *)tqp;
 8004386:	4618      	mov	r0, r3
 8004388:	6263      	str	r3, [r4, #36]	; 0x24
 800438a:	e003      	b.n	8004394 <thread8+0x34>
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 800438c:	6899      	ldr	r1, [r3, #8]
 800438e:	68a2      	ldr	r2, [r4, #8]
 8004390:	4291      	cmp	r1, r2
 8004392:	d302      	bcc.n	800439a <thread8+0x3a>
    cp = cp->queue.next;
 8004394:	681b      	ldr	r3, [r3, #0]
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 8004396:	4283      	cmp	r3, r0
 8004398:	d1f8      	bne.n	800438c <thread8+0x2c>
  tp->queue.prev             = cp->queue.prev;
 800439a:	685a      	ldr	r2, [r3, #4]
    chSchGoSleepS(newstate);
 800439c:	2007      	movs	r0, #7
 800439e:	e9c4 3200 	strd	r3, r2, [r4]
  tp->queue.prev->queue.next = tp;
 80043a2:	6014      	str	r4, [r2, #0]
  cp->queue.prev             = tp;
 80043a4:	605c      	str	r4, [r3, #4]
 80043a6:	f7fd fceb 	bl	8001d80 <chSchGoSleepS>
  return currp->u.rdymsg;
 80043aa:	69ab      	ldr	r3, [r5, #24]
  queue_prio_insert(currp, &cp->queue);
  msg = chSchGoSleepTimeoutS(CH_STATE_WTCOND, timeout);
  if (msg != MSG_TIMEOUT) {
 80043ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ae:	3301      	adds	r3, #1
 80043b0:	d002      	beq.n	80043b8 <thread8+0x58>
    chMtxLockS(mp);
 80043b2:	4630      	mov	r0, r6
 80043b4:	f7fe fa74 	bl	80028a0 <chMtxLockS>
 80043b8:	2300      	movs	r3, #0
 80043ba:	f383 8811 	msr	BASEPRI, r3
  test_emit_token(*(char *)p);
 80043be:	7838      	ldrb	r0, [r7, #0]
 80043c0:	f7fc fabe 	bl	8000940 <test_emit_token>
  chMtxUnlock(&m1);
 80043c4:	4804      	ldr	r0, [pc, #16]	; (80043d8 <thread8+0x78>)
 80043c6:	f7ff fd2b 	bl	8003e20 <chMtxUnlock>
  chMtxUnlock(&m2);
 80043ca:	4802      	ldr	r0, [pc, #8]	; (80043d4 <thread8+0x74>)
}
 80043cc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  chMtxUnlock(&m2);
 80043d0:	f7ff bd26 	b.w	8003e20 <chMtxUnlock>
 80043d4:	2000083c 	.word	0x2000083c
 80043d8:	2000082c 	.word	0x2000082c
 80043dc:	200008f0 	.word	0x200008f0
 80043e0:	20000800 	.word	0x20000800
	...

080043f0 <thread6>:
static THD_FUNCTION(thread6, p) {
 80043f0:	b570      	push	{r4, r5, r6, lr}
 80043f2:	4606      	mov	r6, r0
  chMtxLock(&m1);
 80043f4:	4816      	ldr	r0, [pc, #88]	; (8004450 <thread6+0x60>)
 80043f6:	f7fe facb 	bl	8002990 <chMtxLock>
 80043fa:	2320      	movs	r3, #32
 80043fc:	f383 8811 	msr	BASEPRI, r3
  thread_t *ctp = currp;
 8004400:	4b14      	ldr	r3, [pc, #80]	; (8004454 <thread6+0x64>)
 8004402:	699c      	ldr	r4, [r3, #24]
 8004404:	6ba5      	ldr	r5, [r4, #56]	; 0x38
  chMtxUnlockS(mp);
 8004406:	4628      	mov	r0, r5
 8004408:	f7fc feb2 	bl	8001170 <chMtxUnlockS>
  ctp->u.wtobjp = cp;
 800440c:	4812      	ldr	r0, [pc, #72]	; (8004458 <thread6+0x68>)
 800440e:	6260      	str	r0, [r4, #36]	; 0x24
  thread_t *cp = (thread_t *)tqp;
 8004410:	4603      	mov	r3, r0
 8004412:	e003      	b.n	800441c <thread6+0x2c>
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 8004414:	6899      	ldr	r1, [r3, #8]
 8004416:	68a2      	ldr	r2, [r4, #8]
 8004418:	4291      	cmp	r1, r2
 800441a:	d302      	bcc.n	8004422 <thread6+0x32>
    cp = cp->queue.next;
 800441c:	681b      	ldr	r3, [r3, #0]
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 800441e:	4283      	cmp	r3, r0
 8004420:	d1f8      	bne.n	8004414 <thread6+0x24>
  tp->queue.prev             = cp->queue.prev;
 8004422:	685a      	ldr	r2, [r3, #4]
  chSchGoSleepS(CH_STATE_WTCOND);
 8004424:	2007      	movs	r0, #7
 8004426:	e9c4 3200 	strd	r3, r2, [r4]
  tp->queue.prev->queue.next = tp;
 800442a:	6014      	str	r4, [r2, #0]
  cp->queue.prev             = tp;
 800442c:	605c      	str	r4, [r3, #4]
 800442e:	f7fd fca7 	bl	8001d80 <chSchGoSleepS>
  chMtxLockS(mp);
 8004432:	4628      	mov	r0, r5
 8004434:	f7fe fa34 	bl	80028a0 <chMtxLockS>
 8004438:	2300      	movs	r3, #0
 800443a:	f383 8811 	msr	BASEPRI, r3
  test_emit_token(*(char *)p);
 800443e:	7830      	ldrb	r0, [r6, #0]
 8004440:	f7fc fa7e 	bl	8000940 <test_emit_token>
  chMtxUnlock(&m1);
 8004444:	4802      	ldr	r0, [pc, #8]	; (8004450 <thread6+0x60>)
}
 8004446:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  chMtxUnlock(&m1);
 800444a:	f7ff bce9 	b.w	8003e20 <chMtxUnlock>
 800444e:	bf00      	nop
 8004450:	2000082c 	.word	0x2000082c
 8004454:	200008f0 	.word	0x200008f0
 8004458:	20000800 	.word	0x20000800
 800445c:	00000000 	.word	0x00000000

08004460 <thread9>:
static THD_FUNCTION(thread9, p) {
 8004460:	b538      	push	{r3, r4, r5, lr}
  chMtxLock(&m2);
 8004462:	4c06      	ldr	r4, [pc, #24]	; (800447c <thread9+0x1c>)
static THD_FUNCTION(thread9, p) {
 8004464:	4605      	mov	r5, r0
  chMtxLock(&m2);
 8004466:	4620      	mov	r0, r4
 8004468:	f7fe fa92 	bl	8002990 <chMtxLock>
  test_emit_token(*(char *)p);
 800446c:	7828      	ldrb	r0, [r5, #0]
 800446e:	f7fc fa67 	bl	8000940 <test_emit_token>
  chMtxUnlock(&m2);
 8004472:	4620      	mov	r0, r4
}
 8004474:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  chMtxUnlock(&m2);
 8004478:	f7ff bcd2 	b.w	8003e20 <chMtxUnlock>
 800447c:	2000083c 	.word	0x2000083c

08004480 <rt_test_006_005_execute>:
static void rt_test_006_005_execute(void) {
 8004480:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004484:	4d4e      	ldr	r5, [pc, #312]	; (80045c0 <rt_test_006_005_execute+0x140>)
  test_set_step(2);
 8004486:	4c4f      	ldr	r4, [pc, #316]	; (80045c4 <rt_test_006_005_execute+0x144>)
  return chThdGetSelfX()->prio;
 8004488:	69aa      	ldr	r2, [r5, #24]
 800448a:	2302      	movs	r3, #2
 800448c:	6896      	ldr	r6, [r2, #8]
 800448e:	6023      	str	r3, [r4, #0]
    b = chMtxTryLock(&m1);
 8004490:	f7fb ffae 	bl	80003f0 <chMtxTryLock.constprop.53>
    test_assert(b, "already locked");
 8004494:	494c      	ldr	r1, [pc, #304]	; (80045c8 <rt_test_006_005_execute+0x148>)
 8004496:	f7fc f9b3 	bl	8000800 <_test_assert>
 800449a:	b108      	cbz	r0, 80044a0 <rt_test_006_005_execute+0x20>
}
 800449c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  test_set_step(3);
 80044a0:	2303      	movs	r3, #3
 80044a2:	6023      	str	r3, [r4, #0]
    b = chMtxTryLock(&m1);
 80044a4:	f7fb ffa4 	bl	80003f0 <chMtxTryLock.constprop.53>
    test_assert(!b, "not locked");
 80044a8:	f080 0001 	eor.w	r0, r0, #1
 80044ac:	b2c0      	uxtb	r0, r0
 80044ae:	4947      	ldr	r1, [pc, #284]	; (80045cc <rt_test_006_005_execute+0x14c>)
 80044b0:	f7fc f9a6 	bl	8000800 <_test_assert>
 80044b4:	2800      	cmp	r0, #0
 80044b6:	d1f1      	bne.n	800449c <rt_test_006_005_execute+0x1c>
    chMtxUnlock(&m1);
 80044b8:	4f45      	ldr	r7, [pc, #276]	; (80045d0 <rt_test_006_005_execute+0x150>)
  test_set_step(4);
 80044ba:	2304      	movs	r3, #4
    chMtxUnlock(&m1);
 80044bc:	4638      	mov	r0, r7
  test_set_step(4);
 80044be:	6023      	str	r3, [r4, #0]
    chMtxUnlock(&m1);
 80044c0:	f7ff fcae 	bl	8003e20 <chMtxUnlock>
    test_assert(m1.owner == NULL, "still owned");
 80044c4:	68b8      	ldr	r0, [r7, #8]
 80044c6:	4943      	ldr	r1, [pc, #268]	; (80045d4 <rt_test_006_005_execute+0x154>)
 80044c8:	fab0 f080 	clz	r0, r0
 80044cc:	0940      	lsrs	r0, r0, #5
 80044ce:	f7fc f997 	bl	8000800 <_test_assert>
 80044d2:	2800      	cmp	r0, #0
 80044d4:	d1e2      	bne.n	800449c <rt_test_006_005_execute+0x1c>
  return (bool)(tqp->next == (const thread_t *)tqp);
 80044d6:	6838      	ldr	r0, [r7, #0]
    test_assert(queue_isempty(&m1.queue), "queue not empty");
 80044d8:	493f      	ldr	r1, [pc, #252]	; (80045d8 <rt_test_006_005_execute+0x158>)
 80044da:	1bc0      	subs	r0, r0, r7
 80044dc:	fab0 f080 	clz	r0, r0
 80044e0:	0940      	lsrs	r0, r0, #5
 80044e2:	f7fc f98d 	bl	8000800 <_test_assert>
 80044e6:	2800      	cmp	r0, #0
 80044e8:	d1d8      	bne.n	800449c <rt_test_006_005_execute+0x1c>
 80044ea:	69ab      	ldr	r3, [r5, #24]
    test_assert(chThdGetPriorityX() == prio, "wrong priority level");
 80044ec:	493b      	ldr	r1, [pc, #236]	; (80045dc <rt_test_006_005_execute+0x15c>)
 80044ee:	6898      	ldr	r0, [r3, #8]
 80044f0:	1b80      	subs	r0, r0, r6
 80044f2:	fab0 f080 	clz	r0, r0
  test_set_step(5);
 80044f6:	2305      	movs	r3, #5
    test_assert(chThdGetPriorityX() == prio, "wrong priority level");
 80044f8:	0940      	lsrs	r0, r0, #5
  test_set_step(5);
 80044fa:	6023      	str	r3, [r4, #0]
    test_assert(chThdGetPriorityX() == prio, "wrong priority level");
 80044fc:	f7fc f980 	bl	8000800 <_test_assert>
 8004500:	2800      	cmp	r0, #0
 8004502:	d1cb      	bne.n	800449c <rt_test_006_005_execute+0x1c>
  test_set_step(6);
 8004504:	2306      	movs	r3, #6
 8004506:	6023      	str	r3, [r4, #0]
    b = chMtxTryLock(&m1);
 8004508:	f7fb ff72 	bl	80003f0 <chMtxTryLock.constprop.53>
    test_assert(b, "already locked");
 800450c:	492e      	ldr	r1, [pc, #184]	; (80045c8 <rt_test_006_005_execute+0x148>)
 800450e:	f7fc f977 	bl	8000800 <_test_assert>
 8004512:	2800      	cmp	r0, #0
 8004514:	d1c2      	bne.n	800449c <rt_test_006_005_execute+0x1c>
    b = chMtxTryLock(&m1);
 8004516:	f7fb ff6b 	bl	80003f0 <chMtxTryLock.constprop.53>
    test_assert(!b, "not locked");
 800451a:	f080 0001 	eor.w	r0, r0, #1
 800451e:	b2c0      	uxtb	r0, r0
 8004520:	492a      	ldr	r1, [pc, #168]	; (80045cc <rt_test_006_005_execute+0x14c>)
 8004522:	f7fc f96d 	bl	8000800 <_test_assert>
 8004526:	2800      	cmp	r0, #0
 8004528:	d1b8      	bne.n	800449c <rt_test_006_005_execute+0x1c>
 *          inheritance mechanism.
 *
 * @api
 */
void chMtxUnlockAll(void) {
  thread_t *ctp = currp;
 800452a:	f8d5 8018 	ldr.w	r8, [r5, #24]
 800452e:	2320      	movs	r3, #32
 8004530:	f383 8811 	msr	BASEPRI, r3

  chSysLock();
  if (ctp->mtxlist != NULL) {
 8004534:	f8d8 3038 	ldr.w	r3, [r8, #56]	; 0x38
 8004538:	b1db      	cbz	r3, 8004572 <rt_test_006_005_execute+0xf2>
      }
      else {
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
        mp->cnt = (cnt_t)0;
#endif
        mp->owner = NULL;
 800453a:	4681      	mov	r9, r0
  return (bool)(tqp->next != (const thread_t *)tqp);
 800453c:	681a      	ldr	r2, [r3, #0]
      ctp->mtxlist = mp->next;
 800453e:	68d9      	ldr	r1, [r3, #12]
 8004540:	f8c8 1038 	str.w	r1, [r8, #56]	; 0x38
      if (chMtxQueueNotEmptyS(mp)) {
 8004544:	4293      	cmp	r3, r2
        (void) chSchReadyI(tp);
 8004546:	4610      	mov	r0, r2
      if (chMtxQueueNotEmptyS(mp)) {
 8004548:	d035      	beq.n	80045b6 <rt_test_006_005_execute+0x136>
        mp->next = tp->mtxlist;
 800454a:	f8d2 c038 	ldr.w	ip, [r2, #56]	; 0x38
  tqp->next             = tp->queue.next;
 800454e:	6811      	ldr	r1, [r2, #0]
 8004550:	6019      	str	r1, [r3, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 8004552:	604b      	str	r3, [r1, #4]
 8004554:	e9c3 2c02 	strd	r2, ip, [r3, #8]
        tp->mtxlist = mp;
 8004558:	6393      	str	r3, [r2, #56]	; 0x38
        (void) chSchReadyI(tp);
 800455a:	f7fc fd09 	bl	8000f70 <chSchReadyI>
 800455e:	f8d8 3038 	ldr.w	r3, [r8, #56]	; 0x38
      }
    } while (ctp->mtxlist != NULL);
 8004562:	2b00      	cmp	r3, #0
 8004564:	d1ea      	bne.n	800453c <rt_test_006_005_execute+0xbc>
    ctp->prio = ctp->realprio;
 8004566:	f8d8 303c 	ldr.w	r3, [r8, #60]	; 0x3c
 800456a:	f8c8 3008 	str.w	r3, [r8, #8]
    chSchRescheduleS();
 800456e:	f7fe fe27 	bl	80031c0 <chSchRescheduleS>
 8004572:	2300      	movs	r3, #0
 8004574:	f383 8811 	msr	BASEPRI, r3
    test_assert(m1.owner == NULL, "still owned");
 8004578:	68b8      	ldr	r0, [r7, #8]
 800457a:	4916      	ldr	r1, [pc, #88]	; (80045d4 <rt_test_006_005_execute+0x154>)
 800457c:	fab0 f080 	clz	r0, r0
 8004580:	0940      	lsrs	r0, r0, #5
 8004582:	f7fc f93d 	bl	8000800 <_test_assert>
 8004586:	2800      	cmp	r0, #0
 8004588:	d188      	bne.n	800449c <rt_test_006_005_execute+0x1c>
  return (bool)(tqp->next == (const thread_t *)tqp);
 800458a:	6838      	ldr	r0, [r7, #0]
    test_assert(queue_isempty(&m1.queue), "queue not empty");
 800458c:	4912      	ldr	r1, [pc, #72]	; (80045d8 <rt_test_006_005_execute+0x158>)
 800458e:	1bc7      	subs	r7, r0, r7
 8004590:	4278      	negs	r0, r7
 8004592:	4178      	adcs	r0, r7
 8004594:	f7fc f934 	bl	8000800 <_test_assert>
 8004598:	2800      	cmp	r0, #0
 800459a:	f47f af7f 	bne.w	800449c <rt_test_006_005_execute+0x1c>
 800459e:	69ab      	ldr	r3, [r5, #24]
    test_assert(chThdGetPriorityX() == prio, "wrong priority level");
 80045a0:	490e      	ldr	r1, [pc, #56]	; (80045dc <rt_test_006_005_execute+0x15c>)
 80045a2:	6898      	ldr	r0, [r3, #8]
 80045a4:	1b82      	subs	r2, r0, r6
  test_set_step(7);
 80045a6:	2307      	movs	r3, #7
    test_assert(chThdGetPriorityX() == prio, "wrong priority level");
 80045a8:	4250      	negs	r0, r2
  test_set_step(7);
 80045aa:	6023      	str	r3, [r4, #0]
    test_assert(chThdGetPriorityX() == prio, "wrong priority level");
 80045ac:	4150      	adcs	r0, r2
}
 80045ae:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    test_assert(chThdGetPriorityX() == prio, "wrong priority level");
 80045b2:	f7fc b925 	b.w	8000800 <_test_assert>
        mp->owner = NULL;
 80045b6:	f8c3 9008 	str.w	r9, [r3, #8]
 80045ba:	460b      	mov	r3, r1
 80045bc:	e7d1      	b.n	8004562 <rt_test_006_005_execute+0xe2>
 80045be:	bf00      	nop
 80045c0:	200008f0 	.word	0x200008f0
 80045c4:	20001254 	.word	0x20001254
 80045c8:	0800888c 	.word	0x0800888c
 80045cc:	0800889c 	.word	0x0800889c
 80045d0:	2000082c 	.word	0x2000082c
 80045d4:	080088a8 	.word	0x080088a8
 80045d8:	080087e0 	.word	0x080087e0
 80045dc:	080088b4 	.word	0x080088b4

080045e0 <rt_test_006_004_execute>:
static void rt_test_006_004_execute(void) {
 80045e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  return ch.rlist.current;
 80045e4:	4d40      	ldr	r5, [pc, #256]	; (80046e8 <rt_test_006_004_execute+0x108>)
  test_set_step(2);
 80045e6:	4e41      	ldr	r6, [pc, #260]	; (80046ec <rt_test_006_004_execute+0x10c>)
  return chThdGetSelfX()->prio;
 80045e8:	69aa      	ldr	r2, [r5, #24]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, pa, thread4A, "A");
 80045ea:	4b41      	ldr	r3, [pc, #260]	; (80046f0 <rt_test_006_004_execute+0x110>)
 80045ec:	6894      	ldr	r4, [r2, #8]
 80045ee:	4841      	ldr	r0, [pc, #260]	; (80046f4 <rt_test_006_004_execute+0x114>)
 80045f0:	4a41      	ldr	r2, [pc, #260]	; (80046f8 <rt_test_006_004_execute+0x118>)
 80045f2:	4f42      	ldr	r7, [pc, #264]	; (80046fc <rt_test_006_004_execute+0x11c>)
    pa = p + 1;
 80045f4:	f104 0801 	add.w	r8, r4, #1
  test_set_step(2);
 80045f8:	f04f 0c02 	mov.w	ip, #2
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, pa, thread4A, "A");
 80045fc:	4641      	mov	r1, r8
  test_set_step(2);
 80045fe:	f8c6 c000 	str.w	ip, [r6]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, pa, thread4A, "A");
 8004602:	f7fd fb0d 	bl	8001c20 <chThdCreateStatic.constprop.62>
    pb = p + 2;
 8004606:	f104 0902 	add.w	r9, r4, #2
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, pb, thread4B, "B");
 800460a:	4649      	mov	r1, r9
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, pa, thread4A, "A");
 800460c:	6038      	str	r0, [r7, #0]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, pb, thread4B, "B");
 800460e:	4b3c      	ldr	r3, [pc, #240]	; (8004700 <rt_test_006_004_execute+0x120>)
 8004610:	4a3c      	ldr	r2, [pc, #240]	; (8004704 <rt_test_006_004_execute+0x124>)
 8004612:	483d      	ldr	r0, [pc, #244]	; (8004708 <rt_test_006_004_execute+0x128>)
 8004614:	f7fd fb04 	bl	8001c20 <chThdCreateStatic.constprop.62>
  test_set_step(3);
 8004618:	2303      	movs	r3, #3
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, pb, thread4B, "B");
 800461a:	6078      	str	r0, [r7, #4]
    chMtxLock(&m1);
 800461c:	483b      	ldr	r0, [pc, #236]	; (800470c <rt_test_006_004_execute+0x12c>)
  test_set_step(3);
 800461e:	6033      	str	r3, [r6, #0]
    chMtxLock(&m1);
 8004620:	f7fe f9b6 	bl	8002990 <chMtxLock>
 8004624:	69ab      	ldr	r3, [r5, #24]
    test_assert(chThdGetPriorityX() == p, "wrong priority level");
 8004626:	493a      	ldr	r1, [pc, #232]	; (8004710 <rt_test_006_004_execute+0x130>)
 8004628:	6898      	ldr	r0, [r3, #8]
 800462a:	1b00      	subs	r0, r0, r4
 800462c:	fab0 f080 	clz	r0, r0
 8004630:	0940      	lsrs	r0, r0, #5
 8004632:	f7fc f8e5 	bl	8000800 <_test_assert>
 8004636:	b108      	cbz	r0, 800463c <rt_test_006_004_execute+0x5c>
}
 8004638:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  test_set_step(4);
 800463c:	2304      	movs	r3, #4
    chThdSleepMilliseconds(100);
 800463e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
  test_set_step(4);
 8004642:	6033      	str	r3, [r6, #0]
    chThdSleepMilliseconds(100);
 8004644:	f7fd fe0c 	bl	8002260 <chThdSleep>
 8004648:	69ab      	ldr	r3, [r5, #24]
    test_assert(chThdGetPriorityX() == pa, "wrong priority level");
 800464a:	4931      	ldr	r1, [pc, #196]	; (8004710 <rt_test_006_004_execute+0x130>)
 800464c:	6898      	ldr	r0, [r3, #8]
 800464e:	eba0 0008 	sub.w	r0, r0, r8
 8004652:	fab0 f080 	clz	r0, r0
 8004656:	0940      	lsrs	r0, r0, #5
 8004658:	f7fc f8d2 	bl	8000800 <_test_assert>
 800465c:	2800      	cmp	r0, #0
 800465e:	d1eb      	bne.n	8004638 <rt_test_006_004_execute+0x58>
  test_set_step(5);
 8004660:	2305      	movs	r3, #5
    chMtxLock(&m2);
 8004662:	482c      	ldr	r0, [pc, #176]	; (8004714 <rt_test_006_004_execute+0x134>)
  test_set_step(5);
 8004664:	6033      	str	r3, [r6, #0]
    chMtxLock(&m2);
 8004666:	f7fe f993 	bl	8002990 <chMtxLock>
 800466a:	69ab      	ldr	r3, [r5, #24]
    test_assert(chThdGetPriorityX() == pa, "wrong priority level");
 800466c:	4928      	ldr	r1, [pc, #160]	; (8004710 <rt_test_006_004_execute+0x130>)
 800466e:	6898      	ldr	r0, [r3, #8]
 8004670:	eba0 0008 	sub.w	r0, r0, r8
 8004674:	fab0 f080 	clz	r0, r0
 8004678:	0940      	lsrs	r0, r0, #5
 800467a:	f7fc f8c1 	bl	8000800 <_test_assert>
 800467e:	2800      	cmp	r0, #0
 8004680:	d1da      	bne.n	8004638 <rt_test_006_004_execute+0x58>
  test_set_step(6);
 8004682:	2306      	movs	r3, #6
    chThdSleepMilliseconds(100);
 8004684:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
  test_set_step(6);
 8004688:	6033      	str	r3, [r6, #0]
    chThdSleepMilliseconds(100);
 800468a:	f7fd fde9 	bl	8002260 <chThdSleep>
 800468e:	69ab      	ldr	r3, [r5, #24]
    test_assert(chThdGetPriorityX() == pb, "wrong priority level");
 8004690:	491f      	ldr	r1, [pc, #124]	; (8004710 <rt_test_006_004_execute+0x130>)
 8004692:	6898      	ldr	r0, [r3, #8]
 8004694:	eba0 0009 	sub.w	r0, r0, r9
 8004698:	fab0 f080 	clz	r0, r0
 800469c:	0940      	lsrs	r0, r0, #5
 800469e:	f7fc f8af 	bl	8000800 <_test_assert>
 80046a2:	2800      	cmp	r0, #0
 80046a4:	d1c8      	bne.n	8004638 <rt_test_006_004_execute+0x58>
  test_set_step(7);
 80046a6:	2307      	movs	r3, #7
    chMtxUnlock(&m2);
 80046a8:	481a      	ldr	r0, [pc, #104]	; (8004714 <rt_test_006_004_execute+0x134>)
  test_set_step(7);
 80046aa:	6033      	str	r3, [r6, #0]
    chMtxUnlock(&m2);
 80046ac:	f7ff fbb8 	bl	8003e20 <chMtxUnlock>
 80046b0:	69ab      	ldr	r3, [r5, #24]
    test_assert(chThdGetPriorityX() == pa, "wrong priority level");
 80046b2:	4917      	ldr	r1, [pc, #92]	; (8004710 <rt_test_006_004_execute+0x130>)
 80046b4:	6898      	ldr	r0, [r3, #8]
 80046b6:	eba0 0008 	sub.w	r0, r0, r8
 80046ba:	fab0 f080 	clz	r0, r0
 80046be:	0940      	lsrs	r0, r0, #5
 80046c0:	f7fc f89e 	bl	8000800 <_test_assert>
 80046c4:	2800      	cmp	r0, #0
 80046c6:	d1b7      	bne.n	8004638 <rt_test_006_004_execute+0x58>
  test_set_step(8);
 80046c8:	2308      	movs	r3, #8
    chMtxUnlock(&m1);
 80046ca:	4810      	ldr	r0, [pc, #64]	; (800470c <rt_test_006_004_execute+0x12c>)
  test_set_step(8);
 80046cc:	6033      	str	r3, [r6, #0]
    chMtxUnlock(&m1);
 80046ce:	f7ff fba7 	bl	8003e20 <chMtxUnlock>
 80046d2:	69ab      	ldr	r3, [r5, #24]
    test_assert(chThdGetPriorityX() == p, "wrong priority level");
 80046d4:	490e      	ldr	r1, [pc, #56]	; (8004710 <rt_test_006_004_execute+0x130>)
 80046d6:	6898      	ldr	r0, [r3, #8]
 80046d8:	1b00      	subs	r0, r0, r4
 80046da:	fab0 f080 	clz	r0, r0
 80046de:	0940      	lsrs	r0, r0, #5
}
 80046e0:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    test_assert(chThdGetPriorityX() == p, "wrong priority level");
 80046e4:	f7fc b88c 	b.w	8000800 <_test_assert>
 80046e8:	200008f0 	.word	0x200008f0
 80046ec:	20001254 	.word	0x20001254
 80046f0:	08008874 	.word	0x08008874
 80046f4:	20000b40 	.word	0x20000b40
 80046f8:	08004721 	.word	0x08004721
 80046fc:	2000126c 	.word	0x2000126c
 8004700:	08008878 	.word	0x08008878
 8004704:	08003d51 	.word	0x08003d51
 8004708:	20000c88 	.word	0x20000c88
 800470c:	2000082c 	.word	0x2000082c
 8004710:	080088b4 	.word	0x080088b4
 8004714:	2000083c 	.word	0x2000083c
	...

08004720 <thread4A>:
static THD_FUNCTION(thread4A, p) {
 8004720:	b510      	push	{r4, lr}
  chMtxLock(&m1);
 8004722:	4c06      	ldr	r4, [pc, #24]	; (800473c <thread4A+0x1c>)
  chThdSleepMilliseconds(50);
 8004724:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004728:	f7fd fd9a 	bl	8002260 <chThdSleep>
  chMtxLock(&m1);
 800472c:	4620      	mov	r0, r4
 800472e:	f7fe f92f 	bl	8002990 <chMtxLock>
  chMtxUnlock(&m1);
 8004732:	4620      	mov	r0, r4
}
 8004734:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  chMtxUnlock(&m1);
 8004738:	f7ff bb72 	b.w	8003e20 <chMtxUnlock>
 800473c:	2000082c 	.word	0x2000082c

08004740 <thread1.lto_priv.85>:
static THD_FUNCTION(thread1, p) {
 8004740:	b538      	push	{r3, r4, r5, lr}
  chMtxLock(&m1);
 8004742:	4c06      	ldr	r4, [pc, #24]	; (800475c <thread1.lto_priv.85+0x1c>)
static THD_FUNCTION(thread1, p) {
 8004744:	4605      	mov	r5, r0
  chMtxLock(&m1);
 8004746:	4620      	mov	r0, r4
 8004748:	f7fe f922 	bl	8002990 <chMtxLock>
  test_emit_token(*(char *)p);
 800474c:	7828      	ldrb	r0, [r5, #0]
 800474e:	f7fc f8f7 	bl	8000940 <test_emit_token>
  chMtxUnlock(&m1);
 8004752:	4620      	mov	r0, r4
}
 8004754:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  chMtxUnlock(&m1);
 8004758:	f7ff bb62 	b.w	8003e20 <chMtxUnlock>
 800475c:	2000082c 	.word	0x2000082c

08004760 <chFactoryReleaseSemaphore>:
void chFactoryReleaseSemaphore(dyn_semaphore_t *dsp) {
 8004760:	b538      	push	{r3, r4, r5, lr}
  F_LOCK();
 8004762:	4d17      	ldr	r5, [pc, #92]	; (80047c0 <chFactoryReleaseSemaphore+0x60>)
void chFactoryReleaseSemaphore(dyn_semaphore_t *dsp) {
 8004764:	4604      	mov	r4, r0
  F_LOCK();
 8004766:	4628      	mov	r0, r5
 8004768:	f7fe f912 	bl	8002990 <chMtxLock>
  dep->refs--;
 800476c:	6863      	ldr	r3, [r4, #4]
 800476e:	3b01      	subs	r3, #1
 8004770:	6063      	str	r3, [r4, #4]
  if (dep->refs == (ucnt_t)0) {
 8004772:	b123      	cbz	r3, 800477e <chFactoryReleaseSemaphore+0x1e>
  F_UNLOCK();
 8004774:	4812      	ldr	r0, [pc, #72]	; (80047c0 <chFactoryReleaseSemaphore+0x60>)
}
 8004776:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  F_UNLOCK();
 800477a:	f7ff bb51 	b.w	8003e20 <chMtxUnlock>
  dyn_element_t *prev = (dyn_element_t *)dlp;
 800477e:	f105 0128 	add.w	r1, r5, #40	; 0x28
 8004782:	460a      	mov	r2, r1
 8004784:	e002      	b.n	800478c <chFactoryReleaseSemaphore+0x2c>
    if (prev->next == element) {
 8004786:	429c      	cmp	r4, r3
 8004788:	d00a      	beq.n	80047a0 <chFactoryReleaseSemaphore+0x40>
 800478a:	461a      	mov	r2, r3
  while (prev->next != (dyn_element_t *)dlp) {
 800478c:	6813      	ldr	r3, [r2, #0]
 800478e:	428b      	cmp	r3, r1
 8004790:	d1f9      	bne.n	8004786 <chFactoryReleaseSemaphore+0x26>
 8004792:	2320      	movs	r3, #32
 8004794:	f383 8811 	msr	BASEPRI, r3
  php->next = mp->next;
 8004798:	2300      	movs	r3, #0
 800479a:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 800479c:	601a      	str	r2, [r3, #0]
 800479e:	deff      	udf	#255	; 0xff
      prev->next = element->next;
 80047a0:	6823      	ldr	r3, [r4, #0]
 80047a2:	6013      	str	r3, [r2, #0]
 80047a4:	2320      	movs	r3, #32
 80047a6:	f383 8811 	msr	BASEPRI, r3
 80047aa:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80047ac:	6023      	str	r3, [r4, #0]
 80047ae:	2300      	movs	r3, #0
  mp->next = php;
 80047b0:	62ec      	str	r4, [r5, #44]	; 0x2c
 80047b2:	f383 8811 	msr	BASEPRI, r3
  F_UNLOCK();
 80047b6:	4802      	ldr	r0, [pc, #8]	; (80047c0 <chFactoryReleaseSemaphore+0x60>)
}
 80047b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  F_UNLOCK();
 80047bc:	f7ff bb30 	b.w	8003e20 <chMtxUnlock>
 80047c0:	20000968 	.word	0x20000968
	...

080047d0 <oslib_test_004_003_execute>:
      chFactoryReleaseSemaphore(dsp);
    }
  }
}

static void oslib_test_004_003_execute(void) {
 80047d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  dyn_semaphore_t *dsp;

  /* [4.3.1] Retrieving a dynamic semaphore by name, must not exist.*/
  test_set_step(1);
 80047d2:	4c42      	ldr	r4, [pc, #264]	; (80048dc <oslib_test_004_003_execute+0x10c>)
 80047d4:	2501      	movs	r5, #1
 80047d6:	6025      	str	r5, [r4, #0]
  {
    dsp = chFactoryFindSemaphore("mysem");
 80047d8:	f7ff fcb2 	bl	8004140 <chFactoryFindSemaphore.constprop.7>
    test_assert(dsp == NULL, "found");
 80047dc:	fab0 f080 	clz	r0, r0
 80047e0:	0940      	lsrs	r0, r0, #5
 80047e2:	493f      	ldr	r1, [pc, #252]	; (80048e0 <oslib_test_004_003_execute+0x110>)
 80047e4:	f7fc f80c 	bl	8000800 <_test_assert>
 80047e8:	b100      	cbz	r0, 80047ec <oslib_test_004_003_execute+0x1c>
  test_set_step(6);
  {
    dsp = chFactoryFindSemaphore("mysem");
    test_assert(dsp == NULL, "found");
  }
}
 80047ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  test_set_step(2);
 80047ec:	2302      	movs	r3, #2
 80047ee:	6023      	str	r3, [r4, #0]
    dsp = chFactoryCreateSemaphore("mysem", 0);
 80047f0:	f7ff fc86 	bl	8004100 <chFactoryCreateSemaphore.constprop.8>
    test_assert(dsp != NULL, "cannot create");
 80047f4:	4606      	mov	r6, r0
 80047f6:	3000      	adds	r0, #0
 80047f8:	bf18      	it	ne
 80047fa:	2001      	movne	r0, #1
 80047fc:	4939      	ldr	r1, [pc, #228]	; (80048e4 <oslib_test_004_003_execute+0x114>)
 80047fe:	f7fb ffff 	bl	8000800 <_test_assert>
 8004802:	2800      	cmp	r0, #0
 8004804:	d1f1      	bne.n	80047ea <oslib_test_004_003_execute+0x1a>
  test_set_step(3);
 8004806:	2303      	movs	r3, #3
 8004808:	6023      	str	r3, [r4, #0]
    dsp1 = chFactoryCreateSemaphore("mysem", 0);
 800480a:	f7ff fc79 	bl	8004100 <chFactoryCreateSemaphore.constprop.8>
    test_assert(dsp1 == NULL, "can create");
 800480e:	fab0 f080 	clz	r0, r0
 8004812:	0940      	lsrs	r0, r0, #5
 8004814:	4934      	ldr	r1, [pc, #208]	; (80048e8 <oslib_test_004_003_execute+0x118>)
 8004816:	f7fb fff3 	bl	8000800 <_test_assert>
 800481a:	2800      	cmp	r0, #0
 800481c:	d1e5      	bne.n	80047ea <oslib_test_004_003_execute+0x1a>
  test_set_step(4);
 800481e:	2304      	movs	r3, #4
 8004820:	6023      	str	r3, [r4, #0]
    dsp1 = chFactoryFindSemaphore("mysem");
 8004822:	f7ff fc8d 	bl	8004140 <chFactoryFindSemaphore.constprop.7>
    test_assert(dsp1 != NULL, "not found");
 8004826:	4607      	mov	r7, r0
 8004828:	3000      	adds	r0, #0
 800482a:	bf18      	it	ne
 800482c:	2001      	movne	r0, #1
 800482e:	492f      	ldr	r1, [pc, #188]	; (80048ec <oslib_test_004_003_execute+0x11c>)
 8004830:	f7fb ffe6 	bl	8000800 <_test_assert>
 8004834:	2800      	cmp	r0, #0
 8004836:	d1d8      	bne.n	80047ea <oslib_test_004_003_execute+0x1a>
    test_assert(dsp == dsp1, "object reference mismatch");
 8004838:	1bf0      	subs	r0, r6, r7
 800483a:	fab0 f080 	clz	r0, r0
 800483e:	492c      	ldr	r1, [pc, #176]	; (80048f0 <oslib_test_004_003_execute+0x120>)
 8004840:	0940      	lsrs	r0, r0, #5
 8004842:	f7fb ffdd 	bl	8000800 <_test_assert>
 8004846:	2800      	cmp	r0, #0
 8004848:	d1cf      	bne.n	80047ea <oslib_test_004_003_execute+0x1a>
    test_assert(dsp1->element.refs == 2, "object reference mismatch");
 800484a:	6878      	ldr	r0, [r7, #4]
 800484c:	4928      	ldr	r1, [pc, #160]	; (80048f0 <oslib_test_004_003_execute+0x120>)
 800484e:	f1a0 0002 	sub.w	r0, r0, #2
 8004852:	fab0 f080 	clz	r0, r0
 8004856:	0940      	lsrs	r0, r0, #5
 8004858:	f7fb ffd2 	bl	8000800 <_test_assert>
 800485c:	2800      	cmp	r0, #0
 800485e:	d1c4      	bne.n	80047ea <oslib_test_004_003_execute+0x1a>
 *
 * @api
 */
static inline dyn_element_t *chFactoryDuplicateReference(dyn_element_t *dep) {

  dep->refs++;
 8004860:	687b      	ldr	r3, [r7, #4]
    test_assert(dsp1 == dsp2, "object reference mismatch");
 8004862:	4923      	ldr	r1, [pc, #140]	; (80048f0 <oslib_test_004_003_execute+0x120>)
 8004864:	442b      	add	r3, r5
 8004866:	4628      	mov	r0, r5
 8004868:	607b      	str	r3, [r7, #4]
 800486a:	f7fb ffc9 	bl	8000800 <_test_assert>
 800486e:	2800      	cmp	r0, #0
 8004870:	d1bb      	bne.n	80047ea <oslib_test_004_003_execute+0x1a>
    test_assert(dsp2->element.refs == 3, "object reference mismatch");
 8004872:	6878      	ldr	r0, [r7, #4]
 8004874:	491e      	ldr	r1, [pc, #120]	; (80048f0 <oslib_test_004_003_execute+0x120>)
 8004876:	f1a0 0c03 	sub.w	ip, r0, #3
 800487a:	f1dc 0000 	rsbs	r0, ip, #0
 800487e:	eb40 000c 	adc.w	r0, r0, ip
 8004882:	f7fb ffbd 	bl	8000800 <_test_assert>
 8004886:	2800      	cmp	r0, #0
 8004888:	d1af      	bne.n	80047ea <oslib_test_004_003_execute+0x1a>
    chFactoryReleaseSemaphore(dsp2);
 800488a:	4638      	mov	r0, r7
 800488c:	f7ff ff68 	bl	8004760 <chFactoryReleaseSemaphore>
    test_assert(dsp1->element.refs == 2, "references mismatch");
 8004890:	6878      	ldr	r0, [r7, #4]
 8004892:	4918      	ldr	r1, [pc, #96]	; (80048f4 <oslib_test_004_003_execute+0x124>)
 8004894:	1e82      	subs	r2, r0, #2
 8004896:	4250      	negs	r0, r2
 8004898:	4150      	adcs	r0, r2
 800489a:	f7fb ffb1 	bl	8000800 <_test_assert>
 800489e:	2800      	cmp	r0, #0
 80048a0:	d1a3      	bne.n	80047ea <oslib_test_004_003_execute+0x1a>
    chFactoryReleaseSemaphore(dsp1);
 80048a2:	4638      	mov	r0, r7
 80048a4:	f7ff ff5c 	bl	8004760 <chFactoryReleaseSemaphore>
    test_assert(dsp->element.refs == 1, "references mismatch");
 80048a8:	6870      	ldr	r0, [r6, #4]
 80048aa:	4912      	ldr	r1, [pc, #72]	; (80048f4 <oslib_test_004_003_execute+0x124>)
 80048ac:	1b43      	subs	r3, r0, r5
 80048ae:	4258      	negs	r0, r3
 80048b0:	4158      	adcs	r0, r3
 80048b2:	f7fb ffa5 	bl	8000800 <_test_assert>
 80048b6:	2800      	cmp	r0, #0
 80048b8:	d197      	bne.n	80047ea <oslib_test_004_003_execute+0x1a>
    chFactoryReleaseSemaphore(dsp);
 80048ba:	4630      	mov	r0, r6
  test_set_step(5);
 80048bc:	2305      	movs	r3, #5
 80048be:	6023      	str	r3, [r4, #0]
    chFactoryReleaseSemaphore(dsp);
 80048c0:	f7ff ff4e 	bl	8004760 <chFactoryReleaseSemaphore>
  test_set_step(6);
 80048c4:	2306      	movs	r3, #6
 80048c6:	6023      	str	r3, [r4, #0]
    dsp = chFactoryFindSemaphore("mysem");
 80048c8:	f7ff fc3a 	bl	8004140 <chFactoryFindSemaphore.constprop.7>
    test_assert(dsp == NULL, "found");
 80048cc:	fab0 f080 	clz	r0, r0
 80048d0:	0940      	lsrs	r0, r0, #5
 80048d2:	4903      	ldr	r1, [pc, #12]	; (80048e0 <oslib_test_004_003_execute+0x110>)
}
 80048d4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    test_assert(dsp == NULL, "found");
 80048d8:	f7fb bf92 	b.w	8000800 <_test_assert>
 80048dc:	20001254 	.word	0x20001254
 80048e0:	080079d0 	.word	0x080079d0
 80048e4:	080079b0 	.word	0x080079b0
 80048e8:	080079c0 	.word	0x080079c0
 80048ec:	080079cc 	.word	0x080079cc
 80048f0:	080079d8 	.word	0x080079d8
 80048f4:	080079f4 	.word	0x080079f4
	...

08004900 <oslib_test_004_003_teardown>:
static void oslib_test_004_003_teardown(void) {
 8004900:	b510      	push	{r4, lr}
  dsp = chFactoryFindSemaphore("mysem");
 8004902:	f7ff fc1d 	bl	8004140 <chFactoryFindSemaphore.constprop.7>
  if (dsp != NULL) {
 8004906:	b140      	cbz	r0, 800491a <oslib_test_004_003_teardown+0x1a>
    while (dsp->element.refs > 0U) {
 8004908:	6843      	ldr	r3, [r0, #4]
 800490a:	4604      	mov	r4, r0
 800490c:	b12b      	cbz	r3, 800491a <oslib_test_004_003_teardown+0x1a>
      chFactoryReleaseSemaphore(dsp);
 800490e:	4620      	mov	r0, r4
 8004910:	f7ff ff26 	bl	8004760 <chFactoryReleaseSemaphore>
    while (dsp->element.refs > 0U) {
 8004914:	6863      	ldr	r3, [r4, #4]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d1f9      	bne.n	800490e <oslib_test_004_003_teardown+0xe>
}
 800491a:	bd10      	pop	{r4, pc}
 800491c:	0000      	movs	r0, r0
	...

08004920 <chFactoryReleaseObject>:
void chFactoryReleaseObject(registered_object_t *rop){
 8004920:	b538      	push	{r3, r4, r5, lr}
  F_LOCK();
 8004922:	4d17      	ldr	r5, [pc, #92]	; (8004980 <chFactoryReleaseObject+0x60>)
void chFactoryReleaseObject(registered_object_t *rop){
 8004924:	4604      	mov	r4, r0
  F_LOCK();
 8004926:	4628      	mov	r0, r5
 8004928:	f7fe f832 	bl	8002990 <chMtxLock>
  dep->refs--;
 800492c:	6863      	ldr	r3, [r4, #4]
 800492e:	3b01      	subs	r3, #1
 8004930:	6063      	str	r3, [r4, #4]
  if (dep->refs == (ucnt_t)0) {
 8004932:	b123      	cbz	r3, 800493e <chFactoryReleaseObject+0x1e>
  F_UNLOCK();
 8004934:	4812      	ldr	r0, [pc, #72]	; (8004980 <chFactoryReleaseObject+0x60>)
}
 8004936:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  F_UNLOCK();
 800493a:	f7ff ba71 	b.w	8003e20 <chMtxUnlock>
  dyn_element_t *prev = (dyn_element_t *)dlp;
 800493e:	f105 0110 	add.w	r1, r5, #16
 8004942:	460a      	mov	r2, r1
 8004944:	e002      	b.n	800494c <chFactoryReleaseObject+0x2c>
    if (prev->next == element) {
 8004946:	429c      	cmp	r4, r3
 8004948:	d00a      	beq.n	8004960 <chFactoryReleaseObject+0x40>
 800494a:	461a      	mov	r2, r3
  while (prev->next != (dyn_element_t *)dlp) {
 800494c:	6813      	ldr	r3, [r2, #0]
 800494e:	428b      	cmp	r3, r1
 8004950:	d1f9      	bne.n	8004946 <chFactoryReleaseObject+0x26>
 8004952:	2320      	movs	r3, #32
 8004954:	f383 8811 	msr	BASEPRI, r3
  php->next = mp->next;
 8004958:	2300      	movs	r3, #0
 800495a:	696a      	ldr	r2, [r5, #20]
 800495c:	601a      	str	r2, [r3, #0]
 800495e:	deff      	udf	#255	; 0xff
      prev->next = element->next;
 8004960:	6823      	ldr	r3, [r4, #0]
 8004962:	6013      	str	r3, [r2, #0]
 8004964:	2320      	movs	r3, #32
 8004966:	f383 8811 	msr	BASEPRI, r3
 800496a:	696b      	ldr	r3, [r5, #20]
 800496c:	6023      	str	r3, [r4, #0]
 800496e:	2300      	movs	r3, #0
  mp->next = php;
 8004970:	616c      	str	r4, [r5, #20]
 8004972:	f383 8811 	msr	BASEPRI, r3
  F_UNLOCK();
 8004976:	4802      	ldr	r0, [pc, #8]	; (8004980 <chFactoryReleaseObject+0x60>)
}
 8004978:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  F_UNLOCK();
 800497c:	f7ff ba50 	b.w	8003e20 <chMtxUnlock>
 8004980:	20000968 	.word	0x20000968
	...

08004990 <oslib_test_004_001_execute>:
static void oslib_test_004_001_execute(void) {
 8004990:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  test_set_step(1);
 8004994:	4c51      	ldr	r4, [pc, #324]	; (8004adc <oslib_test_004_001_execute+0x14c>)
 8004996:	2501      	movs	r5, #1
 8004998:	6025      	str	r5, [r4, #0]
    rop = chFactoryFindObject("myobj");
 800499a:	f7ff fb61 	bl	8004060 <chFactoryFindObject.constprop.11>
    test_assert(rop == NULL, "found");
 800499e:	fab0 f080 	clz	r0, r0
 80049a2:	0940      	lsrs	r0, r0, #5
 80049a4:	494e      	ldr	r1, [pc, #312]	; (8004ae0 <oslib_test_004_001_execute+0x150>)
 80049a6:	f7fb ff2b 	bl	8000800 <_test_assert>
 80049aa:	b108      	cbz	r0, 80049b0 <oslib_test_004_001_execute+0x20>
}
 80049ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  test_set_step(2);
 80049b0:	2302      	movs	r3, #2
    rop = chFactoryRegisterObject("myobj", (void *)&myobj);
 80049b2:	484c      	ldr	r0, [pc, #304]	; (8004ae4 <oslib_test_004_001_execute+0x154>)
  test_set_step(2);
 80049b4:	6023      	str	r3, [r4, #0]
    rop = chFactoryRegisterObject("myobj", (void *)&myobj);
 80049b6:	f7ff fb3b 	bl	8004030 <chFactoryRegisterObject.constprop.12>
    test_assert(rop != NULL, "cannot register");
 80049ba:	4606      	mov	r6, r0
 80049bc:	3000      	adds	r0, #0
 80049be:	bf18      	it	ne
 80049c0:	2001      	movne	r0, #1
 80049c2:	4949      	ldr	r1, [pc, #292]	; (8004ae8 <oslib_test_004_001_execute+0x158>)
 80049c4:	f7fb ff1c 	bl	8000800 <_test_assert>
 80049c8:	2800      	cmp	r0, #0
 80049ca:	d1ef      	bne.n	80049ac <oslib_test_004_001_execute+0x1c>
  test_set_step(3);
 80049cc:	2303      	movs	r3, #3
    rop1 = chFactoryRegisterObject("myobj", (void *)&myobj);
 80049ce:	4847      	ldr	r0, [pc, #284]	; (8004aec <oslib_test_004_001_execute+0x15c>)
  test_set_step(3);
 80049d0:	6023      	str	r3, [r4, #0]
    rop1 = chFactoryRegisterObject("myobj", (void *)&myobj);
 80049d2:	f7ff fb2d 	bl	8004030 <chFactoryRegisterObject.constprop.12>
    test_assert(rop1 == NULL, "can register");
 80049d6:	fab0 f080 	clz	r0, r0
 80049da:	0940      	lsrs	r0, r0, #5
 80049dc:	4944      	ldr	r1, [pc, #272]	; (8004af0 <oslib_test_004_001_execute+0x160>)
 80049de:	f7fb ff0f 	bl	8000800 <_test_assert>
 80049e2:	2800      	cmp	r0, #0
 80049e4:	d1e2      	bne.n	80049ac <oslib_test_004_001_execute+0x1c>
  test_set_step(4);
 80049e6:	2304      	movs	r3, #4
 80049e8:	6023      	str	r3, [r4, #0]
    rop1 = chFactoryFindObject("myobj");
 80049ea:	f7ff fb39 	bl	8004060 <chFactoryFindObject.constprop.11>
    test_assert(rop1 != NULL, "not found");
 80049ee:	4607      	mov	r7, r0
 80049f0:	3000      	adds	r0, #0
 80049f2:	bf18      	it	ne
 80049f4:	2001      	movne	r0, #1
 80049f6:	493f      	ldr	r1, [pc, #252]	; (8004af4 <oslib_test_004_001_execute+0x164>)
 80049f8:	f7fb ff02 	bl	8000800 <_test_assert>
 80049fc:	2800      	cmp	r0, #0
 80049fe:	d1d5      	bne.n	80049ac <oslib_test_004_001_execute+0x1c>
    test_assert(*(uint32_t *)(rop1->objp) == 0x55aa, "object mismatch");
 8004a00:	693b      	ldr	r3, [r7, #16]
 8004a02:	493d      	ldr	r1, [pc, #244]	; (8004af8 <oslib_test_004_001_execute+0x168>)
 8004a04:	6818      	ldr	r0, [r3, #0]
 8004a06:	f245 58aa 	movw	r8, #21930	; 0x55aa
 8004a0a:	eba0 0008 	sub.w	r0, r0, r8
 8004a0e:	fab0 f080 	clz	r0, r0
 8004a12:	0940      	lsrs	r0, r0, #5
 8004a14:	f7fb fef4 	bl	8000800 <_test_assert>
 8004a18:	2800      	cmp	r0, #0
 8004a1a:	d1c7      	bne.n	80049ac <oslib_test_004_001_execute+0x1c>
    test_assert(rop == rop1, "object reference mismatch");
 8004a1c:	1bf0      	subs	r0, r6, r7
 8004a1e:	fab0 f080 	clz	r0, r0
 8004a22:	4936      	ldr	r1, [pc, #216]	; (8004afc <oslib_test_004_001_execute+0x16c>)
 8004a24:	0940      	lsrs	r0, r0, #5
 8004a26:	f7fb feeb 	bl	8000800 <_test_assert>
 8004a2a:	2800      	cmp	r0, #0
 8004a2c:	d1be      	bne.n	80049ac <oslib_test_004_001_execute+0x1c>
    test_assert(rop1->element.refs == 2, "object reference mismatch");
 8004a2e:	6878      	ldr	r0, [r7, #4]
 8004a30:	4932      	ldr	r1, [pc, #200]	; (8004afc <oslib_test_004_001_execute+0x16c>)
 8004a32:	f1a0 0002 	sub.w	r0, r0, #2
 8004a36:	fab0 f080 	clz	r0, r0
 8004a3a:	0940      	lsrs	r0, r0, #5
 8004a3c:	f7fb fee0 	bl	8000800 <_test_assert>
 8004a40:	2800      	cmp	r0, #0
 8004a42:	d1b3      	bne.n	80049ac <oslib_test_004_001_execute+0x1c>
 8004a44:	687b      	ldr	r3, [r7, #4]
    test_assert(rop1 == rop2, "object reference mismatch");
 8004a46:	492d      	ldr	r1, [pc, #180]	; (8004afc <oslib_test_004_001_execute+0x16c>)
 8004a48:	442b      	add	r3, r5
 8004a4a:	4628      	mov	r0, r5
 8004a4c:	607b      	str	r3, [r7, #4]
 8004a4e:	f7fb fed7 	bl	8000800 <_test_assert>
 8004a52:	2800      	cmp	r0, #0
 8004a54:	d1aa      	bne.n	80049ac <oslib_test_004_001_execute+0x1c>
    test_assert(*(uint32_t *)(rop2->objp) == 0x55aa, "object mismatch");
 8004a56:	693b      	ldr	r3, [r7, #16]
 8004a58:	4927      	ldr	r1, [pc, #156]	; (8004af8 <oslib_test_004_001_execute+0x168>)
 8004a5a:	6818      	ldr	r0, [r3, #0]
 8004a5c:	eba0 0e08 	sub.w	lr, r0, r8
 8004a60:	f1de 0000 	rsbs	r0, lr, #0
 8004a64:	eb40 000e 	adc.w	r0, r0, lr
 8004a68:	f7fb feca 	bl	8000800 <_test_assert>
 8004a6c:	2800      	cmp	r0, #0
 8004a6e:	d19d      	bne.n	80049ac <oslib_test_004_001_execute+0x1c>
    test_assert(rop2->element.refs == 3, "object reference mismatch");
 8004a70:	6878      	ldr	r0, [r7, #4]
 8004a72:	4922      	ldr	r1, [pc, #136]	; (8004afc <oslib_test_004_001_execute+0x16c>)
 8004a74:	f1a0 0c03 	sub.w	ip, r0, #3
 8004a78:	f1dc 0000 	rsbs	r0, ip, #0
 8004a7c:	eb40 000c 	adc.w	r0, r0, ip
 8004a80:	f7fb febe 	bl	8000800 <_test_assert>
 8004a84:	2800      	cmp	r0, #0
 8004a86:	d191      	bne.n	80049ac <oslib_test_004_001_execute+0x1c>
    chFactoryReleaseObject(rop2);
 8004a88:	4638      	mov	r0, r7
 8004a8a:	f7ff ff49 	bl	8004920 <chFactoryReleaseObject>
    test_assert(rop1->element.refs == 2, "references mismatch");
 8004a8e:	6878      	ldr	r0, [r7, #4]
 8004a90:	491b      	ldr	r1, [pc, #108]	; (8004b00 <oslib_test_004_001_execute+0x170>)
 8004a92:	1e82      	subs	r2, r0, #2
 8004a94:	4250      	negs	r0, r2
 8004a96:	4150      	adcs	r0, r2
 8004a98:	f7fb feb2 	bl	8000800 <_test_assert>
 8004a9c:	2800      	cmp	r0, #0
 8004a9e:	d185      	bne.n	80049ac <oslib_test_004_001_execute+0x1c>
    chFactoryReleaseObject(rop1);
 8004aa0:	4638      	mov	r0, r7
 8004aa2:	f7ff ff3d 	bl	8004920 <chFactoryReleaseObject>
    test_assert(rop->element.refs == 1, "references mismatch");
 8004aa6:	6870      	ldr	r0, [r6, #4]
 8004aa8:	4915      	ldr	r1, [pc, #84]	; (8004b00 <oslib_test_004_001_execute+0x170>)
 8004aaa:	1b43      	subs	r3, r0, r5
 8004aac:	4258      	negs	r0, r3
 8004aae:	4158      	adcs	r0, r3
 8004ab0:	f7fb fea6 	bl	8000800 <_test_assert>
 8004ab4:	2800      	cmp	r0, #0
 8004ab6:	f47f af79 	bne.w	80049ac <oslib_test_004_001_execute+0x1c>
    chFactoryReleaseObject(rop);
 8004aba:	4630      	mov	r0, r6
  test_set_step(5);
 8004abc:	2305      	movs	r3, #5
 8004abe:	6023      	str	r3, [r4, #0]
    chFactoryReleaseObject(rop);
 8004ac0:	f7ff ff2e 	bl	8004920 <chFactoryReleaseObject>
  test_set_step(6);
 8004ac4:	2306      	movs	r3, #6
 8004ac6:	6023      	str	r3, [r4, #0]
    rop = chFactoryFindObject("myobj");
 8004ac8:	f7ff faca 	bl	8004060 <chFactoryFindObject.constprop.11>
    test_assert(rop == NULL, "found");
 8004acc:	fab0 f080 	clz	r0, r0
 8004ad0:	0940      	lsrs	r0, r0, #5
 8004ad2:	4903      	ldr	r1, [pc, #12]	; (8004ae0 <oslib_test_004_001_execute+0x150>)
}
 8004ad4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    test_assert(rop == NULL, "found");
 8004ad8:	f7fb be92 	b.w	8000800 <_test_assert>
 8004adc:	20001254 	.word	0x20001254
 8004ae0:	080079d0 	.word	0x080079d0
 8004ae4:	20000884 	.word	0x20000884
 8004ae8:	08007960 	.word	0x08007960
 8004aec:	20000888 	.word	0x20000888
 8004af0:	08007970 	.word	0x08007970
 8004af4:	080079cc 	.word	0x080079cc
 8004af8:	08007980 	.word	0x08007980
 8004afc:	080079d8 	.word	0x080079d8
 8004b00:	080079f4 	.word	0x080079f4
	...

08004b10 <oslib_test_004_001_teardown>:
static void oslib_test_004_001_teardown(void) {
 8004b10:	b510      	push	{r4, lr}
  rop = chFactoryFindObject("myobj");
 8004b12:	f7ff faa5 	bl	8004060 <chFactoryFindObject.constprop.11>
  if (rop != NULL) {
 8004b16:	b140      	cbz	r0, 8004b2a <oslib_test_004_001_teardown+0x1a>
    while (rop->element.refs > 0U) {
 8004b18:	6843      	ldr	r3, [r0, #4]
 8004b1a:	4604      	mov	r4, r0
 8004b1c:	b12b      	cbz	r3, 8004b2a <oslib_test_004_001_teardown+0x1a>
      chFactoryReleaseObject(rop);
 8004b1e:	4620      	mov	r0, r4
 8004b20:	f7ff fefe 	bl	8004920 <chFactoryReleaseObject>
    while (rop->element.refs > 0U) {
 8004b24:	6863      	ldr	r3, [r4, #4]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d1f9      	bne.n	8004b1e <oslib_test_004_001_teardown+0xe>
}
 8004b2a:	bd10      	pop	{r4, pc}
 8004b2c:	0000      	movs	r0, r0
	...

08004b30 <chHeapStatus>:
 *                      free free block found space or @p NULL
 * @return              The number of fragments in the heap.
 *
 * @api
 */
size_t chHeapStatus(memory_heap_t *heapp, size_t *totalp, size_t *largestp) {
 8004b30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  heap_header_t *qp;
  size_t n, tpages, lpages;

  if (heapp == NULL) {
    heapp = &default_heap;
 8004b34:	4c17      	ldr	r4, [pc, #92]	; (8004b94 <chHeapStatus+0x64>)
 8004b36:	2800      	cmp	r0, #0
 8004b38:	bf18      	it	ne
 8004b3a:	4604      	movne	r4, r0
  }

  H_LOCK(heapp);
 8004b3c:	f104 070c 	add.w	r7, r4, #12
 8004b40:	4638      	mov	r0, r7
size_t chHeapStatus(memory_heap_t *heapp, size_t *totalp, size_t *largestp) {
 8004b42:	4689      	mov	r9, r1
 8004b44:	4690      	mov	r8, r2
  H_LOCK(heapp);
 8004b46:	f7fd ff23 	bl	8002990 <chMtxLock>
  tpages = 0U;
  lpages = 0U;
  n = 0U;
  qp = &heapp->header;
  while (H_NEXT(qp) != NULL) {
 8004b4a:	6863      	ldr	r3, [r4, #4]
 8004b4c:	b1f3      	cbz	r3, 8004b8c <chHeapStatus+0x5c>
  lpages = 0U;
 8004b4e:	2400      	movs	r4, #0
  tpages = 0U;
 8004b50:	4625      	mov	r5, r4
  n = 0U;
 8004b52:	4626      	mov	r6, r4
  while (H_NEXT(qp) != NULL) {
 8004b54:	e9d3 3000 	ldrd	r3, r0, [r3]
 8004b58:	4284      	cmp	r4, r0
    size_t pages = H_PAGES(H_NEXT(qp));

    /* Updating counters.*/
    n++;
 8004b5a:	f106 0601 	add.w	r6, r6, #1
    tpages += pages;
 8004b5e:	4405      	add	r5, r0
 8004b60:	bf38      	it	cc
 8004b62:	4604      	movcc	r4, r0
  while (H_NEXT(qp) != NULL) {
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d1f5      	bne.n	8004b54 <chHeapStatus+0x24>

    qp = H_NEXT(qp);
  }

  /* Writing out fragmented free memory.*/
  if (totalp != NULL) {
 8004b68:	f1b9 0f00 	cmp.w	r9, #0
 8004b6c:	d002      	beq.n	8004b74 <chHeapStatus+0x44>
    *totalp = tpages * CH_HEAP_ALIGNMENT;
 8004b6e:	00ed      	lsls	r5, r5, #3
 8004b70:	f8c9 5000 	str.w	r5, [r9]
  }

  /* Writing out unfragmented free memory.*/
  if (largestp != NULL) {
 8004b74:	f1b8 0f00 	cmp.w	r8, #0
 8004b78:	d002      	beq.n	8004b80 <chHeapStatus+0x50>
    *largestp = lpages * CH_HEAP_ALIGNMENT;
 8004b7a:	00e4      	lsls	r4, r4, #3
 8004b7c:	f8c8 4000 	str.w	r4, [r8]
  }
  H_UNLOCK(heapp);
 8004b80:	4638      	mov	r0, r7
 8004b82:	f7ff f94d 	bl	8003e20 <chMtxUnlock>

  return n;
}
 8004b86:	4630      	mov	r0, r6
 8004b88:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  lpages = 0U;
 8004b8c:	461c      	mov	r4, r3
  tpages = 0U;
 8004b8e:	461d      	mov	r5, r3
  n = 0U;
 8004b90:	461e      	mov	r6, r3
 8004b92:	e7e9      	b.n	8004b68 <chHeapStatus+0x38>
 8004b94:	20000a90 	.word	0x20000a90
	...

08004ba0 <chHeapFree>:
void chHeapFree(void *p) {
 8004ba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  heapp = H_HEAP(hp);
 8004ba2:	e950 5302 	ldrd	r5, r3, [r0, #-8]
  H_PAGES(hp) = MEM_ALIGN_NEXT(H_SIZE(hp),
 8004ba6:	3307      	adds	r3, #7
                               CH_HEAP_ALIGNMENT) / CH_HEAP_ALIGNMENT;
 8004ba8:	08db      	lsrs	r3, r3, #3
  H_LOCK(heapp);
 8004baa:	f105 070c 	add.w	r7, r5, #12
  H_PAGES(hp) = MEM_ALIGN_NEXT(H_SIZE(hp),
 8004bae:	f840 3c04 	str.w	r3, [r0, #-4]
void chHeapFree(void *p) {
 8004bb2:	4606      	mov	r6, r0
  hp = (heap_header_t *)p - 1U;
 8004bb4:	f1a0 0408 	sub.w	r4, r0, #8
  qp = &heapp->header;
 8004bb8:	3504      	adds	r5, #4
  H_LOCK(heapp);
 8004bba:	4638      	mov	r0, r7
 8004bbc:	f7fd fee8 	bl	8002990 <chMtxLock>
  qp = &heapp->header;
 8004bc0:	462b      	mov	r3, r5
    if (((qp == &heapp->header) || (hp > qp)) &&
 8004bc2:	42ab      	cmp	r3, r5
 8004bc4:	681a      	ldr	r2, [r3, #0]
 8004bc6:	d001      	beq.n	8004bcc <chHeapFree+0x2c>
 8004bc8:	429c      	cmp	r4, r3
 8004bca:	d902      	bls.n	8004bd2 <chHeapFree+0x32>
 8004bcc:	b11a      	cbz	r2, 8004bd6 <chHeapFree+0x36>
        ((H_NEXT(qp) == NULL) || (hp < H_NEXT(qp)))) {
 8004bce:	4294      	cmp	r4, r2
 8004bd0:	d301      	bcc.n	8004bd6 <chHeapFree+0x36>
void chHeapFree(void *p) {
 8004bd2:	4613      	mov	r3, r2
 8004bd4:	e7f5      	b.n	8004bc2 <chHeapFree+0x22>
      if (H_LIMIT(hp) == H_NEXT(hp)) {
 8004bd6:	f856 1c04 	ldr.w	r1, [r6, #-4]
      H_NEXT(hp) = H_NEXT(qp);
 8004bda:	f846 2c08 	str.w	r2, [r6, #-8]
      H_NEXT(qp) = hp;
 8004bde:	601c      	str	r4, [r3, #0]
      if (H_LIMIT(hp) == H_NEXT(hp)) {
 8004be0:	1c4a      	adds	r2, r1, #1
 8004be2:	f856 0c08 	ldr.w	r0, [r6, #-8]
 8004be6:	eb04 01c2 	add.w	r1, r4, r2, lsl #3
 8004bea:	4281      	cmp	r1, r0
 8004bec:	d00a      	beq.n	8004c04 <chHeapFree+0x64>
      if ((H_LIMIT(qp) == hp)) {
 8004bee:	6859      	ldr	r1, [r3, #4]
 8004bf0:	1c4a      	adds	r2, r1, #1
 8004bf2:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8004bf6:	4294      	cmp	r4, r2
 8004bf8:	d012      	beq.n	8004c20 <chHeapFree+0x80>
  H_UNLOCK(heapp);
 8004bfa:	4638      	mov	r0, r7
}
 8004bfc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  H_UNLOCK(heapp);
 8004c00:	f7ff b90e 	b.w	8003e20 <chMtxUnlock>
        H_PAGES(hp) += H_PAGES(H_NEXT(hp)) + 1U;
 8004c04:	6849      	ldr	r1, [r1, #4]
        H_NEXT(hp) = H_NEXT(H_NEXT(hp));
 8004c06:	f854 0032 	ldr.w	r0, [r4, r2, lsl #3]
 8004c0a:	f846 0c08 	str.w	r0, [r6, #-8]
        H_PAGES(hp) += H_PAGES(H_NEXT(hp)) + 1U;
 8004c0e:	440a      	add	r2, r1
 8004c10:	f846 2c04 	str.w	r2, [r6, #-4]
      if ((H_LIMIT(qp) == hp)) {
 8004c14:	6859      	ldr	r1, [r3, #4]
 8004c16:	1c4a      	adds	r2, r1, #1
 8004c18:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8004c1c:	4294      	cmp	r4, r2
 8004c1e:	d1ec      	bne.n	8004bfa <chHeapFree+0x5a>
        H_NEXT(qp) = H_NEXT(hp);
 8004c20:	e956 0202 	ldrd	r0, r2, [r6, #-8]
        H_PAGES(qp) += H_PAGES(hp) + 1U;
 8004c24:	3201      	adds	r2, #1
 8004c26:	4411      	add	r1, r2
        H_NEXT(qp) = H_NEXT(hp);
 8004c28:	6018      	str	r0, [r3, #0]
        H_PAGES(qp) += H_PAGES(hp) + 1U;
 8004c2a:	6059      	str	r1, [r3, #4]
  H_UNLOCK(heapp);
 8004c2c:	4638      	mov	r0, r7
}
 8004c2e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  H_UNLOCK(heapp);
 8004c32:	f7ff b8f5 	b.w	8003e20 <chMtxUnlock>
 8004c36:	bf00      	nop
	...

08004c40 <oslib_test_003_002_execute>:
 *   is freed using chHeapFree(), must not fail.
 * - [3.2.2] Testing allocation failure.
 * .
 */

static void oslib_test_003_002_execute(void) {
 8004c40:	b570      	push	{r4, r5, r6, lr}
  void *p1;
  size_t total_size, largest_size;

  /* [3.2.1] Single block allocation using chHeapAlloc() then the block
     is freed using chHeapFree(), must not fail.*/
  test_set_step(1);
 8004c42:	4c14      	ldr	r4, [pc, #80]	; (8004c94 <oslib_test_003_002_execute+0x54>)
static void oslib_test_003_002_execute(void) {
 8004c44:	b082      	sub	sp, #8
  test_set_step(1);
 8004c46:	2301      	movs	r3, #1
  {
    (void)chHeapStatus(NULL, &total_size, &largest_size);
 8004c48:	466a      	mov	r2, sp
 8004c4a:	a901      	add	r1, sp, #4
 8004c4c:	2000      	movs	r0, #0
  test_set_step(1);
 8004c4e:	6023      	str	r3, [r4, #0]
    (void)chHeapStatus(NULL, &total_size, &largest_size);
 8004c50:	f7ff ff6e 	bl	8004b30 <chHeapStatus>
 8004c54:	2110      	movs	r1, #16
 8004c56:	4810      	ldr	r0, [pc, #64]	; (8004c98 <oslib_test_003_002_execute+0x58>)
 8004c58:	f7ff f91a 	bl	8003e90 <chHeapAllocAligned.constprop.33>
    p1 = chHeapAlloc(&test_heap, ALLOC_SIZE);
    test_assert(p1 != NULL, "allocation failed");
 8004c5c:	4606      	mov	r6, r0
 8004c5e:	3000      	adds	r0, #0
 8004c60:	bf18      	it	ne
 8004c62:	2001      	movne	r0, #1
 8004c64:	490d      	ldr	r1, [pc, #52]	; (8004c9c <oslib_test_003_002_execute+0x5c>)
 8004c66:	f7fb fdcb 	bl	8000800 <_test_assert>
 8004c6a:	b980      	cbnz	r0, 8004c8e <oslib_test_003_002_execute+0x4e>
 8004c6c:	4605      	mov	r5, r0
    chHeapFree(p1);
 8004c6e:	4630      	mov	r0, r6
 8004c70:	f7ff ff96 	bl	8004ba0 <chHeapFree>
  }

  /* [3.2.2] Testing allocation failure.*/
  test_set_step(2);
 8004c74:	2302      	movs	r3, #2
 8004c76:	f06f 01ff 	mvn.w	r1, #255	; 0xff
 8004c7a:	4628      	mov	r0, r5
 8004c7c:	6023      	str	r3, [r4, #0]
 8004c7e:	f7ff f907 	bl	8003e90 <chHeapAllocAligned.constprop.33>
  {
    p1 = chHeapAlloc(NULL, (size_t)-256);
    test_assert(p1 == NULL, "allocation not failed");
 8004c82:	fab0 f080 	clz	r0, r0
 8004c86:	0940      	lsrs	r0, r0, #5
 8004c88:	4905      	ldr	r1, [pc, #20]	; (8004ca0 <oslib_test_003_002_execute+0x60>)
 8004c8a:	f7fb fdb9 	bl	8000800 <_test_assert>
  }
}
 8004c8e:	b002      	add	sp, #8
 8004c90:	bd70      	pop	{r4, r5, r6, pc}
 8004c92:	bf00      	nop
 8004c94:	20001254 	.word	0x20001254
 8004c98:	200011b4 	.word	0x200011b4
 8004c9c:	08007924 	.word	0x08007924
 8004ca0:	08007938 	.word	0x08007938
	...

08004cb0 <oslib_test_003_001_execute>:
static void oslib_test_003_001_execute(void) {
 8004cb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  test_set_step(1);
 8004cb4:	4cbf      	ldr	r4, [pc, #764]	; (8004fb4 <oslib_test_003_001_execute+0x304>)
    test_assert(chHeapStatus(&test_heap, &sz, NULL) == 1, "heap fragmented");
 8004cb6:	48c0      	ldr	r0, [pc, #768]	; (8004fb8 <oslib_test_003_001_execute+0x308>)
static void oslib_test_003_001_execute(void) {
 8004cb8:	b084      	sub	sp, #16
  test_set_step(1);
 8004cba:	2301      	movs	r3, #1
    test_assert(chHeapStatus(&test_heap, &sz, NULL) == 1, "heap fragmented");
 8004cbc:	4669      	mov	r1, sp
 8004cbe:	2200      	movs	r2, #0
  test_set_step(1);
 8004cc0:	6023      	str	r3, [r4, #0]
    test_assert(chHeapStatus(&test_heap, &sz, NULL) == 1, "heap fragmented");
 8004cc2:	f7ff ff35 	bl	8004b30 <chHeapStatus>
 8004cc6:	f1a0 0001 	sub.w	r0, r0, #1
 8004cca:	fab0 f080 	clz	r0, r0
 8004cce:	49bb      	ldr	r1, [pc, #748]	; (8004fbc <oslib_test_003_001_execute+0x30c>)
 8004cd0:	0940      	lsrs	r0, r0, #5
 8004cd2:	f7fb fd95 	bl	8000800 <_test_assert>
 8004cd6:	b110      	cbz	r0, 8004cde <oslib_test_003_001_execute+0x2e>
}
 8004cd8:	b004      	add	sp, #16
 8004cda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  test_set_step(2);
 8004cde:	2302      	movs	r3, #2
 8004ce0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004ce4:	48b4      	ldr	r0, [pc, #720]	; (8004fb8 <oslib_test_003_001_execute+0x308>)
 8004ce6:	6023      	str	r3, [r4, #0]
 8004ce8:	f7ff f8d2 	bl	8003e90 <chHeapAllocAligned.constprop.33>
    test_assert(p1 == NULL, "allocation not failed");
 8004cec:	fab0 f080 	clz	r0, r0
 8004cf0:	0940      	lsrs	r0, r0, #5
 8004cf2:	49b3      	ldr	r1, [pc, #716]	; (8004fc0 <oslib_test_003_001_execute+0x310>)
 8004cf4:	f7fb fd84 	bl	8000800 <_test_assert>
 8004cf8:	2800      	cmp	r0, #0
 8004cfa:	d1ed      	bne.n	8004cd8 <oslib_test_003_001_execute+0x28>
  test_set_step(3);
 8004cfc:	2303      	movs	r3, #3
 8004cfe:	2110      	movs	r1, #16
 8004d00:	48ad      	ldr	r0, [pc, #692]	; (8004fb8 <oslib_test_003_001_execute+0x308>)
 8004d02:	6023      	str	r3, [r4, #0]
 8004d04:	f7ff f8c4 	bl	8003e90 <chHeapAllocAligned.constprop.33>
    test_assert(p1 != NULL, "allocation failed");
 8004d08:	4605      	mov	r5, r0
 8004d0a:	3000      	adds	r0, #0
 8004d0c:	bf18      	it	ne
 8004d0e:	2001      	movne	r0, #1
 8004d10:	49ac      	ldr	r1, [pc, #688]	; (8004fc4 <oslib_test_003_001_execute+0x314>)
 8004d12:	f7fb fd75 	bl	8000800 <_test_assert>
 8004d16:	2800      	cmp	r0, #0
 8004d18:	d1de      	bne.n	8004cd8 <oslib_test_003_001_execute+0x28>
    chHeapFree(p1);
 8004d1a:	4628      	mov	r0, r5
 8004d1c:	f7ff ff40 	bl	8004ba0 <chHeapFree>
  test_set_step(4);
 8004d20:	2304      	movs	r3, #4
    n = chHeapStatus(&test_heap, &total_size, &largest_size);
 8004d22:	a903      	add	r1, sp, #12
 8004d24:	aa02      	add	r2, sp, #8
 8004d26:	48a4      	ldr	r0, [pc, #656]	; (8004fb8 <oslib_test_003_001_execute+0x308>)
  test_set_step(4);
 8004d28:	6023      	str	r3, [r4, #0]
    n = chHeapStatus(&test_heap, &total_size, &largest_size);
 8004d2a:	f7ff ff01 	bl	8004b30 <chHeapStatus>
 8004d2e:	4603      	mov	r3, r0
    test_assert(n == 1, "missing free block");
 8004d30:	f1a0 0001 	sub.w	r0, r0, #1
 8004d34:	fab0 f080 	clz	r0, r0
 8004d38:	0940      	lsrs	r0, r0, #5
 8004d3a:	49a3      	ldr	r1, [pc, #652]	; (8004fc8 <oslib_test_003_001_execute+0x318>)
    n = chHeapStatus(&test_heap, &total_size, &largest_size);
 8004d3c:	9301      	str	r3, [sp, #4]
    test_assert(n == 1, "missing free block");
 8004d3e:	f7fb fd5f 	bl	8000800 <_test_assert>
 8004d42:	2800      	cmp	r0, #0
 8004d44:	d1c8      	bne.n	8004cd8 <oslib_test_003_001_execute+0x28>
    test_assert(total_size >= ALLOC_SIZE, "unexpected heap state");
 8004d46:	9803      	ldr	r0, [sp, #12]
 8004d48:	49a0      	ldr	r1, [pc, #640]	; (8004fcc <oslib_test_003_001_execute+0x31c>)
 8004d4a:	280f      	cmp	r0, #15
 8004d4c:	bf94      	ite	ls
 8004d4e:	2000      	movls	r0, #0
 8004d50:	2001      	movhi	r0, #1
 8004d52:	f7fb fd55 	bl	8000800 <_test_assert>
 8004d56:	2800      	cmp	r0, #0
 8004d58:	d1be      	bne.n	8004cd8 <oslib_test_003_001_execute+0x28>
    test_assert(total_size == largest_size, "unexpected heap state");
 8004d5a:	e9dd 3002 	ldrd	r3, r0, [sp, #8]
 8004d5e:	1ac0      	subs	r0, r0, r3
 8004d60:	fab0 f080 	clz	r0, r0
 8004d64:	4999      	ldr	r1, [pc, #612]	; (8004fcc <oslib_test_003_001_execute+0x31c>)
 8004d66:	0940      	lsrs	r0, r0, #5
 8004d68:	f7fb fd4a 	bl	8000800 <_test_assert>
 8004d6c:	4605      	mov	r5, r0
 8004d6e:	2800      	cmp	r0, #0
 8004d70:	d1b2      	bne.n	8004cd8 <oslib_test_003_001_execute+0x28>
  test_set_step(5);
 8004d72:	2305      	movs	r3, #5
 8004d74:	2110      	movs	r1, #16
 8004d76:	4890      	ldr	r0, [pc, #576]	; (8004fb8 <oslib_test_003_001_execute+0x308>)
 8004d78:	6023      	str	r3, [r4, #0]
 8004d7a:	f7ff f889 	bl	8003e90 <chHeapAllocAligned.constprop.33>
 8004d7e:	2110      	movs	r1, #16
 8004d80:	4680      	mov	r8, r0
 8004d82:	488d      	ldr	r0, [pc, #564]	; (8004fb8 <oslib_test_003_001_execute+0x308>)
 8004d84:	f7ff f884 	bl	8003e90 <chHeapAllocAligned.constprop.33>
 8004d88:	2110      	movs	r1, #16
 8004d8a:	4607      	mov	r7, r0
 8004d8c:	488a      	ldr	r0, [pc, #552]	; (8004fb8 <oslib_test_003_001_execute+0x308>)
 8004d8e:	f7ff f87f 	bl	8003e90 <chHeapAllocAligned.constprop.33>
 8004d92:	4606      	mov	r6, r0
    chHeapFree(p1);                                 /* Does not merge.*/
 8004d94:	4640      	mov	r0, r8
 8004d96:	f7ff ff03 	bl	8004ba0 <chHeapFree>
    chHeapFree(p2);                                 /* Merges backward.*/
 8004d9a:	4638      	mov	r0, r7
 8004d9c:	f7ff ff00 	bl	8004ba0 <chHeapFree>
    chHeapFree(p3);                                 /* Merges both sides.*/
 8004da0:	4630      	mov	r0, r6
 8004da2:	f7ff fefd 	bl	8004ba0 <chHeapFree>
    test_assert(chHeapStatus(&test_heap, &n, NULL) == 1, "heap fragmented");
 8004da6:	462a      	mov	r2, r5
 8004da8:	a901      	add	r1, sp, #4
 8004daa:	4883      	ldr	r0, [pc, #524]	; (8004fb8 <oslib_test_003_001_execute+0x308>)
 8004dac:	f7ff fec0 	bl	8004b30 <chHeapStatus>
 8004db0:	f1a0 0001 	sub.w	r0, r0, #1
 8004db4:	fab0 f080 	clz	r0, r0
 8004db8:	4980      	ldr	r1, [pc, #512]	; (8004fbc <oslib_test_003_001_execute+0x30c>)
 8004dba:	0940      	lsrs	r0, r0, #5
 8004dbc:	f7fb fd20 	bl	8000800 <_test_assert>
 8004dc0:	4605      	mov	r5, r0
 8004dc2:	2800      	cmp	r0, #0
 8004dc4:	d188      	bne.n	8004cd8 <oslib_test_003_001_execute+0x28>
  test_set_step(6);
 8004dc6:	2306      	movs	r3, #6
 8004dc8:	2110      	movs	r1, #16
 8004dca:	487b      	ldr	r0, [pc, #492]	; (8004fb8 <oslib_test_003_001_execute+0x308>)
 8004dcc:	6023      	str	r3, [r4, #0]
 8004dce:	f7ff f85f 	bl	8003e90 <chHeapAllocAligned.constprop.33>
 8004dd2:	2110      	movs	r1, #16
 8004dd4:	4606      	mov	r6, r0
 8004dd6:	4878      	ldr	r0, [pc, #480]	; (8004fb8 <oslib_test_003_001_execute+0x308>)
 8004dd8:	f7ff f85a 	bl	8003e90 <chHeapAllocAligned.constprop.33>
 8004ddc:	2110      	movs	r1, #16
 8004dde:	4607      	mov	r7, r0
 8004de0:	4875      	ldr	r0, [pc, #468]	; (8004fb8 <oslib_test_003_001_execute+0x308>)
 8004de2:	f7ff f855 	bl	8003e90 <chHeapAllocAligned.constprop.33>
    chHeapFree(p3);                                 /* Merges forward.*/
 8004de6:	f7ff fedb 	bl	8004ba0 <chHeapFree>
    chHeapFree(p2);                                 /* Merges forward.*/
 8004dea:	4638      	mov	r0, r7
 8004dec:	f7ff fed8 	bl	8004ba0 <chHeapFree>
    chHeapFree(p1);                                 /* Merges forward.*/
 8004df0:	4630      	mov	r0, r6
 8004df2:	f7ff fed5 	bl	8004ba0 <chHeapFree>
    test_assert(chHeapStatus(&test_heap, &n, NULL) == 1, "heap fragmented");
 8004df6:	462a      	mov	r2, r5
 8004df8:	a901      	add	r1, sp, #4
 8004dfa:	486f      	ldr	r0, [pc, #444]	; (8004fb8 <oslib_test_003_001_execute+0x308>)
 8004dfc:	f7ff fe98 	bl	8004b30 <chHeapStatus>
 8004e00:	1e43      	subs	r3, r0, #1
 8004e02:	4258      	negs	r0, r3
 8004e04:	496d      	ldr	r1, [pc, #436]	; (8004fbc <oslib_test_003_001_execute+0x30c>)
 8004e06:	4158      	adcs	r0, r3
 8004e08:	f7fb fcfa 	bl	8000800 <_test_assert>
 8004e0c:	4605      	mov	r5, r0
 8004e0e:	2800      	cmp	r0, #0
 8004e10:	f47f af62 	bne.w	8004cd8 <oslib_test_003_001_execute+0x28>
  test_set_step(7);
 8004e14:	2307      	movs	r3, #7
 8004e16:	2111      	movs	r1, #17
 8004e18:	4867      	ldr	r0, [pc, #412]	; (8004fb8 <oslib_test_003_001_execute+0x308>)
 8004e1a:	6023      	str	r3, [r4, #0]
 8004e1c:	f7ff f838 	bl	8003e90 <chHeapAllocAligned.constprop.33>
 8004e20:	2110      	movs	r1, #16
 8004e22:	4606      	mov	r6, r0
 8004e24:	4864      	ldr	r0, [pc, #400]	; (8004fb8 <oslib_test_003_001_execute+0x308>)
 8004e26:	f7ff f833 	bl	8003e90 <chHeapAllocAligned.constprop.33>
 8004e2a:	4607      	mov	r7, r0
    chHeapFree(p1);
 8004e2c:	4630      	mov	r0, r6
 8004e2e:	f7ff feb7 	bl	8004ba0 <chHeapFree>
    test_assert(chHeapStatus(&test_heap, &n, NULL) == 2, "invalid state");
 8004e32:	462a      	mov	r2, r5
 8004e34:	a901      	add	r1, sp, #4
 8004e36:	4860      	ldr	r0, [pc, #384]	; (8004fb8 <oslib_test_003_001_execute+0x308>)
 8004e38:	f7ff fe7a 	bl	8004b30 <chHeapStatus>
 8004e3c:	f1a0 0802 	sub.w	r8, r0, #2
 8004e40:	f1d8 0000 	rsbs	r0, r8, #0
 8004e44:	4962      	ldr	r1, [pc, #392]	; (8004fd0 <oslib_test_003_001_execute+0x320>)
 8004e46:	eb40 0008 	adc.w	r0, r0, r8
 8004e4a:	f7fb fcd9 	bl	8000800 <_test_assert>
 8004e4e:	4605      	mov	r5, r0
 8004e50:	2800      	cmp	r0, #0
 8004e52:	f47f af41 	bne.w	8004cd8 <oslib_test_003_001_execute+0x28>
 8004e56:	2110      	movs	r1, #16
 8004e58:	4857      	ldr	r0, [pc, #348]	; (8004fb8 <oslib_test_003_001_execute+0x308>)
 8004e5a:	f7ff f819 	bl	8003e90 <chHeapAllocAligned.constprop.33>
    test_assert((chHeapStatus(&test_heap, &n, NULL) == 1) ||
 8004e5e:	462a      	mov	r2, r5
 8004e60:	4606      	mov	r6, r0
 8004e62:	a901      	add	r1, sp, #4
 8004e64:	4854      	ldr	r0, [pc, #336]	; (8004fb8 <oslib_test_003_001_execute+0x308>)
 8004e66:	f7ff fe63 	bl	8004b30 <chHeapStatus>
 8004e6a:	2801      	cmp	r0, #1
 8004e6c:	f000 809f 	beq.w	8004fae <oslib_test_003_001_execute+0x2fe>
 8004e70:	2200      	movs	r2, #0
 8004e72:	a901      	add	r1, sp, #4
 8004e74:	4850      	ldr	r0, [pc, #320]	; (8004fb8 <oslib_test_003_001_execute+0x308>)
 8004e76:	f7ff fe5b 	bl	8004b30 <chHeapStatus>
 8004e7a:	f1a0 0e02 	sub.w	lr, r0, #2
 8004e7e:	f1de 0000 	rsbs	r0, lr, #0
 8004e82:	eb40 000e 	adc.w	r0, r0, lr
 8004e86:	494d      	ldr	r1, [pc, #308]	; (8004fbc <oslib_test_003_001_execute+0x30c>)
 8004e88:	f7fb fcba 	bl	8000800 <_test_assert>
 8004e8c:	4605      	mov	r5, r0
 8004e8e:	2800      	cmp	r0, #0
 8004e90:	f47f af22 	bne.w	8004cd8 <oslib_test_003_001_execute+0x28>
    chHeapFree(p2);
 8004e94:	4638      	mov	r0, r7
 8004e96:	f7ff fe83 	bl	8004ba0 <chHeapFree>
    chHeapFree(p1);
 8004e9a:	4630      	mov	r0, r6
 8004e9c:	f7ff fe80 	bl	8004ba0 <chHeapFree>
    test_assert(chHeapStatus(&test_heap, &n, NULL) == 1, "heap fragmented");
 8004ea0:	462a      	mov	r2, r5
 8004ea2:	a901      	add	r1, sp, #4
 8004ea4:	4844      	ldr	r0, [pc, #272]	; (8004fb8 <oslib_test_003_001_execute+0x308>)
 8004ea6:	f7ff fe43 	bl	8004b30 <chHeapStatus>
 8004eaa:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8004eae:	f1dc 0000 	rsbs	r0, ip, #0
 8004eb2:	4942      	ldr	r1, [pc, #264]	; (8004fbc <oslib_test_003_001_execute+0x30c>)
 8004eb4:	eb40 000c 	adc.w	r0, r0, ip
 8004eb8:	f7fb fca2 	bl	8000800 <_test_assert>
 8004ebc:	4605      	mov	r5, r0
 8004ebe:	2800      	cmp	r0, #0
 8004ec0:	f47f af0a 	bne.w	8004cd8 <oslib_test_003_001_execute+0x28>
  test_set_step(8);
 8004ec4:	2308      	movs	r3, #8
 8004ec6:	2110      	movs	r1, #16
 8004ec8:	483b      	ldr	r0, [pc, #236]	; (8004fb8 <oslib_test_003_001_execute+0x308>)
 8004eca:	6023      	str	r3, [r4, #0]
 8004ecc:	f7fe ffe0 	bl	8003e90 <chHeapAllocAligned.constprop.33>
 8004ed0:	2110      	movs	r1, #16
 8004ed2:	4607      	mov	r7, r0
 8004ed4:	4838      	ldr	r0, [pc, #224]	; (8004fb8 <oslib_test_003_001_execute+0x308>)
 8004ed6:	f7fe ffdb 	bl	8003e90 <chHeapAllocAligned.constprop.33>
 8004eda:	4606      	mov	r6, r0
    chHeapFree(p1);
 8004edc:	4638      	mov	r0, r7
 8004ede:	f7ff fe5f 	bl	8004ba0 <chHeapFree>
    test_assert( chHeapStatus(&test_heap, &n, NULL) == 2, "invalid state");
 8004ee2:	462a      	mov	r2, r5
 8004ee4:	a901      	add	r1, sp, #4
 8004ee6:	4834      	ldr	r0, [pc, #208]	; (8004fb8 <oslib_test_003_001_execute+0x308>)
 8004ee8:	f7ff fe22 	bl	8004b30 <chHeapStatus>
 8004eec:	1e87      	subs	r7, r0, #2
 8004eee:	4278      	negs	r0, r7
 8004ef0:	4937      	ldr	r1, [pc, #220]	; (8004fd0 <oslib_test_003_001_execute+0x320>)
 8004ef2:	4178      	adcs	r0, r7
 8004ef4:	f7fb fc84 	bl	8000800 <_test_assert>
 8004ef8:	4605      	mov	r5, r0
 8004efa:	2800      	cmp	r0, #0
 8004efc:	f47f aeec 	bne.w	8004cd8 <oslib_test_003_001_execute+0x28>
 8004f00:	2120      	movs	r1, #32
 8004f02:	482d      	ldr	r0, [pc, #180]	; (8004fb8 <oslib_test_003_001_execute+0x308>)
 8004f04:	f7fe ffc4 	bl	8003e90 <chHeapAllocAligned.constprop.33>
    chHeapFree(p1);
 8004f08:	f7ff fe4a 	bl	8004ba0 <chHeapFree>
    chHeapFree(p2);
 8004f0c:	4630      	mov	r0, r6
 8004f0e:	f7ff fe47 	bl	8004ba0 <chHeapFree>
    test_assert(chHeapStatus(&test_heap, &n, NULL) == 1, "heap fragmented");
 8004f12:	462a      	mov	r2, r5
 8004f14:	a901      	add	r1, sp, #4
 8004f16:	4828      	ldr	r0, [pc, #160]	; (8004fb8 <oslib_test_003_001_execute+0x308>)
 8004f18:	f7ff fe0a 	bl	8004b30 <chHeapStatus>
 8004f1c:	1e45      	subs	r5, r0, #1
 8004f1e:	4268      	negs	r0, r5
 8004f20:	4926      	ldr	r1, [pc, #152]	; (8004fbc <oslib_test_003_001_execute+0x30c>)
 8004f22:	4168      	adcs	r0, r5
 8004f24:	f7fb fc6c 	bl	8000800 <_test_assert>
 8004f28:	4602      	mov	r2, r0
 8004f2a:	2800      	cmp	r0, #0
 8004f2c:	f47f aed4 	bne.w	8004cd8 <oslib_test_003_001_execute+0x28>
  test_set_step(9);
 8004f30:	2309      	movs	r3, #9
    (void)chHeapStatus(&test_heap, &n, NULL);
 8004f32:	a901      	add	r1, sp, #4
 8004f34:	4820      	ldr	r0, [pc, #128]	; (8004fb8 <oslib_test_003_001_execute+0x308>)
  test_set_step(9);
 8004f36:	6023      	str	r3, [r4, #0]
    (void)chHeapStatus(&test_heap, &n, NULL);
 8004f38:	f7ff fdfa 	bl	8004b30 <chHeapStatus>
 8004f3c:	9901      	ldr	r1, [sp, #4]
 8004f3e:	481e      	ldr	r0, [pc, #120]	; (8004fb8 <oslib_test_003_001_execute+0x308>)
 8004f40:	f7fe ffa6 	bl	8003e90 <chHeapAllocAligned.constprop.33>
    test_assert(p1 != NULL, "allocation failed");
 8004f44:	4606      	mov	r6, r0
 8004f46:	3000      	adds	r0, #0
 8004f48:	491e      	ldr	r1, [pc, #120]	; (8004fc4 <oslib_test_003_001_execute+0x314>)
 8004f4a:	bf18      	it	ne
 8004f4c:	2001      	movne	r0, #1
 8004f4e:	f7fb fc57 	bl	8000800 <_test_assert>
 8004f52:	4602      	mov	r2, r0
 8004f54:	2800      	cmp	r0, #0
 8004f56:	f47f aebf 	bne.w	8004cd8 <oslib_test_003_001_execute+0x28>
    test_assert(chHeapStatus(&test_heap, NULL, NULL) == 0, "not empty");
 8004f5a:	4601      	mov	r1, r0
 8004f5c:	4816      	ldr	r0, [pc, #88]	; (8004fb8 <oslib_test_003_001_execute+0x308>)
 8004f5e:	f7ff fde7 	bl	8004b30 <chHeapStatus>
 8004f62:	fab0 f080 	clz	r0, r0
 8004f66:	0940      	lsrs	r0, r0, #5
 8004f68:	491a      	ldr	r1, [pc, #104]	; (8004fd4 <oslib_test_003_001_execute+0x324>)
 8004f6a:	f7fb fc49 	bl	8000800 <_test_assert>
 8004f6e:	4605      	mov	r5, r0
 8004f70:	2800      	cmp	r0, #0
 8004f72:	f47f aeb1 	bne.w	8004cd8 <oslib_test_003_001_execute+0x28>
    chHeapFree(p1);
 8004f76:	4630      	mov	r0, r6
 8004f78:	f7ff fe12 	bl	8004ba0 <chHeapFree>
    test_assert(chHeapStatus(&test_heap, &n, NULL) == 1, "heap fragmented");
 8004f7c:	462a      	mov	r2, r5
 8004f7e:	a901      	add	r1, sp, #4
  test_set_step(10);
 8004f80:	230a      	movs	r3, #10
    test_assert(chHeapStatus(&test_heap, &n, NULL) == 1, "heap fragmented");
 8004f82:	480d      	ldr	r0, [pc, #52]	; (8004fb8 <oslib_test_003_001_execute+0x308>)
  test_set_step(10);
 8004f84:	6023      	str	r3, [r4, #0]
    test_assert(chHeapStatus(&test_heap, &n, NULL) == 1, "heap fragmented");
 8004f86:	f7ff fdd3 	bl	8004b30 <chHeapStatus>
 8004f8a:	1e42      	subs	r2, r0, #1
 8004f8c:	4250      	negs	r0, r2
 8004f8e:	4150      	adcs	r0, r2
 8004f90:	490a      	ldr	r1, [pc, #40]	; (8004fbc <oslib_test_003_001_execute+0x30c>)
 8004f92:	f7fb fc35 	bl	8000800 <_test_assert>
 8004f96:	2800      	cmp	r0, #0
 8004f98:	f47f ae9e 	bne.w	8004cd8 <oslib_test_003_001_execute+0x28>
    test_assert(n == sz, "size changed");
 8004f9c:	e9dd 3000 	ldrd	r3, r0, [sp]
 8004fa0:	1ac3      	subs	r3, r0, r3
 8004fa2:	4258      	negs	r0, r3
 8004fa4:	490c      	ldr	r1, [pc, #48]	; (8004fd8 <oslib_test_003_001_execute+0x328>)
 8004fa6:	4158      	adcs	r0, r3
 8004fa8:	f7fb fc2a 	bl	8000800 <_test_assert>
 8004fac:	e694      	b.n	8004cd8 <oslib_test_003_001_execute+0x28>
    test_assert((chHeapStatus(&test_heap, &n, NULL) == 1) ||
 8004fae:	2001      	movs	r0, #1
 8004fb0:	e769      	b.n	8004e86 <oslib_test_003_001_execute+0x1d6>
 8004fb2:	bf00      	nop
 8004fb4:	20001254 	.word	0x20001254
 8004fb8:	200011b4 	.word	0x200011b4
 8004fbc:	080078b8 	.word	0x080078b8
 8004fc0:	08007938 	.word	0x08007938
 8004fc4:	08007924 	.word	0x08007924
 8004fc8:	080078c8 	.word	0x080078c8
 8004fcc:	080078dc 	.word	0x080078dc
 8004fd0:	080078f4 	.word	0x080078f4
 8004fd4:	0800776c 	.word	0x0800776c
 8004fd8:	08007904 	.word	0x08007904
 8004fdc:	00000000 	.word	0x00000000

08004fe0 <dyn_release_object_heap.part.3>:
  dyn_element_t *prev = (dyn_element_t *)dlp;
 8004fe0:	460a      	mov	r2, r1
 8004fe2:	e002      	b.n	8004fea <dyn_release_object_heap.part.3+0xa>
    if (prev->next == element) {
 8004fe4:	4298      	cmp	r0, r3
 8004fe6:	d006      	beq.n	8004ff6 <dyn_release_object_heap.part.3+0x16>
 8004fe8:	461a      	mov	r2, r3
  while (prev->next != (dyn_element_t *)dlp) {
 8004fea:	6813      	ldr	r3, [r2, #0]
 8004fec:	428b      	cmp	r3, r1
 8004fee:	d1f9      	bne.n	8004fe4 <dyn_release_object_heap.part.3+0x4>
  return NULL;
 8004ff0:	2000      	movs	r0, #0
    chHeapFree((void *)dep);
 8004ff2:	f7ff bdd5 	b.w	8004ba0 <chHeapFree>
      prev->next = element->next;
 8004ff6:	6803      	ldr	r3, [r0, #0]
 8004ff8:	6013      	str	r3, [r2, #0]
    chHeapFree((void *)dep);
 8004ffa:	f7ff bdd1 	b.w	8004ba0 <chHeapFree>
 8004ffe:	bf00      	nop

08005000 <chFactoryReleaseObjectsFIFO>:
 *
 * @param[in] dofp      dynamic "objects FIFO" object reference
 *
 * @api
 */
void chFactoryReleaseObjectsFIFO(dyn_objects_fifo_t *dofp) {
 8005000:	b510      	push	{r4, lr}
 8005002:	4604      	mov	r4, r0

  F_LOCK();
 8005004:	4807      	ldr	r0, [pc, #28]	; (8005024 <chFactoryReleaseObjectsFIFO+0x24>)
 8005006:	f7fd fcc3 	bl	8002990 <chMtxLock>
  dep->refs--;
 800500a:	6863      	ldr	r3, [r4, #4]
 800500c:	3b01      	subs	r3, #1
 800500e:	6063      	str	r3, [r4, #4]
  if (dep->refs == (ucnt_t)0) {
 8005010:	b91b      	cbnz	r3, 800501a <chFactoryReleaseObjectsFIFO+0x1a>
 8005012:	4620      	mov	r0, r4
 8005014:	4904      	ldr	r1, [pc, #16]	; (8005028 <chFactoryReleaseObjectsFIFO+0x28>)
 8005016:	f7ff ffe3 	bl	8004fe0 <dyn_release_object_heap.part.3>

  dyn_release_object_heap(&dofp->element, &ch_factory.fifo_list);

  F_UNLOCK();
 800501a:	4802      	ldr	r0, [pc, #8]	; (8005024 <chFactoryReleaseObjectsFIFO+0x24>)
}
 800501c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  F_UNLOCK();
 8005020:	f7fe befe 	b.w	8003e20 <chMtxUnlock>
 8005024:	20000968 	.word	0x20000968
 8005028:	200009a8 	.word	0x200009a8
 800502c:	00000000 	.word	0x00000000

08005030 <oslib_test_004_005_execute>:
      chFactoryReleaseObjectsFIFO(dofp);
    }
  }
}

static void oslib_test_004_005_execute(void) {
 8005030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  dyn_objects_fifo_t *dofp;

  /* [4.5.1] Retrieving a dynamic objects FIFO by name, must not
     exist.*/
  test_set_step(1);
 8005032:	4c42      	ldr	r4, [pc, #264]	; (800513c <oslib_test_004_005_execute+0x10c>)
 8005034:	2501      	movs	r5, #1
 8005036:	6025      	str	r5, [r4, #0]
  {
    dofp = chFactoryFindObjectsFIFO("myfifo");
 8005038:	f7ff f932 	bl	80042a0 <chFactoryFindObjectsFIFO.constprop.3>
    test_assert(dofp == NULL, "found");
 800503c:	fab0 f080 	clz	r0, r0
 8005040:	0940      	lsrs	r0, r0, #5
 8005042:	493f      	ldr	r1, [pc, #252]	; (8005140 <oslib_test_004_005_execute+0x110>)
 8005044:	f7fb fbdc 	bl	8000800 <_test_assert>
 8005048:	b100      	cbz	r0, 800504c <oslib_test_004_005_execute+0x1c>
  test_set_step(6);
  {
    dofp = chFactoryFindObjectsFIFO("myfifo");
    test_assert(dofp == NULL, "found");
  }
}
 800504a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  test_set_step(2);
 800504c:	2302      	movs	r3, #2
 800504e:	6023      	str	r3, [r4, #0]
    dofp = chFactoryCreateObjectsFIFO("myfifo", 16U, 16U, PORT_NATURAL_ALIGN);
 8005050:	f7ff f8d6 	bl	8004200 <chFactoryCreateObjectsFIFO.constprop.4>
    test_assert(dofp != NULL, "cannot create");
 8005054:	4606      	mov	r6, r0
 8005056:	3000      	adds	r0, #0
 8005058:	bf18      	it	ne
 800505a:	2001      	movne	r0, #1
 800505c:	4939      	ldr	r1, [pc, #228]	; (8005144 <oslib_test_004_005_execute+0x114>)
 800505e:	f7fb fbcf 	bl	8000800 <_test_assert>
 8005062:	2800      	cmp	r0, #0
 8005064:	d1f1      	bne.n	800504a <oslib_test_004_005_execute+0x1a>
  test_set_step(3);
 8005066:	2303      	movs	r3, #3
 8005068:	6023      	str	r3, [r4, #0]
    dofp1 = chFactoryCreateObjectsFIFO("myfifo", 16U, 16U, PORT_NATURAL_ALIGN);
 800506a:	f7ff f8c9 	bl	8004200 <chFactoryCreateObjectsFIFO.constprop.4>
    test_assert(dofp1 == NULL, "can create");
 800506e:	fab0 f080 	clz	r0, r0
 8005072:	0940      	lsrs	r0, r0, #5
 8005074:	4934      	ldr	r1, [pc, #208]	; (8005148 <oslib_test_004_005_execute+0x118>)
 8005076:	f7fb fbc3 	bl	8000800 <_test_assert>
 800507a:	2800      	cmp	r0, #0
 800507c:	d1e5      	bne.n	800504a <oslib_test_004_005_execute+0x1a>
  test_set_step(4);
 800507e:	2304      	movs	r3, #4
 8005080:	6023      	str	r3, [r4, #0]
    dofp1 = chFactoryFindObjectsFIFO("myfifo");
 8005082:	f7ff f90d 	bl	80042a0 <chFactoryFindObjectsFIFO.constprop.3>
    test_assert(dofp1 != NULL, "not found");
 8005086:	4607      	mov	r7, r0
 8005088:	3000      	adds	r0, #0
 800508a:	bf18      	it	ne
 800508c:	2001      	movne	r0, #1
 800508e:	492f      	ldr	r1, [pc, #188]	; (800514c <oslib_test_004_005_execute+0x11c>)
 8005090:	f7fb fbb6 	bl	8000800 <_test_assert>
 8005094:	2800      	cmp	r0, #0
 8005096:	d1d8      	bne.n	800504a <oslib_test_004_005_execute+0x1a>
    test_assert(dofp == dofp1, "object reference mismatch");
 8005098:	1bf0      	subs	r0, r6, r7
 800509a:	fab0 f080 	clz	r0, r0
 800509e:	492c      	ldr	r1, [pc, #176]	; (8005150 <oslib_test_004_005_execute+0x120>)
 80050a0:	0940      	lsrs	r0, r0, #5
 80050a2:	f7fb fbad 	bl	8000800 <_test_assert>
 80050a6:	2800      	cmp	r0, #0
 80050a8:	d1cf      	bne.n	800504a <oslib_test_004_005_execute+0x1a>
    test_assert(dofp1->element.refs == 2, "object reference mismatch");
 80050aa:	6878      	ldr	r0, [r7, #4]
 80050ac:	4928      	ldr	r1, [pc, #160]	; (8005150 <oslib_test_004_005_execute+0x120>)
 80050ae:	f1a0 0002 	sub.w	r0, r0, #2
 80050b2:	fab0 f080 	clz	r0, r0
 80050b6:	0940      	lsrs	r0, r0, #5
 80050b8:	f7fb fba2 	bl	8000800 <_test_assert>
 80050bc:	2800      	cmp	r0, #0
 80050be:	d1c4      	bne.n	800504a <oslib_test_004_005_execute+0x1a>
 80050c0:	687b      	ldr	r3, [r7, #4]
    test_assert(dofp1 == dofp2, "object reference mismatch");
 80050c2:	4923      	ldr	r1, [pc, #140]	; (8005150 <oslib_test_004_005_execute+0x120>)
 80050c4:	442b      	add	r3, r5
 80050c6:	4628      	mov	r0, r5
 80050c8:	607b      	str	r3, [r7, #4]
 80050ca:	f7fb fb99 	bl	8000800 <_test_assert>
 80050ce:	2800      	cmp	r0, #0
 80050d0:	d1bb      	bne.n	800504a <oslib_test_004_005_execute+0x1a>
    test_assert(dofp2->element.refs == 3, "object reference mismatch");
 80050d2:	6878      	ldr	r0, [r7, #4]
 80050d4:	491e      	ldr	r1, [pc, #120]	; (8005150 <oslib_test_004_005_execute+0x120>)
 80050d6:	f1a0 0c03 	sub.w	ip, r0, #3
 80050da:	f1dc 0000 	rsbs	r0, ip, #0
 80050de:	eb40 000c 	adc.w	r0, r0, ip
 80050e2:	f7fb fb8d 	bl	8000800 <_test_assert>
 80050e6:	2800      	cmp	r0, #0
 80050e8:	d1af      	bne.n	800504a <oslib_test_004_005_execute+0x1a>
    chFactoryReleaseObjectsFIFO(dofp2);
 80050ea:	4638      	mov	r0, r7
 80050ec:	f7ff ff88 	bl	8005000 <chFactoryReleaseObjectsFIFO>
    test_assert(dofp1->element.refs == 2, "references mismatch");
 80050f0:	6878      	ldr	r0, [r7, #4]
 80050f2:	4918      	ldr	r1, [pc, #96]	; (8005154 <oslib_test_004_005_execute+0x124>)
 80050f4:	1e82      	subs	r2, r0, #2
 80050f6:	4250      	negs	r0, r2
 80050f8:	4150      	adcs	r0, r2
 80050fa:	f7fb fb81 	bl	8000800 <_test_assert>
 80050fe:	2800      	cmp	r0, #0
 8005100:	d1a3      	bne.n	800504a <oslib_test_004_005_execute+0x1a>
    chFactoryReleaseObjectsFIFO(dofp1);
 8005102:	4638      	mov	r0, r7
 8005104:	f7ff ff7c 	bl	8005000 <chFactoryReleaseObjectsFIFO>
    test_assert(dofp->element.refs == 1, "references mismatch");
 8005108:	6870      	ldr	r0, [r6, #4]
 800510a:	4912      	ldr	r1, [pc, #72]	; (8005154 <oslib_test_004_005_execute+0x124>)
 800510c:	1b43      	subs	r3, r0, r5
 800510e:	4258      	negs	r0, r3
 8005110:	4158      	adcs	r0, r3
 8005112:	f7fb fb75 	bl	8000800 <_test_assert>
 8005116:	2800      	cmp	r0, #0
 8005118:	d197      	bne.n	800504a <oslib_test_004_005_execute+0x1a>
    chFactoryReleaseObjectsFIFO(dofp);
 800511a:	4630      	mov	r0, r6
  test_set_step(5);
 800511c:	2305      	movs	r3, #5
 800511e:	6023      	str	r3, [r4, #0]
    chFactoryReleaseObjectsFIFO(dofp);
 8005120:	f7ff ff6e 	bl	8005000 <chFactoryReleaseObjectsFIFO>
  test_set_step(6);
 8005124:	2306      	movs	r3, #6
 8005126:	6023      	str	r3, [r4, #0]
    dofp = chFactoryFindObjectsFIFO("myfifo");
 8005128:	f7ff f8ba 	bl	80042a0 <chFactoryFindObjectsFIFO.constprop.3>
    test_assert(dofp == NULL, "found");
 800512c:	fab0 f080 	clz	r0, r0
 8005130:	0940      	lsrs	r0, r0, #5
 8005132:	4903      	ldr	r1, [pc, #12]	; (8005140 <oslib_test_004_005_execute+0x110>)
}
 8005134:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    test_assert(dofp == NULL, "found");
 8005138:	f7fb bb62 	b.w	8000800 <_test_assert>
 800513c:	20001254 	.word	0x20001254
 8005140:	080079d0 	.word	0x080079d0
 8005144:	080079b0 	.word	0x080079b0
 8005148:	080079c0 	.word	0x080079c0
 800514c:	080079cc 	.word	0x080079cc
 8005150:	080079d8 	.word	0x080079d8
 8005154:	080079f4 	.word	0x080079f4
	...

08005160 <oslib_test_004_005_teardown>:
static void oslib_test_004_005_teardown(void) {
 8005160:	b510      	push	{r4, lr}
  dofp = chFactoryFindObjectsFIFO("myfifo");
 8005162:	f7ff f89d 	bl	80042a0 <chFactoryFindObjectsFIFO.constprop.3>
  if (dofp != NULL) {
 8005166:	b140      	cbz	r0, 800517a <oslib_test_004_005_teardown+0x1a>
    while (dofp->element.refs > 0U) {
 8005168:	6843      	ldr	r3, [r0, #4]
 800516a:	4604      	mov	r4, r0
 800516c:	b12b      	cbz	r3, 800517a <oslib_test_004_005_teardown+0x1a>
      chFactoryReleaseObjectsFIFO(dofp);
 800516e:	4620      	mov	r0, r4
 8005170:	f7ff ff46 	bl	8005000 <chFactoryReleaseObjectsFIFO>
    while (dofp->element.refs > 0U) {
 8005174:	6863      	ldr	r3, [r4, #4]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d1f9      	bne.n	800516e <oslib_test_004_005_teardown+0xe>
}
 800517a:	bd10      	pop	{r4, pc}
 800517c:	0000      	movs	r0, r0
	...

08005180 <chFactoryReleaseMailbox>:
void chFactoryReleaseMailbox(dyn_mailbox_t *dmp) {
 8005180:	b510      	push	{r4, lr}
 8005182:	4604      	mov	r4, r0
  F_LOCK();
 8005184:	4807      	ldr	r0, [pc, #28]	; (80051a4 <chFactoryReleaseMailbox+0x24>)
 8005186:	f7fd fc03 	bl	8002990 <chMtxLock>
  dep->refs--;
 800518a:	6863      	ldr	r3, [r4, #4]
 800518c:	3b01      	subs	r3, #1
 800518e:	6063      	str	r3, [r4, #4]
  if (dep->refs == (ucnt_t)0) {
 8005190:	b91b      	cbnz	r3, 800519a <chFactoryReleaseMailbox+0x1a>
 8005192:	4620      	mov	r0, r4
 8005194:	4904      	ldr	r1, [pc, #16]	; (80051a8 <chFactoryReleaseMailbox+0x28>)
 8005196:	f7ff ff23 	bl	8004fe0 <dyn_release_object_heap.part.3>
  F_UNLOCK();
 800519a:	4802      	ldr	r0, [pc, #8]	; (80051a4 <chFactoryReleaseMailbox+0x24>)
}
 800519c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  F_UNLOCK();
 80051a0:	f7fe be3e 	b.w	8003e20 <chMtxUnlock>
 80051a4:	20000968 	.word	0x20000968
 80051a8:	200009a4 	.word	0x200009a4
 80051ac:	00000000 	.word	0x00000000

080051b0 <oslib_test_004_004_execute>:
static void oslib_test_004_004_execute(void) {
 80051b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  test_set_step(1);
 80051b2:	4c42      	ldr	r4, [pc, #264]	; (80052bc <oslib_test_004_004_execute+0x10c>)
 80051b4:	2501      	movs	r5, #1
 80051b6:	6025      	str	r5, [r4, #0]
    dmp = chFactoryFindMailbox("mymbx");
 80051b8:	f7ff f80a 	bl	80041d0 <chFactoryFindMailbox.constprop.5>
    test_assert(dmp == NULL, "found");
 80051bc:	fab0 f080 	clz	r0, r0
 80051c0:	0940      	lsrs	r0, r0, #5
 80051c2:	493f      	ldr	r1, [pc, #252]	; (80052c0 <oslib_test_004_004_execute+0x110>)
 80051c4:	f7fb fb1c 	bl	8000800 <_test_assert>
 80051c8:	b100      	cbz	r0, 80051cc <oslib_test_004_004_execute+0x1c>
}
 80051ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  test_set_step(2);
 80051cc:	2302      	movs	r3, #2
 80051ce:	6023      	str	r3, [r4, #0]
    dmp = chFactoryCreateMailbox("mymbx", 16U);
 80051d0:	f7fe ffce 	bl	8004170 <chFactoryCreateMailbox.constprop.6>
    test_assert(dmp != NULL, "cannot create");
 80051d4:	4606      	mov	r6, r0
 80051d6:	3000      	adds	r0, #0
 80051d8:	bf18      	it	ne
 80051da:	2001      	movne	r0, #1
 80051dc:	4939      	ldr	r1, [pc, #228]	; (80052c4 <oslib_test_004_004_execute+0x114>)
 80051de:	f7fb fb0f 	bl	8000800 <_test_assert>
 80051e2:	2800      	cmp	r0, #0
 80051e4:	d1f1      	bne.n	80051ca <oslib_test_004_004_execute+0x1a>
  test_set_step(3);
 80051e6:	2303      	movs	r3, #3
 80051e8:	6023      	str	r3, [r4, #0]
    dmp1 = chFactoryCreateMailbox("mymbx", 16U);
 80051ea:	f7fe ffc1 	bl	8004170 <chFactoryCreateMailbox.constprop.6>
    test_assert(dmp1 == NULL, "can create");
 80051ee:	fab0 f080 	clz	r0, r0
 80051f2:	0940      	lsrs	r0, r0, #5
 80051f4:	4934      	ldr	r1, [pc, #208]	; (80052c8 <oslib_test_004_004_execute+0x118>)
 80051f6:	f7fb fb03 	bl	8000800 <_test_assert>
 80051fa:	2800      	cmp	r0, #0
 80051fc:	d1e5      	bne.n	80051ca <oslib_test_004_004_execute+0x1a>
  test_set_step(4);
 80051fe:	2304      	movs	r3, #4
 8005200:	6023      	str	r3, [r4, #0]
    dmp1 = chFactoryFindMailbox("mymbx");
 8005202:	f7fe ffe5 	bl	80041d0 <chFactoryFindMailbox.constprop.5>
    test_assert(dmp1 != NULL, "not found");
 8005206:	4607      	mov	r7, r0
 8005208:	3000      	adds	r0, #0
 800520a:	bf18      	it	ne
 800520c:	2001      	movne	r0, #1
 800520e:	492f      	ldr	r1, [pc, #188]	; (80052cc <oslib_test_004_004_execute+0x11c>)
 8005210:	f7fb faf6 	bl	8000800 <_test_assert>
 8005214:	2800      	cmp	r0, #0
 8005216:	d1d8      	bne.n	80051ca <oslib_test_004_004_execute+0x1a>
    test_assert(dmp == dmp1, "object reference mismatch");
 8005218:	1bf0      	subs	r0, r6, r7
 800521a:	fab0 f080 	clz	r0, r0
 800521e:	492c      	ldr	r1, [pc, #176]	; (80052d0 <oslib_test_004_004_execute+0x120>)
 8005220:	0940      	lsrs	r0, r0, #5
 8005222:	f7fb faed 	bl	8000800 <_test_assert>
 8005226:	2800      	cmp	r0, #0
 8005228:	d1cf      	bne.n	80051ca <oslib_test_004_004_execute+0x1a>
    test_assert(dmp1->element.refs == 2, "object reference mismatch");
 800522a:	6878      	ldr	r0, [r7, #4]
 800522c:	4928      	ldr	r1, [pc, #160]	; (80052d0 <oslib_test_004_004_execute+0x120>)
 800522e:	f1a0 0002 	sub.w	r0, r0, #2
 8005232:	fab0 f080 	clz	r0, r0
 8005236:	0940      	lsrs	r0, r0, #5
 8005238:	f7fb fae2 	bl	8000800 <_test_assert>
 800523c:	2800      	cmp	r0, #0
 800523e:	d1c4      	bne.n	80051ca <oslib_test_004_004_execute+0x1a>
 8005240:	687b      	ldr	r3, [r7, #4]
    test_assert(dmp1 == dmp2, "object reference mismatch");
 8005242:	4923      	ldr	r1, [pc, #140]	; (80052d0 <oslib_test_004_004_execute+0x120>)
 8005244:	442b      	add	r3, r5
 8005246:	4628      	mov	r0, r5
 8005248:	607b      	str	r3, [r7, #4]
 800524a:	f7fb fad9 	bl	8000800 <_test_assert>
 800524e:	2800      	cmp	r0, #0
 8005250:	d1bb      	bne.n	80051ca <oslib_test_004_004_execute+0x1a>
    test_assert(dmp2->element.refs == 3, "object reference mismatch");
 8005252:	6878      	ldr	r0, [r7, #4]
 8005254:	491e      	ldr	r1, [pc, #120]	; (80052d0 <oslib_test_004_004_execute+0x120>)
 8005256:	f1a0 0c03 	sub.w	ip, r0, #3
 800525a:	f1dc 0000 	rsbs	r0, ip, #0
 800525e:	eb40 000c 	adc.w	r0, r0, ip
 8005262:	f7fb facd 	bl	8000800 <_test_assert>
 8005266:	2800      	cmp	r0, #0
 8005268:	d1af      	bne.n	80051ca <oslib_test_004_004_execute+0x1a>
    chFactoryReleaseMailbox(dmp2);
 800526a:	4638      	mov	r0, r7
 800526c:	f7ff ff88 	bl	8005180 <chFactoryReleaseMailbox>
    test_assert(dmp1->element.refs == 2, "references mismatch");
 8005270:	6878      	ldr	r0, [r7, #4]
 8005272:	4918      	ldr	r1, [pc, #96]	; (80052d4 <oslib_test_004_004_execute+0x124>)
 8005274:	1e82      	subs	r2, r0, #2
 8005276:	4250      	negs	r0, r2
 8005278:	4150      	adcs	r0, r2
 800527a:	f7fb fac1 	bl	8000800 <_test_assert>
 800527e:	2800      	cmp	r0, #0
 8005280:	d1a3      	bne.n	80051ca <oslib_test_004_004_execute+0x1a>
    chFactoryReleaseMailbox(dmp1);
 8005282:	4638      	mov	r0, r7
 8005284:	f7ff ff7c 	bl	8005180 <chFactoryReleaseMailbox>
    test_assert(dmp->element.refs == 1, "references mismatch");
 8005288:	6870      	ldr	r0, [r6, #4]
 800528a:	4912      	ldr	r1, [pc, #72]	; (80052d4 <oslib_test_004_004_execute+0x124>)
 800528c:	1b43      	subs	r3, r0, r5
 800528e:	4258      	negs	r0, r3
 8005290:	4158      	adcs	r0, r3
 8005292:	f7fb fab5 	bl	8000800 <_test_assert>
 8005296:	2800      	cmp	r0, #0
 8005298:	d197      	bne.n	80051ca <oslib_test_004_004_execute+0x1a>
    chFactoryReleaseMailbox(dmp);
 800529a:	4630      	mov	r0, r6
  test_set_step(5);
 800529c:	2305      	movs	r3, #5
 800529e:	6023      	str	r3, [r4, #0]
    chFactoryReleaseMailbox(dmp);
 80052a0:	f7ff ff6e 	bl	8005180 <chFactoryReleaseMailbox>
  test_set_step(6);
 80052a4:	2306      	movs	r3, #6
 80052a6:	6023      	str	r3, [r4, #0]
    dmp = chFactoryFindMailbox("mymbx");
 80052a8:	f7fe ff92 	bl	80041d0 <chFactoryFindMailbox.constprop.5>
    test_assert(dmp == NULL, "found");
 80052ac:	fab0 f080 	clz	r0, r0
 80052b0:	0940      	lsrs	r0, r0, #5
 80052b2:	4903      	ldr	r1, [pc, #12]	; (80052c0 <oslib_test_004_004_execute+0x110>)
}
 80052b4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    test_assert(dmp == NULL, "found");
 80052b8:	f7fb baa2 	b.w	8000800 <_test_assert>
 80052bc:	20001254 	.word	0x20001254
 80052c0:	080079d0 	.word	0x080079d0
 80052c4:	080079b0 	.word	0x080079b0
 80052c8:	080079c0 	.word	0x080079c0
 80052cc:	080079cc 	.word	0x080079cc
 80052d0:	080079d8 	.word	0x080079d8
 80052d4:	080079f4 	.word	0x080079f4
	...

080052e0 <oslib_test_004_004_teardown>:
static void oslib_test_004_004_teardown(void) {
 80052e0:	b510      	push	{r4, lr}
  dmp = chFactoryFindMailbox("mymbx");
 80052e2:	f7fe ff75 	bl	80041d0 <chFactoryFindMailbox.constprop.5>
  if (dmp != NULL) {
 80052e6:	b140      	cbz	r0, 80052fa <oslib_test_004_004_teardown+0x1a>
    while (dmp->element.refs > 0U) {
 80052e8:	6843      	ldr	r3, [r0, #4]
 80052ea:	4604      	mov	r4, r0
 80052ec:	b12b      	cbz	r3, 80052fa <oslib_test_004_004_teardown+0x1a>
      chFactoryReleaseMailbox(dmp);
 80052ee:	4620      	mov	r0, r4
 80052f0:	f7ff ff46 	bl	8005180 <chFactoryReleaseMailbox>
    while (dmp->element.refs > 0U) {
 80052f4:	6863      	ldr	r3, [r4, #4]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d1f9      	bne.n	80052ee <oslib_test_004_004_teardown+0xe>
}
 80052fa:	bd10      	pop	{r4, pc}
 80052fc:	0000      	movs	r0, r0
	...

08005300 <chFactoryReleaseBuffer>:
void chFactoryReleaseBuffer(dyn_buffer_t *dbp) {
 8005300:	b510      	push	{r4, lr}
 8005302:	4604      	mov	r4, r0
  F_LOCK();
 8005304:	4807      	ldr	r0, [pc, #28]	; (8005324 <chFactoryReleaseBuffer+0x24>)
 8005306:	f7fd fb43 	bl	8002990 <chMtxLock>
  dep->refs--;
 800530a:	6863      	ldr	r3, [r4, #4]
 800530c:	3b01      	subs	r3, #1
 800530e:	6063      	str	r3, [r4, #4]
  if (dep->refs == (ucnt_t)0) {
 8005310:	b91b      	cbnz	r3, 800531a <chFactoryReleaseBuffer+0x1a>
 8005312:	4620      	mov	r0, r4
 8005314:	4904      	ldr	r1, [pc, #16]	; (8005328 <chFactoryReleaseBuffer+0x28>)
 8005316:	f7ff fe63 	bl	8004fe0 <dyn_release_object_heap.part.3>
  F_UNLOCK();
 800531a:	4802      	ldr	r0, [pc, #8]	; (8005324 <chFactoryReleaseBuffer+0x24>)
}
 800531c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  F_UNLOCK();
 8005320:	f7fe bd7e 	b.w	8003e20 <chMtxUnlock>
 8005324:	20000968 	.word	0x20000968
 8005328:	2000098c 	.word	0x2000098c
 800532c:	00000000 	.word	0x00000000

08005330 <oslib_test_004_002_execute>:
static void oslib_test_004_002_execute(void) {
 8005330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  test_set_step(1);
 8005332:	4c42      	ldr	r4, [pc, #264]	; (800543c <oslib_test_004_002_execute+0x10c>)
 8005334:	2501      	movs	r5, #1
 8005336:	6025      	str	r5, [r4, #0]
    dbp = chFactoryFindBuffer("mybuf");
 8005338:	f7fe feca 	bl	80040d0 <chFactoryFindBuffer.constprop.9>
    test_assert(dbp == NULL, "found");
 800533c:	fab0 f080 	clz	r0, r0
 8005340:	0940      	lsrs	r0, r0, #5
 8005342:	493f      	ldr	r1, [pc, #252]	; (8005440 <oslib_test_004_002_execute+0x110>)
 8005344:	f7fb fa5c 	bl	8000800 <_test_assert>
 8005348:	b100      	cbz	r0, 800534c <oslib_test_004_002_execute+0x1c>
}
 800534a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  test_set_step(2);
 800534c:	2302      	movs	r3, #2
 800534e:	6023      	str	r3, [r4, #0]
    dbp = chFactoryCreateBuffer("mybuf", 128U);
 8005350:	f7fe fe9e 	bl	8004090 <chFactoryCreateBuffer.constprop.10>
    test_assert(dbp != NULL, "cannot create");
 8005354:	4606      	mov	r6, r0
 8005356:	3000      	adds	r0, #0
 8005358:	bf18      	it	ne
 800535a:	2001      	movne	r0, #1
 800535c:	4939      	ldr	r1, [pc, #228]	; (8005444 <oslib_test_004_002_execute+0x114>)
 800535e:	f7fb fa4f 	bl	8000800 <_test_assert>
 8005362:	2800      	cmp	r0, #0
 8005364:	d1f1      	bne.n	800534a <oslib_test_004_002_execute+0x1a>
  test_set_step(3);
 8005366:	2303      	movs	r3, #3
 8005368:	6023      	str	r3, [r4, #0]
    dbp1 = chFactoryCreateBuffer("mybuf", 128U);
 800536a:	f7fe fe91 	bl	8004090 <chFactoryCreateBuffer.constprop.10>
    test_assert(dbp1 == NULL, "can create");
 800536e:	fab0 f080 	clz	r0, r0
 8005372:	0940      	lsrs	r0, r0, #5
 8005374:	4934      	ldr	r1, [pc, #208]	; (8005448 <oslib_test_004_002_execute+0x118>)
 8005376:	f7fb fa43 	bl	8000800 <_test_assert>
 800537a:	2800      	cmp	r0, #0
 800537c:	d1e5      	bne.n	800534a <oslib_test_004_002_execute+0x1a>
  test_set_step(4);
 800537e:	2304      	movs	r3, #4
 8005380:	6023      	str	r3, [r4, #0]
    dbp1 = chFactoryFindBuffer("mybuf");
 8005382:	f7fe fea5 	bl	80040d0 <chFactoryFindBuffer.constprop.9>
    test_assert(dbp1 != NULL, "not found");
 8005386:	4607      	mov	r7, r0
 8005388:	3000      	adds	r0, #0
 800538a:	bf18      	it	ne
 800538c:	2001      	movne	r0, #1
 800538e:	492f      	ldr	r1, [pc, #188]	; (800544c <oslib_test_004_002_execute+0x11c>)
 8005390:	f7fb fa36 	bl	8000800 <_test_assert>
 8005394:	2800      	cmp	r0, #0
 8005396:	d1d8      	bne.n	800534a <oslib_test_004_002_execute+0x1a>
    test_assert(dbp == dbp1, "object reference mismatch");
 8005398:	1bf0      	subs	r0, r6, r7
 800539a:	fab0 f080 	clz	r0, r0
 800539e:	492c      	ldr	r1, [pc, #176]	; (8005450 <oslib_test_004_002_execute+0x120>)
 80053a0:	0940      	lsrs	r0, r0, #5
 80053a2:	f7fb fa2d 	bl	8000800 <_test_assert>
 80053a6:	2800      	cmp	r0, #0
 80053a8:	d1cf      	bne.n	800534a <oslib_test_004_002_execute+0x1a>
    test_assert(dbp1->element.refs == 2, "object reference mismatch");
 80053aa:	6878      	ldr	r0, [r7, #4]
 80053ac:	4928      	ldr	r1, [pc, #160]	; (8005450 <oslib_test_004_002_execute+0x120>)
 80053ae:	f1a0 0002 	sub.w	r0, r0, #2
 80053b2:	fab0 f080 	clz	r0, r0
 80053b6:	0940      	lsrs	r0, r0, #5
 80053b8:	f7fb fa22 	bl	8000800 <_test_assert>
 80053bc:	2800      	cmp	r0, #0
 80053be:	d1c4      	bne.n	800534a <oslib_test_004_002_execute+0x1a>
 80053c0:	687b      	ldr	r3, [r7, #4]
    test_assert(dbp1 == dbp2, "object reference mismatch");
 80053c2:	4923      	ldr	r1, [pc, #140]	; (8005450 <oslib_test_004_002_execute+0x120>)
 80053c4:	442b      	add	r3, r5
 80053c6:	4628      	mov	r0, r5
 80053c8:	607b      	str	r3, [r7, #4]
 80053ca:	f7fb fa19 	bl	8000800 <_test_assert>
 80053ce:	2800      	cmp	r0, #0
 80053d0:	d1bb      	bne.n	800534a <oslib_test_004_002_execute+0x1a>
    test_assert(dbp2->element.refs == 3, "object reference mismatch");
 80053d2:	6878      	ldr	r0, [r7, #4]
 80053d4:	491e      	ldr	r1, [pc, #120]	; (8005450 <oslib_test_004_002_execute+0x120>)
 80053d6:	f1a0 0c03 	sub.w	ip, r0, #3
 80053da:	f1dc 0000 	rsbs	r0, ip, #0
 80053de:	eb40 000c 	adc.w	r0, r0, ip
 80053e2:	f7fb fa0d 	bl	8000800 <_test_assert>
 80053e6:	2800      	cmp	r0, #0
 80053e8:	d1af      	bne.n	800534a <oslib_test_004_002_execute+0x1a>
    chFactoryReleaseBuffer(dbp2);
 80053ea:	4638      	mov	r0, r7
 80053ec:	f7ff ff88 	bl	8005300 <chFactoryReleaseBuffer>
    test_assert(dbp1->element.refs == 2, "references mismatch");
 80053f0:	6878      	ldr	r0, [r7, #4]
 80053f2:	4918      	ldr	r1, [pc, #96]	; (8005454 <oslib_test_004_002_execute+0x124>)
 80053f4:	1e82      	subs	r2, r0, #2
 80053f6:	4250      	negs	r0, r2
 80053f8:	4150      	adcs	r0, r2
 80053fa:	f7fb fa01 	bl	8000800 <_test_assert>
 80053fe:	2800      	cmp	r0, #0
 8005400:	d1a3      	bne.n	800534a <oslib_test_004_002_execute+0x1a>
    chFactoryReleaseBuffer(dbp1);
 8005402:	4638      	mov	r0, r7
 8005404:	f7ff ff7c 	bl	8005300 <chFactoryReleaseBuffer>
    test_assert(dbp->element.refs == 1, "references mismatch");
 8005408:	6870      	ldr	r0, [r6, #4]
 800540a:	4912      	ldr	r1, [pc, #72]	; (8005454 <oslib_test_004_002_execute+0x124>)
 800540c:	1b43      	subs	r3, r0, r5
 800540e:	4258      	negs	r0, r3
 8005410:	4158      	adcs	r0, r3
 8005412:	f7fb f9f5 	bl	8000800 <_test_assert>
 8005416:	2800      	cmp	r0, #0
 8005418:	d197      	bne.n	800534a <oslib_test_004_002_execute+0x1a>
    chFactoryReleaseBuffer(dbp);
 800541a:	4630      	mov	r0, r6
  test_set_step(5);
 800541c:	2305      	movs	r3, #5
 800541e:	6023      	str	r3, [r4, #0]
    chFactoryReleaseBuffer(dbp);
 8005420:	f7ff ff6e 	bl	8005300 <chFactoryReleaseBuffer>
  test_set_step(6);
 8005424:	2306      	movs	r3, #6
 8005426:	6023      	str	r3, [r4, #0]
    dbp = chFactoryFindBuffer("mybuf");
 8005428:	f7fe fe52 	bl	80040d0 <chFactoryFindBuffer.constprop.9>
    test_assert(dbp == NULL, "found");
 800542c:	fab0 f080 	clz	r0, r0
 8005430:	0940      	lsrs	r0, r0, #5
 8005432:	4903      	ldr	r1, [pc, #12]	; (8005440 <oslib_test_004_002_execute+0x110>)
}
 8005434:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    test_assert(dbp == NULL, "found");
 8005438:	f7fb b9e2 	b.w	8000800 <_test_assert>
 800543c:	20001254 	.word	0x20001254
 8005440:	080079d0 	.word	0x080079d0
 8005444:	080079b0 	.word	0x080079b0
 8005448:	080079c0 	.word	0x080079c0
 800544c:	080079cc 	.word	0x080079cc
 8005450:	080079d8 	.word	0x080079d8
 8005454:	080079f4 	.word	0x080079f4
	...

08005460 <oslib_test_004_002_teardown>:
static void oslib_test_004_002_teardown(void) {
 8005460:	b510      	push	{r4, lr}
  dbp = chFactoryFindBuffer("mybuf");
 8005462:	f7fe fe35 	bl	80040d0 <chFactoryFindBuffer.constprop.9>
  if (dbp != NULL) {
 8005466:	b140      	cbz	r0, 800547a <oslib_test_004_002_teardown+0x1a>
    while (dbp->element.refs > 0U) {
 8005468:	6843      	ldr	r3, [r0, #4]
 800546a:	4604      	mov	r4, r0
 800546c:	b12b      	cbz	r3, 800547a <oslib_test_004_002_teardown+0x1a>
      chFactoryReleaseBuffer(dbp);
 800546e:	4620      	mov	r0, r4
 8005470:	f7ff ff46 	bl	8005300 <chFactoryReleaseBuffer>
    while (dbp->element.refs > 0U) {
 8005474:	6863      	ldr	r3, [r4, #4]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d1f9      	bne.n	800546e <oslib_test_004_002_teardown+0xe>
}
 800547a:	bd10      	pop	{r4, pc}
 800547c:	0000      	movs	r0, r0
	...

08005480 <chThdRelease>:
 8005480:	2220      	movs	r2, #32
 8005482:	f382 8811 	msr	BASEPRI, r2
  tp->refs--;
 8005486:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
 800548a:	3b01      	subs	r3, #1
 800548c:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
  if ((tp->refs == (trefs_t)0) && (tp->state == CH_STATE_FINAL)) {
 8005490:	6a03      	ldr	r3, [r0, #32]
 8005492:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8005496:	2b0f      	cmp	r3, #15
 8005498:	d003      	beq.n	80054a2 <chThdRelease+0x22>
 800549a:	2300      	movs	r3, #0
 800549c:	f383 8811 	msr	BASEPRI, r3
 80054a0:	4770      	bx	lr
    REG_REMOVE(tp);
 80054a2:	e9d0 1304 	ldrd	r1, r3, [r0, #16]
void chThdRelease(thread_t *tp) {
 80054a6:	b410      	push	{r4}
    REG_REMOVE(tp);
 80054a8:	6119      	str	r1, [r3, #16]
 80054aa:	6904      	ldr	r4, [r0, #16]
 80054ac:	2100      	movs	r1, #0
 80054ae:	6163      	str	r3, [r4, #20]
 80054b0:	f381 8811 	msr	BASEPRI, r1
    switch (tp->flags & CH_FLAG_MODE_MASK) {
 80054b4:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 80054b8:	f003 0303 	and.w	r3, r3, #3
 80054bc:	2b01      	cmp	r3, #1
 80054be:	d00c      	beq.n	80054da <chThdRelease+0x5a>
 80054c0:	2b02      	cmp	r3, #2
 80054c2:	d108      	bne.n	80054d6 <chThdRelease+0x56>
      chPoolFree(tp->mpool, chThdGetWorkingAreaX(tp));
 80054c4:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80054c6:	69c0      	ldr	r0, [r0, #28]
 80054c8:	f382 8811 	msr	BASEPRI, r2
  php->next = mp->next;
 80054cc:	681a      	ldr	r2, [r3, #0]
 80054ce:	6002      	str	r2, [r0, #0]
  mp->next = php;
 80054d0:	6018      	str	r0, [r3, #0]
 80054d2:	f381 8811 	msr	BASEPRI, r1
}
 80054d6:	bc10      	pop	{r4}
 80054d8:	4770      	bx	lr
      chHeapFree(chThdGetWorkingAreaX(tp));
 80054da:	69c0      	ldr	r0, [r0, #28]
}
 80054dc:	bc10      	pop	{r4}
      chHeapFree(chThdGetWorkingAreaX(tp));
 80054de:	f7ff bb5f 	b.w	8004ba0 <chHeapFree>
 80054e2:	bf00      	nop
	...

080054f0 <rt_test_010_006_execute>:
static void rt_test_010_006_execute(void) {
 80054f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  return ch.rlist.current;
 80054f4:	4b17      	ldr	r3, [pc, #92]	; (8005554 <rt_test_010_006_execute+0x64>)
  test_set_step(1);
 80054f6:	f8df 906c 	ldr.w	r9, [pc, #108]	; 8005564 <rt_test_010_006_execute+0x74>
  return chThdGetSelfX()->prio;
 80054fa:	699b      	ldr	r3, [r3, #24]
      chThdRelease(chThdCreateStatic(wa[0], WA_SIZE, prio, bmk_thread3, NULL));
 80054fc:	f8df 8068 	ldr.w	r8, [pc, #104]	; 8005568 <rt_test_010_006_execute+0x78>
  tprio_t prio = chThdGetPriorityX() + 1;
 8005500:	689d      	ldr	r5, [r3, #8]
      chThdRelease(chThdCreateStatic(wa[0], WA_SIZE, prio, bmk_thread3, NULL));
 8005502:	4f15      	ldr	r7, [pc, #84]	; (8005558 <rt_test_010_006_execute+0x68>)
  test_set_step(1);
 8005504:	2301      	movs	r3, #1
  tprio_t prio = chThdGetPriorityX() + 1;
 8005506:	441d      	add	r5, r3
  test_set_step(1);
 8005508:	f8c9 3000 	str.w	r3, [r9]
    start = test_wait_tick();
 800550c:	f7fd f8e0 	bl	80026d0 <test_wait_tick>
    n = 0;
 8005510:	2400      	movs	r4, #0
    start = test_wait_tick();
 8005512:	4606      	mov	r6, r0
      chThdRelease(chThdCreateStatic(wa[0], WA_SIZE, prio, bmk_thread3, NULL));
 8005514:	2300      	movs	r3, #0
 8005516:	4642      	mov	r2, r8
 8005518:	4629      	mov	r1, r5
 800551a:	4638      	mov	r0, r7
 800551c:	f7fc fb80 	bl	8001c20 <chThdCreateStatic.constprop.62>
 8005520:	f7ff ffae 	bl	8005480 <chThdRelease>
 8005524:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    } while (chVTIsSystemTimeWithinX(start, end));
 8005528:	f242 720f 	movw	r2, #9999	; 0x270f
 800552c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800552e:	1b9b      	subs	r3, r3, r6
 8005530:	4293      	cmp	r3, r2
      n++;
 8005532:	f104 0401 	add.w	r4, r4, #1
    } while (chVTIsSystemTimeWithinX(start, end));
 8005536:	d9ed      	bls.n	8005514 <rt_test_010_006_execute+0x24>
  test_set_step(2);
 8005538:	2302      	movs	r3, #2
    test_print("--- Score : ");
 800553a:	4808      	ldr	r0, [pc, #32]	; (800555c <rt_test_010_006_execute+0x6c>)
  test_set_step(2);
 800553c:	f8c9 3000 	str.w	r3, [r9]
    test_print("--- Score : ");
 8005540:	f7fb fa5e 	bl	8000a00 <test_print>
    test_printn(n);
 8005544:	4620      	mov	r0, r4
 8005546:	f7fb f9eb 	bl	8000920 <test_printn>
    test_println(" threads/S");
 800554a:	4805      	ldr	r0, [pc, #20]	; (8005560 <rt_test_010_006_execute+0x70>)
}
 800554c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    test_println(" threads/S");
 8005550:	f7fb ba36 	b.w	80009c0 <test_println>
 8005554:	200008f0 	.word	0x200008f0
 8005558:	20000b40 	.word	0x20000b40
 800555c:	08008bf0 	.word	0x08008bf0
 8005560:	08008b94 	.word	0x08008b94
 8005564:	20001254 	.word	0x20001254
 8005568:	08003171 	.word	0x08003171
 800556c:	00000000 	.word	0x00000000

08005570 <chThdWait>:
msg_t chThdWait(thread_t *tp) {
 8005570:	b538      	push	{r3, r4, r5, lr}
 8005572:	4604      	mov	r4, r0
 8005574:	2320      	movs	r3, #32
 8005576:	f383 8811 	msr	BASEPRI, r3
  if (tp->state != CH_STATE_FINAL) {
 800557a:	f890 3020 	ldrb.w	r3, [r0, #32]
 800557e:	2b0f      	cmp	r3, #15
 8005580:	d007      	beq.n	8005592 <chThdWait+0x22>
    list_insert(currp, &tp->waiting);
 8005582:	4b08      	ldr	r3, [pc, #32]	; (80055a4 <chThdWait+0x34>)
  tp->queue.next = tlp->next;
 8005584:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8005586:	699b      	ldr	r3, [r3, #24]
    chSchGoSleepS(CH_STATE_WTEXIT);
 8005588:	2009      	movs	r0, #9
 800558a:	601a      	str	r2, [r3, #0]
  tlp->next = tp;
 800558c:	62a3      	str	r3, [r4, #40]	; 0x28
 800558e:	f7fc fbf7 	bl	8001d80 <chSchGoSleepS>
  msg = tp->u.exitcode;
 8005592:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8005594:	2300      	movs	r3, #0
 8005596:	f383 8811 	msr	BASEPRI, r3
  chThdRelease(tp);
 800559a:	4620      	mov	r0, r4
 800559c:	f7ff ff70 	bl	8005480 <chThdRelease>
}
 80055a0:	4628      	mov	r0, r5
 80055a2:	bd38      	pop	{r3, r4, r5, pc}
 80055a4:	200008f0 	.word	0x200008f0
	...

080055b0 <rt_test_010_005_execute>:
static void rt_test_010_005_execute(void) {
 80055b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  return ch.rlist.current;
 80055b4:	4b17      	ldr	r3, [pc, #92]	; (8005614 <rt_test_010_005_execute+0x64>)
  test_set_step(1);
 80055b6:	f8df 906c 	ldr.w	r9, [pc, #108]	; 8005624 <rt_test_010_005_execute+0x74>
  return chThdGetSelfX()->prio;
 80055ba:	699b      	ldr	r3, [r3, #24]
      chThdWait(chThdCreateStatic(wa[0], WA_SIZE, prio, bmk_thread3, NULL));
 80055bc:	f8df 8068 	ldr.w	r8, [pc, #104]	; 8005628 <rt_test_010_005_execute+0x78>
  tprio_t prio = chThdGetPriorityX() - 1;
 80055c0:	689d      	ldr	r5, [r3, #8]
      chThdWait(chThdCreateStatic(wa[0], WA_SIZE, prio, bmk_thread3, NULL));
 80055c2:	4f15      	ldr	r7, [pc, #84]	; (8005618 <rt_test_010_005_execute+0x68>)
  test_set_step(1);
 80055c4:	2301      	movs	r3, #1
 80055c6:	f8c9 3000 	str.w	r3, [r9]
    start = test_wait_tick();
 80055ca:	f7fd f881 	bl	80026d0 <test_wait_tick>
  tprio_t prio = chThdGetPriorityX() - 1;
 80055ce:	3d01      	subs	r5, #1
    n = 0;
 80055d0:	2400      	movs	r4, #0
    start = test_wait_tick();
 80055d2:	4606      	mov	r6, r0
      chThdWait(chThdCreateStatic(wa[0], WA_SIZE, prio, bmk_thread3, NULL));
 80055d4:	2300      	movs	r3, #0
 80055d6:	4642      	mov	r2, r8
 80055d8:	4629      	mov	r1, r5
 80055da:	4638      	mov	r0, r7
 80055dc:	f7fc fb20 	bl	8001c20 <chThdCreateStatic.constprop.62>
 80055e0:	f7ff ffc6 	bl	8005570 <chThdWait>
 80055e4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    } while (chVTIsSystemTimeWithinX(start, end));
 80055e8:	f242 720f 	movw	r2, #9999	; 0x270f
 80055ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ee:	1b9b      	subs	r3, r3, r6
 80055f0:	4293      	cmp	r3, r2
      n++;
 80055f2:	f104 0401 	add.w	r4, r4, #1
    } while (chVTIsSystemTimeWithinX(start, end));
 80055f6:	d9ed      	bls.n	80055d4 <rt_test_010_005_execute+0x24>
  test_set_step(2);
 80055f8:	2302      	movs	r3, #2
    test_print("--- Score : ");
 80055fa:	4808      	ldr	r0, [pc, #32]	; (800561c <rt_test_010_005_execute+0x6c>)
  test_set_step(2);
 80055fc:	f8c9 3000 	str.w	r3, [r9]
    test_print("--- Score : ");
 8005600:	f7fb f9fe 	bl	8000a00 <test_print>
    test_printn(n);
 8005604:	4620      	mov	r0, r4
 8005606:	f7fb f98b 	bl	8000920 <test_printn>
    test_println(" threads/S");
 800560a:	4805      	ldr	r0, [pc, #20]	; (8005620 <rt_test_010_005_execute+0x70>)
}
 800560c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    test_println(" threads/S");
 8005610:	f7fb b9d6 	b.w	80009c0 <test_println>
 8005614:	200008f0 	.word	0x200008f0
 8005618:	20000b40 	.word	0x20000b40
 800561c:	08008bf0 	.word	0x08008bf0
 8005620:	08008b94 	.word	0x08008b94
 8005624:	20001254 	.word	0x20001254
 8005628:	08003171 	.word	0x08003171
 800562c:	00000000 	.word	0x00000000

08005630 <test_wait_threads>:
void test_wait_threads(void) {
 8005630:	b570      	push	{r4, r5, r6, lr}
 8005632:	4c07      	ldr	r4, [pc, #28]	; (8005650 <test_wait_threads+0x20>)
      threads[i] = NULL;
 8005634:	2600      	movs	r6, #0
 8005636:	f104 0514 	add.w	r5, r4, #20
    if (threads[i] != NULL) {
 800563a:	f854 0b04 	ldr.w	r0, [r4], #4
 800563e:	b118      	cbz	r0, 8005648 <test_wait_threads+0x18>
      chThdWait(threads[i]);
 8005640:	f7ff ff96 	bl	8005570 <chThdWait>
      threads[i] = NULL;
 8005644:	f844 6c04 	str.w	r6, [r4, #-4]
  for (i = 0; i < MAX_THREADS; i++)
 8005648:	42ac      	cmp	r4, r5
 800564a:	d1f6      	bne.n	800563a <test_wait_threads+0xa>
}
 800564c:	bd70      	pop	{r4, r5, r6, pc}
 800564e:	bf00      	nop
 8005650:	2000126c 	.word	0x2000126c
	...

08005660 <rt_test_010_008_execute>:
static void rt_test_010_008_execute(void) {
 8005660:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005664:	b083      	sub	sp, #12
    n = 0;
 8005666:	ac02      	add	r4, sp, #8
  return ch.rlist.current;
 8005668:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800573c <rt_test_010_008_execute+0xdc>
  test_set_step(1);
 800566c:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 8005740 <rt_test_010_008_execute+0xe0>
    test_wait_tick();threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, bmk_thread8, (void *)&n);
 8005670:	4f2d      	ldr	r7, [pc, #180]	; (8005728 <rt_test_010_008_execute+0xc8>)
 8005672:	4e2e      	ldr	r6, [pc, #184]	; (800572c <rt_test_010_008_execute+0xcc>)
 8005674:	4d2e      	ldr	r5, [pc, #184]	; (8005730 <rt_test_010_008_execute+0xd0>)
  test_set_step(1);
 8005676:	2201      	movs	r2, #1
    n = 0;
 8005678:	2300      	movs	r3, #0
 800567a:	f844 3d04 	str.w	r3, [r4, #-4]!
  test_set_step(1);
 800567e:	f8c9 2000 	str.w	r2, [r9]
    test_wait_tick();threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, bmk_thread8, (void *)&n);
 8005682:	f7fd f825 	bl	80026d0 <test_wait_tick>
  return chThdGetSelfX()->prio;
 8005686:	f8d8 3018 	ldr.w	r3, [r8, #24]
 800568a:	6899      	ldr	r1, [r3, #8]
 800568c:	463a      	mov	r2, r7
 800568e:	4623      	mov	r3, r4
 8005690:	3901      	subs	r1, #1
 8005692:	4630      	mov	r0, r6
 8005694:	f7fc fac4 	bl	8001c20 <chThdCreateStatic.constprop.62>
 8005698:	f8d8 3018 	ldr.w	r3, [r8, #24]
 800569c:	6028      	str	r0, [r5, #0]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-1, bmk_thread8, (void *)&n);
 800569e:	6899      	ldr	r1, [r3, #8]
 80056a0:	463a      	mov	r2, r7
 80056a2:	4623      	mov	r3, r4
 80056a4:	3901      	subs	r1, #1
 80056a6:	f506 70a4 	add.w	r0, r6, #328	; 0x148
 80056aa:	f7fc fab9 	bl	8001c20 <chThdCreateStatic.constprop.62>
 80056ae:	f8d8 3018 	ldr.w	r3, [r8, #24]
 80056b2:	6068      	str	r0, [r5, #4]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-1, bmk_thread8, (void *)&n);
 80056b4:	6899      	ldr	r1, [r3, #8]
 80056b6:	463a      	mov	r2, r7
 80056b8:	4623      	mov	r3, r4
 80056ba:	3901      	subs	r1, #1
 80056bc:	f506 7024 	add.w	r0, r6, #656	; 0x290
 80056c0:	f7fc faae 	bl	8001c20 <chThdCreateStatic.constprop.62>
 80056c4:	f8d8 3018 	ldr.w	r3, [r8, #24]
 80056c8:	60a8      	str	r0, [r5, #8]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-1, bmk_thread8, (void *)&n);
 80056ca:	6899      	ldr	r1, [r3, #8]
 80056cc:	463a      	mov	r2, r7
 80056ce:	4623      	mov	r3, r4
 80056d0:	3901      	subs	r1, #1
 80056d2:	f506 7076 	add.w	r0, r6, #984	; 0x3d8
 80056d6:	f7fc faa3 	bl	8001c20 <chThdCreateStatic.constprop.62>
 80056da:	f8d8 3018 	ldr.w	r3, [r8, #24]
 80056de:	60e8      	str	r0, [r5, #12]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, bmk_thread8, (void *)&n);
 80056e0:	6899      	ldr	r1, [r3, #8]
 80056e2:	463a      	mov	r2, r7
 80056e4:	3901      	subs	r1, #1
 80056e6:	4623      	mov	r3, r4
 80056e8:	f506 60a4 	add.w	r0, r6, #1312	; 0x520
 80056ec:	f7fc fa98 	bl	8001c20 <chThdCreateStatic.constprop.62>
  test_set_step(2);
 80056f0:	2302      	movs	r3, #2
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, bmk_thread8, (void *)&n);
 80056f2:	6128      	str	r0, [r5, #16]
    chThdSleepSeconds(1);
 80056f4:	f242 7010 	movw	r0, #10000	; 0x2710
  test_set_step(2);
 80056f8:	f8c9 3000 	str.w	r3, [r9]
    chThdSleepSeconds(1);
 80056fc:	f7fc fdb0 	bl	8002260 <chThdSleep>
    test_terminate_threads();
 8005700:	f7fb f8be 	bl	8000880 <test_terminate_threads>
    test_wait_threads();
 8005704:	f7ff ff94 	bl	8005630 <test_wait_threads>
  test_set_step(3);
 8005708:	2303      	movs	r3, #3
    test_print("--- Score : ");
 800570a:	480a      	ldr	r0, [pc, #40]	; (8005734 <rt_test_010_008_execute+0xd4>)
  test_set_step(3);
 800570c:	f8c9 3000 	str.w	r3, [r9]
    test_print("--- Score : ");
 8005710:	f7fb f976 	bl	8000a00 <test_print>
    test_printn(n);
 8005714:	9801      	ldr	r0, [sp, #4]
 8005716:	f7fb f903 	bl	8000920 <test_printn>
    test_println(" ctxswc/S");
 800571a:	4807      	ldr	r0, [pc, #28]	; (8005738 <rt_test_010_008_execute+0xd8>)
 800571c:	f7fb f950 	bl	80009c0 <test_println>
}
 8005720:	b003      	add	sp, #12
 8005722:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005726:	bf00      	nop
 8005728:	08001b91 	.word	0x08001b91
 800572c:	20000b40 	.word	0x20000b40
 8005730:	2000126c 	.word	0x2000126c
 8005734:	08008bf0 	.word	0x08008bf0
 8005738:	08008bd4 	.word	0x08008bd4
 800573c:	200008f0 	.word	0x200008f0
 8005740:	20001254 	.word	0x20001254
	...

08005750 <rt_test_010_004_execute>:
  return ch.rlist.current;
 8005750:	4b2b      	ldr	r3, [pc, #172]	; (8005800 <rt_test_010_004_execute+0xb0>)
    tp = threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1,
 8005752:	4a2c      	ldr	r2, [pc, #176]	; (8005804 <rt_test_010_004_execute+0xb4>)
  return chThdGetSelfX()->prio;
 8005754:	699b      	ldr	r3, [r3, #24]
 8005756:	482c      	ldr	r0, [pc, #176]	; (8005808 <rt_test_010_004_execute+0xb8>)
 8005758:	6899      	ldr	r1, [r3, #8]
static void rt_test_010_004_execute(void) {
 800575a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  test_set_step(1);
 800575e:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8005818 <rt_test_010_004_execute+0xc8>
    tp = threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1,
 8005762:	3101      	adds	r1, #1
  test_set_step(1);
 8005764:	2401      	movs	r4, #1
    tp = threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1,
 8005766:	2300      	movs	r3, #0
  test_set_step(1);
 8005768:	f8ca 4000 	str.w	r4, [sl]
    tp = threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1,
 800576c:	f7fc fa58 	bl	8001c20 <chThdCreateStatic.constprop.62>
 8005770:	4a26      	ldr	r2, [pc, #152]	; (800580c <rt_test_010_004_execute+0xbc>)
  test_set_step(2);
 8005772:	2302      	movs	r3, #2
    tp = threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1,
 8005774:	4604      	mov	r4, r0
 8005776:	6010      	str	r0, [r2, #0]
  test_set_step(2);
 8005778:	f8ca 3000 	str.w	r3, [sl]
    start = test_wait_tick();
 800577c:	f7fc ffa8 	bl	80026d0 <test_wait_tick>
    n = 0;
 8005780:	2500      	movs	r5, #0
      chSchWakeupS(tp, MSG_OK);
 8005782:	462e      	mov	r6, r5
    start = test_wait_tick();
 8005784:	4681      	mov	r9, r0
 8005786:	2720      	movs	r7, #32
 8005788:	f04f 4880 	mov.w	r8, #1073741824	; 0x40000000
 800578c:	f387 8811 	msr	BASEPRI, r7
      chSchWakeupS(tp, MSG_OK);
 8005790:	2100      	movs	r1, #0
 8005792:	4620      	mov	r0, r4
 8005794:	f7fc fa14 	bl	8001bc0 <chSchWakeupS>
      chSchWakeupS(tp, MSG_OK);
 8005798:	4620      	mov	r0, r4
 800579a:	2100      	movs	r1, #0
 800579c:	f7fc fa10 	bl	8001bc0 <chSchWakeupS>
      chSchWakeupS(tp, MSG_OK);
 80057a0:	4620      	mov	r0, r4
 80057a2:	2100      	movs	r1, #0
 80057a4:	f7fc fa0c 	bl	8001bc0 <chSchWakeupS>
      chSchWakeupS(tp, MSG_OK);
 80057a8:	4620      	mov	r0, r4
 80057aa:	2100      	movs	r1, #0
 80057ac:	f7fc fa08 	bl	8001bc0 <chSchWakeupS>
 80057b0:	f386 8811 	msr	BASEPRI, r6
 80057b4:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
    } while (chVTIsSystemTimeWithinX(start, end));
 80057b8:	f242 720f 	movw	r2, #9999	; 0x270f
 80057bc:	eba3 0309 	sub.w	r3, r3, r9
 80057c0:	4293      	cmp	r3, r2
      n += 4;
 80057c2:	f105 0504 	add.w	r5, r5, #4
    } while (chVTIsSystemTimeWithinX(start, end));
 80057c6:	d9e1      	bls.n	800578c <rt_test_010_004_execute+0x3c>
  test_set_step(3);
 80057c8:	2303      	movs	r3, #3
 80057ca:	f8ca 3000 	str.w	r3, [sl]
 80057ce:	f387 8811 	msr	BASEPRI, r7
    chSchWakeupS(tp, MSG_TIMEOUT);
 80057d2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80057d6:	4620      	mov	r0, r4
 80057d8:	f7fc f9f2 	bl	8001bc0 <chSchWakeupS>
 80057dc:	f386 8811 	msr	BASEPRI, r6
    test_wait_threads();
 80057e0:	f7ff ff26 	bl	8005630 <test_wait_threads>
  test_set_step(4);
 80057e4:	2304      	movs	r3, #4
    test_print("--- Score : ");
 80057e6:	480a      	ldr	r0, [pc, #40]	; (8005810 <rt_test_010_004_execute+0xc0>)
  test_set_step(4);
 80057e8:	f8ca 3000 	str.w	r3, [sl]
    test_print("--- Score : ");
 80057ec:	f7fb f908 	bl	8000a00 <test_print>
    test_printn(n * 2);
 80057f0:	0068      	lsls	r0, r5, #1
 80057f2:	f7fb f895 	bl	8000920 <test_printn>
    test_println(" ctxswc/S");
 80057f6:	4807      	ldr	r0, [pc, #28]	; (8005814 <rt_test_010_004_execute+0xc4>)
}
 80057f8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    test_println(" ctxswc/S");
 80057fc:	f7fb b8e0 	b.w	80009c0 <test_println>
 8005800:	200008f0 	.word	0x200008f0
 8005804:	08001e61 	.word	0x08001e61
 8005808:	20000b40 	.word	0x20000b40
 800580c:	2000126c 	.word	0x2000126c
 8005810:	08008bf0 	.word	0x08008bf0
 8005814:	08008bd4 	.word	0x08008bd4
 8005818:	20001254 	.word	0x20001254
 800581c:	00000000 	.word	0x00000000

08005820 <rt_test_010_003_execute>:
static void rt_test_010_003_execute(void) {
 8005820:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  return ch.rlist.current;
 8005824:	4e2c      	ldr	r6, [pc, #176]	; (80058d8 <rt_test_010_003_execute+0xb8>)
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, bmk_thread1, NULL);
 8005826:	4d2d      	ldr	r5, [pc, #180]	; (80058dc <rt_test_010_003_execute+0xbc>)
  return chThdGetSelfX()->prio;
 8005828:	69b3      	ldr	r3, [r6, #24]
  test_set_step(1);
 800582a:	4f2d      	ldr	r7, [pc, #180]	; (80058e0 <rt_test_010_003_execute+0xc0>)
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, bmk_thread1, NULL);
 800582c:	6899      	ldr	r1, [r3, #8]
 800582e:	4a2d      	ldr	r2, [pc, #180]	; (80058e4 <rt_test_010_003_execute+0xc4>)
 8005830:	4c2d      	ldr	r4, [pc, #180]	; (80058e8 <rt_test_010_003_execute+0xc8>)
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-2, bmk_thread3, NULL);
 8005832:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 80058f8 <rt_test_010_003_execute+0xd8>
  test_set_step(1);
 8005836:	f04f 0c01 	mov.w	ip, #1
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, bmk_thread1, NULL);
 800583a:	3101      	adds	r1, #1
 800583c:	4628      	mov	r0, r5
 800583e:	2300      	movs	r3, #0
  test_set_step(1);
 8005840:	f8c7 c000 	str.w	ip, [r7]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, bmk_thread1, NULL);
 8005844:	f7fc f9ec 	bl	8001c20 <chThdCreateStatic.constprop.62>
 8005848:	69b3      	ldr	r3, [r6, #24]
 800584a:	6020      	str	r0, [r4, #0]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-2, bmk_thread3, NULL);
 800584c:	6899      	ldr	r1, [r3, #8]
  test_set_step(2);
 800584e:	f04f 0c02 	mov.w	ip, #2
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-2, bmk_thread3, NULL);
 8005852:	4642      	mov	r2, r8
 8005854:	3902      	subs	r1, #2
 8005856:	f505 70a4 	add.w	r0, r5, #328	; 0x148
 800585a:	2300      	movs	r3, #0
  test_set_step(2);
 800585c:	f8c7 c000 	str.w	ip, [r7]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-2, bmk_thread3, NULL);
 8005860:	f7fc f9de 	bl	8001c20 <chThdCreateStatic.constprop.62>
 8005864:	69b3      	ldr	r3, [r6, #24]
 8005866:	6060      	str	r0, [r4, #4]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, bmk_thread3, NULL);
 8005868:	6899      	ldr	r1, [r3, #8]
 800586a:	4642      	mov	r2, r8
 800586c:	3903      	subs	r1, #3
 800586e:	f505 7024 	add.w	r0, r5, #656	; 0x290
 8005872:	2300      	movs	r3, #0
 8005874:	f7fc f9d4 	bl	8001c20 <chThdCreateStatic.constprop.62>
 8005878:	69b3      	ldr	r3, [r6, #24]
 800587a:	60a0      	str	r0, [r4, #8]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-4, bmk_thread3, NULL);
 800587c:	6899      	ldr	r1, [r3, #8]
 800587e:	4642      	mov	r2, r8
 8005880:	3904      	subs	r1, #4
 8005882:	f505 7076 	add.w	r0, r5, #984	; 0x3d8
 8005886:	2300      	movs	r3, #0
 8005888:	f7fc f9ca 	bl	8001c20 <chThdCreateStatic.constprop.62>
 800588c:	69b3      	ldr	r3, [r6, #24]
 800588e:	60e0      	str	r0, [r4, #12]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-5, bmk_thread3, NULL);
 8005890:	6899      	ldr	r1, [r3, #8]
 8005892:	4642      	mov	r2, r8
 8005894:	3905      	subs	r1, #5
 8005896:	f505 60a4 	add.w	r0, r5, #1312	; 0x520
 800589a:	2300      	movs	r3, #0
 800589c:	f7fc f9c0 	bl	8001c20 <chThdCreateStatic.constprop.62>
  test_set_step(3);
 80058a0:	2303      	movs	r3, #3
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-5, bmk_thread3, NULL);
 80058a2:	6120      	str	r0, [r4, #16]
    n = msg_loop_test(threads[0]);
 80058a4:	6820      	ldr	r0, [r4, #0]
  test_set_step(3);
 80058a6:	603b      	str	r3, [r7, #0]
    n = msg_loop_test(threads[0]);
 80058a8:	f7fc ffc2 	bl	8002830 <msg_loop_test>
 80058ac:	4604      	mov	r4, r0
    test_wait_threads();
 80058ae:	f7ff febf 	bl	8005630 <test_wait_threads>
  test_set_step(4);
 80058b2:	2304      	movs	r3, #4
    test_print("--- Score : ");
 80058b4:	480d      	ldr	r0, [pc, #52]	; (80058ec <rt_test_010_003_execute+0xcc>)
  test_set_step(4);
 80058b6:	603b      	str	r3, [r7, #0]
    test_print("--- Score : ");
 80058b8:	f7fb f8a2 	bl	8000a00 <test_print>
    test_printn(n);
 80058bc:	4620      	mov	r0, r4
 80058be:	f7fb f82f 	bl	8000920 <test_printn>
    test_print(" msgs/S, ");
 80058c2:	480b      	ldr	r0, [pc, #44]	; (80058f0 <rt_test_010_003_execute+0xd0>)
 80058c4:	f7fb f89c 	bl	8000a00 <test_print>
    test_printn(n << 1);
 80058c8:	0060      	lsls	r0, r4, #1
 80058ca:	f7fb f829 	bl	8000920 <test_printn>
    test_println(" ctxswc/S");
 80058ce:	4809      	ldr	r0, [pc, #36]	; (80058f4 <rt_test_010_003_execute+0xd4>)
}
 80058d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    test_println(" ctxswc/S");
 80058d4:	f7fb b874 	b.w	80009c0 <test_println>
 80058d8:	200008f0 	.word	0x200008f0
 80058dc:	20000b40 	.word	0x20000b40
 80058e0:	20001254 	.word	0x20001254
 80058e4:	080027d1 	.word	0x080027d1
 80058e8:	2000126c 	.word	0x2000126c
 80058ec:	08008bf0 	.word	0x08008bf0
 80058f0:	08008b58 	.word	0x08008b58
 80058f4:	08008bd4 	.word	0x08008bd4
 80058f8:	08003171 	.word	0x08003171
 80058fc:	00000000 	.word	0x00000000

08005900 <rt_test_010_002_execute>:
static void rt_test_010_002_execute(void) {
 8005900:	b538      	push	{r3, r4, r5, lr}
  return ch.rlist.current;
 8005902:	4b14      	ldr	r3, [pc, #80]	; (8005954 <rt_test_010_002_execute+0x54>)
  test_set_step(1);
 8005904:	4c14      	ldr	r4, [pc, #80]	; (8005958 <rt_test_010_002_execute+0x58>)
  return chThdGetSelfX()->prio;
 8005906:	699b      	ldr	r3, [r3, #24]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, bmk_thread1, NULL);
 8005908:	4a14      	ldr	r2, [pc, #80]	; (800595c <rt_test_010_002_execute+0x5c>)
 800590a:	6899      	ldr	r1, [r3, #8]
 800590c:	4814      	ldr	r0, [pc, #80]	; (8005960 <rt_test_010_002_execute+0x60>)
 800590e:	3101      	adds	r1, #1
  test_set_step(1);
 8005910:	2501      	movs	r5, #1
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, bmk_thread1, NULL);
 8005912:	2300      	movs	r3, #0
  test_set_step(1);
 8005914:	6025      	str	r5, [r4, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, bmk_thread1, NULL);
 8005916:	f7fc f983 	bl	8001c20 <chThdCreateStatic.constprop.62>
 800591a:	4a12      	ldr	r2, [pc, #72]	; (8005964 <rt_test_010_002_execute+0x64>)
  test_set_step(2);
 800591c:	2302      	movs	r3, #2
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, bmk_thread1, NULL);
 800591e:	6010      	str	r0, [r2, #0]
  test_set_step(2);
 8005920:	6023      	str	r3, [r4, #0]
    n = msg_loop_test(threads[0]);
 8005922:	f7fc ff85 	bl	8002830 <msg_loop_test>
 8005926:	4605      	mov	r5, r0
    test_wait_threads();
 8005928:	f7ff fe82 	bl	8005630 <test_wait_threads>
  test_set_step(3);
 800592c:	2303      	movs	r3, #3
    test_print("--- Score : ");
 800592e:	480e      	ldr	r0, [pc, #56]	; (8005968 <rt_test_010_002_execute+0x68>)
  test_set_step(3);
 8005930:	6023      	str	r3, [r4, #0]
    test_print("--- Score : ");
 8005932:	f7fb f865 	bl	8000a00 <test_print>
    test_printn(n);
 8005936:	4628      	mov	r0, r5
 8005938:	f7fa fff2 	bl	8000920 <test_printn>
    test_print(" msgs/S, ");
 800593c:	480b      	ldr	r0, [pc, #44]	; (800596c <rt_test_010_002_execute+0x6c>)
 800593e:	f7fb f85f 	bl	8000a00 <test_print>
    test_printn(n << 1);
 8005942:	0068      	lsls	r0, r5, #1
 8005944:	f7fa ffec 	bl	8000920 <test_printn>
    test_println(" ctxswc/S");
 8005948:	4809      	ldr	r0, [pc, #36]	; (8005970 <rt_test_010_002_execute+0x70>)
}
 800594a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    test_println(" ctxswc/S");
 800594e:	f7fb b837 	b.w	80009c0 <test_println>
 8005952:	bf00      	nop
 8005954:	200008f0 	.word	0x200008f0
 8005958:	20001254 	.word	0x20001254
 800595c:	080027d1 	.word	0x080027d1
 8005960:	20000b40 	.word	0x20000b40
 8005964:	2000126c 	.word	0x2000126c
 8005968:	08008bf0 	.word	0x08008bf0
 800596c:	08008b58 	.word	0x08008b58
 8005970:	08008bd4 	.word	0x08008bd4
	...

08005980 <rt_test_010_001_execute>:
static void rt_test_010_001_execute(void) {
 8005980:	b538      	push	{r3, r4, r5, lr}
  return ch.rlist.current;
 8005982:	4b14      	ldr	r3, [pc, #80]	; (80059d4 <rt_test_010_001_execute+0x54>)
  test_set_step(1);
 8005984:	4c14      	ldr	r4, [pc, #80]	; (80059d8 <rt_test_010_001_execute+0x58>)
  return chThdGetSelfX()->prio;
 8005986:	699b      	ldr	r3, [r3, #24]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, bmk_thread1, NULL);
 8005988:	4a14      	ldr	r2, [pc, #80]	; (80059dc <rt_test_010_001_execute+0x5c>)
 800598a:	6899      	ldr	r1, [r3, #8]
 800598c:	4814      	ldr	r0, [pc, #80]	; (80059e0 <rt_test_010_001_execute+0x60>)
 800598e:	3901      	subs	r1, #1
  test_set_step(1);
 8005990:	2501      	movs	r5, #1
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, bmk_thread1, NULL);
 8005992:	2300      	movs	r3, #0
  test_set_step(1);
 8005994:	6025      	str	r5, [r4, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, bmk_thread1, NULL);
 8005996:	f7fc f943 	bl	8001c20 <chThdCreateStatic.constprop.62>
 800599a:	4a12      	ldr	r2, [pc, #72]	; (80059e4 <rt_test_010_001_execute+0x64>)
  test_set_step(2);
 800599c:	2302      	movs	r3, #2
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, bmk_thread1, NULL);
 800599e:	6010      	str	r0, [r2, #0]
  test_set_step(2);
 80059a0:	6023      	str	r3, [r4, #0]
    n = msg_loop_test(threads[0]);
 80059a2:	f7fc ff45 	bl	8002830 <msg_loop_test>
 80059a6:	4605      	mov	r5, r0
    test_wait_threads();
 80059a8:	f7ff fe42 	bl	8005630 <test_wait_threads>
  test_set_step(3);
 80059ac:	2303      	movs	r3, #3
    test_print("--- Score : ");
 80059ae:	480e      	ldr	r0, [pc, #56]	; (80059e8 <rt_test_010_001_execute+0x68>)
  test_set_step(3);
 80059b0:	6023      	str	r3, [r4, #0]
    test_print("--- Score : ");
 80059b2:	f7fb f825 	bl	8000a00 <test_print>
    test_printn(n);
 80059b6:	4628      	mov	r0, r5
 80059b8:	f7fa ffb2 	bl	8000920 <test_printn>
    test_print(" msgs/S, ");
 80059bc:	480b      	ldr	r0, [pc, #44]	; (80059ec <rt_test_010_001_execute+0x6c>)
 80059be:	f7fb f81f 	bl	8000a00 <test_print>
    test_printn(n << 1);
 80059c2:	0068      	lsls	r0, r5, #1
 80059c4:	f7fa ffac 	bl	8000920 <test_printn>
    test_println(" ctxswc/S");
 80059c8:	4809      	ldr	r0, [pc, #36]	; (80059f0 <rt_test_010_001_execute+0x70>)
}
 80059ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    test_println(" ctxswc/S");
 80059ce:	f7fa bff7 	b.w	80009c0 <test_println>
 80059d2:	bf00      	nop
 80059d4:	200008f0 	.word	0x200008f0
 80059d8:	20001254 	.word	0x20001254
 80059dc:	080027d1 	.word	0x080027d1
 80059e0:	20000b40 	.word	0x20000b40
 80059e4:	2000126c 	.word	0x2000126c
 80059e8:	08008bf0 	.word	0x08008bf0
 80059ec:	08008b58 	.word	0x08008b58
 80059f0:	08008bd4 	.word	0x08008bd4
	...

08005a00 <rt_test_009_002_execute>:

static void rt_test_009_002_execute(void) {
 8005a00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  unsigned i;
  tprio_t prio;

  /* [9.2.1] Adding four working areas to the pool.*/
  test_set_step(1);
 8005a02:	4d3d      	ldr	r5, [pc, #244]	; (8005af8 <rt_test_009_002_execute+0xf8>)
 8005a04:	4b3d      	ldr	r3, [pc, #244]	; (8005afc <rt_test_009_002_execute+0xfc>)
 8005a06:	4a3e      	ldr	r2, [pc, #248]	; (8005b00 <rt_test_009_002_execute+0x100>)
 8005a08:	493e      	ldr	r1, [pc, #248]	; (8005b04 <rt_test_009_002_execute+0x104>)
 8005a0a:	2001      	movs	r0, #1
 8005a0c:	6028      	str	r0, [r5, #0]
 8005a0e:	f103 070c 	add.w	r7, r3, #12
 8005a12:	2620      	movs	r6, #32
 8005a14:	2400      	movs	r4, #0
 8005a16:	f386 8811 	msr	BASEPRI, r6
  php->next = mp->next;
 8005a1a:	6808      	ldr	r0, [r1, #0]
 8005a1c:	6010      	str	r0, [r2, #0]
  mp->next = php;
 8005a1e:	600a      	str	r2, [r1, #0]
 8005a20:	f384 8811 	msr	BASEPRI, r4
  {
    for (i = 0; i < 4; i++)
 8005a24:	429f      	cmp	r7, r3
 8005a26:	d002      	beq.n	8005a2e <rt_test_009_002_execute+0x2e>
 8005a28:	f853 2b04 	ldr.w	r2, [r3], #4
 8005a2c:	e7f3      	b.n	8005a16 <rt_test_009_002_execute+0x16>
  return ch.rlist.current;
 8005a2e:	4b36      	ldr	r3, [pc, #216]	; (8005b08 <rt_test_009_002_execute+0x108>)
  }

  /* [9.2.3] Creating the five threads.*/
  test_set_step(3);
  {
    threads[0] = chThdCreateFromMemoryPool(&mp1, "dyn1", prio-1, dyn_thread1, "A");
 8005a30:	4a36      	ldr	r2, [pc, #216]	; (8005b0c <rt_test_009_002_execute+0x10c>)
  return chThdGetSelfX()->prio;
 8005a32:	699b      	ldr	r3, [r3, #24]
 8005a34:	4836      	ldr	r0, [pc, #216]	; (8005b10 <rt_test_009_002_execute+0x110>)
 8005a36:	689e      	ldr	r6, [r3, #8]
 8005a38:	4c36      	ldr	r4, [pc, #216]	; (8005b14 <rt_test_009_002_execute+0x114>)
  test_set_step(3);
 8005a3a:	2303      	movs	r3, #3
    threads[0] = chThdCreateFromMemoryPool(&mp1, "dyn1", prio-1, dyn_thread1, "A");
 8005a3c:	1e71      	subs	r1, r6, #1
  test_set_step(3);
 8005a3e:	602b      	str	r3, [r5, #0]
    threads[0] = chThdCreateFromMemoryPool(&mp1, "dyn1", prio-1, dyn_thread1, "A");
 8005a40:	f7fc f94e 	bl	8001ce0 <chThdCreateFromMemoryPool.constprop.31>
    threads[1] = chThdCreateFromMemoryPool(&mp1, "dyn2", prio-2, dyn_thread1, "B");
 8005a44:	1eb1      	subs	r1, r6, #2
    threads[0] = chThdCreateFromMemoryPool(&mp1, "dyn1", prio-1, dyn_thread1, "A");
 8005a46:	6020      	str	r0, [r4, #0]
    threads[1] = chThdCreateFromMemoryPool(&mp1, "dyn2", prio-2, dyn_thread1, "B");
 8005a48:	4a33      	ldr	r2, [pc, #204]	; (8005b18 <rt_test_009_002_execute+0x118>)
 8005a4a:	4834      	ldr	r0, [pc, #208]	; (8005b1c <rt_test_009_002_execute+0x11c>)
 8005a4c:	f7fc f948 	bl	8001ce0 <chThdCreateFromMemoryPool.constprop.31>
    threads[2] = chThdCreateFromMemoryPool(&mp1, "dyn3", prio-3, dyn_thread1, "C");
 8005a50:	1ef1      	subs	r1, r6, #3
    threads[1] = chThdCreateFromMemoryPool(&mp1, "dyn2", prio-2, dyn_thread1, "B");
 8005a52:	6060      	str	r0, [r4, #4]
    threads[2] = chThdCreateFromMemoryPool(&mp1, "dyn3", prio-3, dyn_thread1, "C");
 8005a54:	4a32      	ldr	r2, [pc, #200]	; (8005b20 <rt_test_009_002_execute+0x120>)
 8005a56:	4833      	ldr	r0, [pc, #204]	; (8005b24 <rt_test_009_002_execute+0x124>)
 8005a58:	f7fc f942 	bl	8001ce0 <chThdCreateFromMemoryPool.constprop.31>
    threads[3] = chThdCreateFromMemoryPool(&mp1, "dyn4", prio-4, dyn_thread1, "D");
 8005a5c:	1f31      	subs	r1, r6, #4
    threads[2] = chThdCreateFromMemoryPool(&mp1, "dyn3", prio-3, dyn_thread1, "C");
 8005a5e:	60a0      	str	r0, [r4, #8]
    threads[3] = chThdCreateFromMemoryPool(&mp1, "dyn4", prio-4, dyn_thread1, "D");
 8005a60:	4a31      	ldr	r2, [pc, #196]	; (8005b28 <rt_test_009_002_execute+0x128>)
 8005a62:	4832      	ldr	r0, [pc, #200]	; (8005b2c <rt_test_009_002_execute+0x12c>)
 8005a64:	f7fc f93c 	bl	8001ce0 <chThdCreateFromMemoryPool.constprop.31>
    threads[4] = chThdCreateFromMemoryPool(&mp1, "dyn5", prio-5, dyn_thread1, "E");
 8005a68:	1f71      	subs	r1, r6, #5
    threads[3] = chThdCreateFromMemoryPool(&mp1, "dyn4", prio-4, dyn_thread1, "D");
 8005a6a:	60e0      	str	r0, [r4, #12]
    threads[4] = chThdCreateFromMemoryPool(&mp1, "dyn5", prio-5, dyn_thread1, "E");
 8005a6c:	4a30      	ldr	r2, [pc, #192]	; (8005b30 <rt_test_009_002_execute+0x130>)
 8005a6e:	4831      	ldr	r0, [pc, #196]	; (8005b34 <rt_test_009_002_execute+0x134>)
 8005a70:	f7fc f936 	bl	8001ce0 <chThdCreateFromMemoryPool.constprop.31>
 8005a74:	4606      	mov	r6, r0
  }

  /* [9.2.4] Testing that only the fifth thread creation failed.*/
  test_set_step(4);
  {
    test_assert((threads[0] != NULL) &&
 8005a76:	6820      	ldr	r0, [r4, #0]
    threads[4] = chThdCreateFromMemoryPool(&mp1, "dyn5", prio-5, dyn_thread1, "E");
 8005a78:	6126      	str	r6, [r4, #16]
  test_set_step(4);
 8005a7a:	2304      	movs	r3, #4
 8005a7c:	602b      	str	r3, [r5, #0]
    test_assert((threads[0] != NULL) &&
 8005a7e:	b138      	cbz	r0, 8005a90 <rt_test_009_002_execute+0x90>
 8005a80:	6860      	ldr	r0, [r4, #4]
 8005a82:	b128      	cbz	r0, 8005a90 <rt_test_009_002_execute+0x90>
 8005a84:	68a0      	ldr	r0, [r4, #8]
 8005a86:	b118      	cbz	r0, 8005a90 <rt_test_009_002_execute+0x90>
 8005a88:	68e0      	ldr	r0, [r4, #12]
 8005a8a:	3000      	adds	r0, #0
 8005a8c:	bf18      	it	ne
 8005a8e:	2001      	movne	r0, #1
 8005a90:	4929      	ldr	r1, [pc, #164]	; (8005b38 <rt_test_009_002_execute+0x138>)
 8005a92:	f7fa feb5 	bl	8000800 <_test_assert>
 8005a96:	b100      	cbz	r0, 8005a9a <rt_test_009_002_execute+0x9a>
  {
    for (i = 0; i < 4; i++)
      test_assert(chPoolAlloc(&mp1) != NULL, "pool list empty");
    test_assert(chPoolAlloc(&mp1) == NULL, "pool list not empty");
  }
}
 8005a98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    test_assert(threads[4] == NULL,
 8005a9a:	fab6 f086 	clz	r0, r6
 8005a9e:	0940      	lsrs	r0, r0, #5
 8005aa0:	4926      	ldr	r1, [pc, #152]	; (8005b3c <rt_test_009_002_execute+0x13c>)
 8005aa2:	f7fa fead 	bl	8000800 <_test_assert>
 8005aa6:	2800      	cmp	r0, #0
 8005aa8:	d1f6      	bne.n	8005a98 <rt_test_009_002_execute+0x98>
  test_set_step(5);
 8005aaa:	2305      	movs	r3, #5
 8005aac:	602b      	str	r3, [r5, #0]
    test_wait_threads();
 8005aae:	f7ff fdbf 	bl	8005630 <test_wait_threads>
    test_assert_sequence("ABCD", "invalid sequence");
 8005ab2:	4923      	ldr	r1, [pc, #140]	; (8005b40 <rt_test_009_002_execute+0x140>)
 8005ab4:	4823      	ldr	r0, [pc, #140]	; (8005b44 <rt_test_009_002_execute+0x144>)
 8005ab6:	f7fa ffbb 	bl	8000a30 <_test_assert_sequence>
 8005aba:	2800      	cmp	r0, #0
 8005abc:	d1ec      	bne.n	8005a98 <rt_test_009_002_execute+0x98>
  test_set_step(6);
 8005abe:	2306      	movs	r3, #6
      test_assert(chPoolAlloc(&mp1) != NULL, "pool list empty");
 8005ac0:	4f10      	ldr	r7, [pc, #64]	; (8005b04 <rt_test_009_002_execute+0x104>)
 8005ac2:	4e21      	ldr	r6, [pc, #132]	; (8005b48 <rt_test_009_002_execute+0x148>)
  test_set_step(6);
 8005ac4:	602b      	str	r3, [r5, #0]
 8005ac6:	2404      	movs	r4, #4
      test_assert(chPoolAlloc(&mp1) != NULL, "pool list empty");
 8005ac8:	4638      	mov	r0, r7
 8005aca:	f7fb f869 	bl	8000ba0 <chPoolAlloc>
 8005ace:	3000      	adds	r0, #0
 8005ad0:	bf18      	it	ne
 8005ad2:	2001      	movne	r0, #1
 8005ad4:	4631      	mov	r1, r6
 8005ad6:	f7fa fe93 	bl	8000800 <_test_assert>
 8005ada:	2800      	cmp	r0, #0
 8005adc:	d1dc      	bne.n	8005a98 <rt_test_009_002_execute+0x98>
    for (i = 0; i < 4; i++)
 8005ade:	3c01      	subs	r4, #1
 8005ae0:	d1f2      	bne.n	8005ac8 <rt_test_009_002_execute+0xc8>
    test_assert(chPoolAlloc(&mp1) == NULL, "pool list not empty");
 8005ae2:	4808      	ldr	r0, [pc, #32]	; (8005b04 <rt_test_009_002_execute+0x104>)
 8005ae4:	f7fb f85c 	bl	8000ba0 <chPoolAlloc>
 8005ae8:	fab0 f080 	clz	r0, r0
 8005aec:	0940      	lsrs	r0, r0, #5
 8005aee:	4917      	ldr	r1, [pc, #92]	; (8005b4c <rt_test_009_002_execute+0x14c>)
}
 8005af0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    test_assert(chPoolAlloc(&mp1) == NULL, "pool list not empty");
 8005af4:	f7fa be84 	b.w	8000800 <_test_assert>
 8005af8:	20001254 	.word	0x20001254
 8005afc:	08009880 	.word	0x08009880
 8005b00:	20000b40 	.word	0x20000b40
 8005b04:	20000ad8 	.word	0x20000ad8
 8005b08:	200008f0 	.word	0x200008f0
 8005b0c:	08008874 	.word	0x08008874
 8005b10:	08008aa0 	.word	0x08008aa0
 8005b14:	2000126c 	.word	0x2000126c
 8005b18:	08008878 	.word	0x08008878
 8005b1c:	08008aa8 	.word	0x08008aa8
 8005b20:	08008ab0 	.word	0x08008ab0
 8005b24:	08008ab4 	.word	0x08008ab4
 8005b28:	08008abc 	.word	0x08008abc
 8005b2c:	08008ac0 	.word	0x08008ac0
 8005b30:	080088f0 	.word	0x080088f0
 8005b34:	08008ac8 	.word	0x08008ac8
 8005b38:	08008ad0 	.word	0x08008ad0
 8005b3c:	08008ae8 	.word	0x08008ae8
 8005b40:	08008950 	.word	0x08008950
 8005b44:	08007810 	.word	0x08007810
 8005b48:	08008b04 	.word	0x08008b04
 8005b4c:	08008b14 	.word	0x08008b14

08005b50 <rt_test_009_001_execute>:
static void rt_test_009_001_execute(void) {
 8005b50:	b5f0      	push	{r4, r5, r6, r7, lr}
  return ch.rlist.current;
 8005b52:	4b3f      	ldr	r3, [pc, #252]	; (8005c50 <rt_test_009_001_execute+0x100>)
  test_set_step(2);
 8005b54:	4c3f      	ldr	r4, [pc, #252]	; (8005c54 <rt_test_009_001_execute+0x104>)
  return chThdGetSelfX()->prio;
 8005b56:	699b      	ldr	r3, [r3, #24]
    n1 = chHeapStatus(&heap1, &total1, &largest1);
 8005b58:	483f      	ldr	r0, [pc, #252]	; (8005c58 <rt_test_009_001_execute+0x108>)
 8005b5a:	689e      	ldr	r6, [r3, #8]
static void rt_test_009_001_execute(void) {
 8005b5c:	b085      	sub	sp, #20
  test_set_step(2);
 8005b5e:	2302      	movs	r3, #2
    n1 = chHeapStatus(&heap1, &total1, &largest1);
 8005b60:	a903      	add	r1, sp, #12
 8005b62:	aa02      	add	r2, sp, #8
  test_set_step(2);
 8005b64:	6023      	str	r3, [r4, #0]
    n1 = chHeapStatus(&heap1, &total1, &largest1);
 8005b66:	f7fe ffe3 	bl	8004b30 <chHeapStatus>
 8005b6a:	4605      	mov	r5, r0
    test_assert(n1 == 1, "heap fragmented");
 8005b6c:	f1a0 0001 	sub.w	r0, r0, #1
 8005b70:	fab0 f080 	clz	r0, r0
 8005b74:	0940      	lsrs	r0, r0, #5
 8005b76:	4939      	ldr	r1, [pc, #228]	; (8005c5c <rt_test_009_001_execute+0x10c>)
 8005b78:	f7fa fe42 	bl	8000800 <_test_assert>
 8005b7c:	b108      	cbz	r0, 8005b82 <rt_test_009_001_execute+0x32>
}
 8005b7e:	b005      	add	sp, #20
 8005b80:	bdf0      	pop	{r4, r5, r6, r7, pc}
  test_set_step(3);
 8005b82:	2203      	movs	r2, #3
    threads[0] = chThdCreateFromHeap(&heap1,
 8005b84:	4936      	ldr	r1, [pc, #216]	; (8005c60 <rt_test_009_001_execute+0x110>)
  test_set_step(3);
 8005b86:	6022      	str	r2, [r4, #0]
    threads[0] = chThdCreateFromHeap(&heap1,
 8005b88:	4b36      	ldr	r3, [pc, #216]	; (8005c64 <rt_test_009_001_execute+0x114>)
 8005b8a:	4f37      	ldr	r7, [pc, #220]	; (8005c68 <rt_test_009_001_execute+0x118>)
 8005b8c:	1e72      	subs	r2, r6, #1
 8005b8e:	f44f 70a4 	mov.w	r0, #328	; 0x148
 8005b92:	f7fe f9f5 	bl	8003f80 <chThdCreateFromHeap.constprop.32>
 8005b96:	6038      	str	r0, [r7, #0]
    test_assert(threads[0] != NULL, "thread creation failed");
 8005b98:	3000      	adds	r0, #0
 8005b9a:	bf18      	it	ne
 8005b9c:	2001      	movne	r0, #1
 8005b9e:	4933      	ldr	r1, [pc, #204]	; (8005c6c <rt_test_009_001_execute+0x11c>)
 8005ba0:	f7fa fe2e 	bl	8000800 <_test_assert>
 8005ba4:	2800      	cmp	r0, #0
 8005ba6:	d1ea      	bne.n	8005b7e <rt_test_009_001_execute+0x2e>
  test_set_step(4);
 8005ba8:	2204      	movs	r2, #4
    threads[1] = chThdCreateFromHeap(&heap1,
 8005baa:	4b31      	ldr	r3, [pc, #196]	; (8005c70 <rt_test_009_001_execute+0x120>)
 8005bac:	4931      	ldr	r1, [pc, #196]	; (8005c74 <rt_test_009_001_execute+0x124>)
  test_set_step(4);
 8005bae:	6022      	str	r2, [r4, #0]
    threads[1] = chThdCreateFromHeap(&heap1,
 8005bb0:	f44f 70a4 	mov.w	r0, #328	; 0x148
 8005bb4:	1eb2      	subs	r2, r6, #2
 8005bb6:	f7fe f9e3 	bl	8003f80 <chThdCreateFromHeap.constprop.32>
 8005bba:	4603      	mov	r3, r0
    test_assert(threads[1] != NULL, "thread creation failed");
 8005bbc:	3000      	adds	r0, #0
 8005bbe:	bf18      	it	ne
 8005bc0:	2001      	movne	r0, #1
 8005bc2:	492a      	ldr	r1, [pc, #168]	; (8005c6c <rt_test_009_001_execute+0x11c>)
    threads[1] = chThdCreateFromHeap(&heap1,
 8005bc4:	607b      	str	r3, [r7, #4]
    test_assert(threads[1] != NULL, "thread creation failed");
 8005bc6:	f7fa fe1b 	bl	8000800 <_test_assert>
 8005bca:	2800      	cmp	r0, #0
 8005bcc:	d1d7      	bne.n	8005b7e <rt_test_009_001_execute+0x2e>
  test_set_step(5);
 8005bce:	2005      	movs	r0, #5
    threads[2] = chThdCreateFromHeap(&heap1,
 8005bd0:	4b29      	ldr	r3, [pc, #164]	; (8005c78 <rt_test_009_001_execute+0x128>)
 8005bd2:	492a      	ldr	r1, [pc, #168]	; (8005c7c <rt_test_009_001_execute+0x12c>)
  test_set_step(5);
 8005bd4:	6020      	str	r0, [r4, #0]
    threads[2] = chThdCreateFromHeap(&heap1,
 8005bd6:	1ef2      	subs	r2, r6, #3
 8005bd8:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8005bdc:	f7fe f9d0 	bl	8003f80 <chThdCreateFromHeap.constprop.32>
 8005be0:	4603      	mov	r3, r0
    test_assert(threads[2] == NULL, "thread creation not failed");
 8005be2:	fab0 f080 	clz	r0, r0
 8005be6:	0940      	lsrs	r0, r0, #5
 8005be8:	4925      	ldr	r1, [pc, #148]	; (8005c80 <rt_test_009_001_execute+0x130>)
    threads[2] = chThdCreateFromHeap(&heap1,
 8005bea:	60bb      	str	r3, [r7, #8]
    test_assert(threads[2] == NULL, "thread creation not failed");
 8005bec:	f7fa fe08 	bl	8000800 <_test_assert>
 8005bf0:	2800      	cmp	r0, #0
 8005bf2:	d1c4      	bne.n	8005b7e <rt_test_009_001_execute+0x2e>
  test_set_step(6);
 8005bf4:	2306      	movs	r3, #6
 8005bf6:	6023      	str	r3, [r4, #0]
    test_wait_threads();
 8005bf8:	f7ff fd1a 	bl	8005630 <test_wait_threads>
    test_assert_sequence("AB", "invalid sequence");
 8005bfc:	4921      	ldr	r1, [pc, #132]	; (8005c84 <rt_test_009_001_execute+0x134>)
 8005bfe:	4822      	ldr	r0, [pc, #136]	; (8005c88 <rt_test_009_001_execute+0x138>)
 8005c00:	f7fa ff16 	bl	8000a30 <_test_assert_sequence>
 8005c04:	2800      	cmp	r0, #0
 8005c06:	d1ba      	bne.n	8005b7e <rt_test_009_001_execute+0x2e>
  test_set_step(7);
 8005c08:	2307      	movs	r3, #7
    n2 = chHeapStatus(&heap1, &total2, &largest2);
 8005c0a:	a901      	add	r1, sp, #4
 8005c0c:	466a      	mov	r2, sp
 8005c0e:	4812      	ldr	r0, [pc, #72]	; (8005c58 <rt_test_009_001_execute+0x108>)
  test_set_step(7);
 8005c10:	6023      	str	r3, [r4, #0]
    n2 = chHeapStatus(&heap1, &total2, &largest2);
 8005c12:	f7fe ff8d 	bl	8004b30 <chHeapStatus>
    test_assert(n1 == n2, "fragmentation changed");
 8005c16:	1a28      	subs	r0, r5, r0
 8005c18:	fab0 f080 	clz	r0, r0
 8005c1c:	491b      	ldr	r1, [pc, #108]	; (8005c8c <rt_test_009_001_execute+0x13c>)
 8005c1e:	0940      	lsrs	r0, r0, #5
 8005c20:	f7fa fdee 	bl	8000800 <_test_assert>
 8005c24:	2800      	cmp	r0, #0
 8005c26:	d1aa      	bne.n	8005b7e <rt_test_009_001_execute+0x2e>
    test_assert(total1 == total2, "total free space changed");
 8005c28:	9803      	ldr	r0, [sp, #12]
 8005c2a:	9b01      	ldr	r3, [sp, #4]
 8005c2c:	4918      	ldr	r1, [pc, #96]	; (8005c90 <rt_test_009_001_execute+0x140>)
 8005c2e:	1ac0      	subs	r0, r0, r3
 8005c30:	fab0 f080 	clz	r0, r0
 8005c34:	0940      	lsrs	r0, r0, #5
 8005c36:	f7fa fde3 	bl	8000800 <_test_assert>
 8005c3a:	2800      	cmp	r0, #0
 8005c3c:	d19f      	bne.n	8005b7e <rt_test_009_001_execute+0x2e>
    test_assert(largest1 == largest2, "largest fragment size changed");
 8005c3e:	9802      	ldr	r0, [sp, #8]
 8005c40:	9b00      	ldr	r3, [sp, #0]
 8005c42:	4914      	ldr	r1, [pc, #80]	; (8005c94 <rt_test_009_001_execute+0x144>)
 8005c44:	1ac3      	subs	r3, r0, r3
 8005c46:	4258      	negs	r0, r3
 8005c48:	4158      	adcs	r0, r3
 8005c4a:	f7fa fdd9 	bl	8000800 <_test_assert>
 8005c4e:	e796      	b.n	8005b7e <rt_test_009_001_execute+0x2e>
 8005c50:	200008f0 	.word	0x200008f0
 8005c54:	20001254 	.word	0x20001254
 8005c58:	20000aac 	.word	0x20000aac
 8005c5c:	080078b8 	.word	0x080078b8
 8005c60:	08008aa0 	.word	0x08008aa0
 8005c64:	08008874 	.word	0x08008874
 8005c68:	2000126c 	.word	0x2000126c
 8005c6c:	08008ad0 	.word	0x08008ad0
 8005c70:	08008878 	.word	0x08008878
 8005c74:	08008aa8 	.word	0x08008aa8
 8005c78:	08008ab0 	.word	0x08008ab0
 8005c7c:	08008ab4 	.word	0x08008ab4
 8005c80:	08008ae8 	.word	0x08008ae8
 8005c84:	08008950 	.word	0x08008950
 8005c88:	08008a38 	.word	0x08008a38
 8005c8c:	08008a3c 	.word	0x08008a3c
 8005c90:	08008a54 	.word	0x08008a54
 8005c94:	08008a70 	.word	0x08008a70
	...

08005ca0 <rt_test_008_007_execute>:

static void rt_test_008_007_execute(void) {
 8005ca0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  event_listener_t el1, el2;
  systime_t target_time;

  /* [8.7.1] Registering on two event sources associating them with
     flags 1 and 4.*/
  test_set_step(1);
 8005ca4:	4d3c      	ldr	r5, [pc, #240]	; (8005d98 <rt_test_008_007_execute+0xf8>)
 8005ca6:	2301      	movs	r3, #1
static void rt_test_008_007_execute(void) {
 8005ca8:	b08b      	sub	sp, #44	; 0x2c
  test_set_step(1);
 8005caa:	602b      	str	r3, [r5, #0]
 8005cac:	2220      	movs	r2, #32
 8005cae:	f382 8811 	msr	BASEPRI, r2
  elp->next     = esp->next;
 8005cb2:	f8df 8104 	ldr.w	r8, [pc, #260]	; 8005db8 <rt_test_008_007_execute+0x118>
  elp->listener = currp;
 8005cb6:	4f39      	ldr	r7, [pc, #228]	; (8005d9c <rt_test_008_007_execute+0xfc>)
  elp->next     = esp->next;
 8005cb8:	f8d8 0000 	ldr.w	r0, [r8]
  elp->listener = currp;
 8005cbc:	69b9      	ldr	r1, [r7, #24]
  elp->events   = events;
 8005cbe:	9307      	str	r3, [sp, #28]
  elp->next     = esp->next;
 8005cc0:	ae0a      	add	r6, sp, #40	; 0x28
  elp->flags    = (eventflags_t)0;
 8005cc2:	2300      	movs	r3, #0
  elp->next     = esp->next;
 8005cc4:	f846 0d14 	str.w	r0, [r6, #-20]!
  elp->wflags   = wflags;
 8005cc8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  elp->listener = currp;
 8005ccc:	9106      	str	r1, [sp, #24]
  esp->next     = elp;
 8005cce:	f8c8 6000 	str.w	r6, [r8]
  elp->wflags   = wflags;
 8005cd2:	e9cd 3008 	strd	r3, r0, [sp, #32]
 8005cd6:	f383 8811 	msr	BASEPRI, r3
 8005cda:	f382 8811 	msr	BASEPRI, r2
  elp->next     = esp->next;
 8005cde:	f8df 90dc 	ldr.w	r9, [pc, #220]	; 8005dbc <rt_test_008_007_execute+0x11c>
  elp->listener = currp;
 8005ce2:	69ba      	ldr	r2, [r7, #24]
  elp->next     = esp->next;
 8005ce4:	f8d9 1000 	ldr.w	r1, [r9]
  elp->flags    = (eventflags_t)0;
 8005ce8:	9303      	str	r3, [sp, #12]
  elp->next     = esp->next;
 8005cea:	ac0a      	add	r4, sp, #40	; 0x28
  elp->events   = events;
 8005cec:	f04f 0a04 	mov.w	sl, #4
  elp->next     = esp->next;
 8005cf0:	f844 1d28 	str.w	r1, [r4, #-40]!
  elp->wflags   = wflags;
 8005cf4:	9004      	str	r0, [sp, #16]
  elp->listener = currp;
 8005cf6:	9201      	str	r2, [sp, #4]
  esp->next     = elp;
 8005cf8:	f8c9 4000 	str.w	r4, [r9]
  elp->events   = events;
 8005cfc:	f8cd a008 	str.w	sl, [sp, #8]
 8005d00:	f383 8811 	msr	BASEPRI, r3
  }

  /* [8.7.2] Getting current time and starting a broadcaster thread,
     the thread broadcast the first Event Source immediately and the
     other after 50mS.*/
  test_set_step(2);
 8005d04:	2302      	movs	r3, #2
 8005d06:	602b      	str	r3, [r5, #0]
  {
    target_time = chTimeAddX(test_wait_tick(), TIME_MS2I(50));
 8005d08:	f7fc fce2 	bl	80026d0 <test_wait_tick>
 8005d0c:	69ba      	ldr	r2, [r7, #24]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 8005d0e:	4b24      	ldr	r3, [pc, #144]	; (8005da0 <rt_test_008_007_execute+0x100>)
 8005d10:	6891      	ldr	r1, [r2, #8]
 8005d12:	4a24      	ldr	r2, [pc, #144]	; (8005da4 <rt_test_008_007_execute+0x104>)
    target_time = chTimeAddX(test_wait_tick(), TIME_MS2I(50));
 8005d14:	4683      	mov	fp, r0
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 8005d16:	3901      	subs	r1, #1
 8005d18:	4823      	ldr	r0, [pc, #140]	; (8005da8 <rt_test_008_007_execute+0x108>)
 8005d1a:	f7fb ff81 	bl	8001c20 <chThdCreateStatic.constprop.62>
 8005d1e:	4a23      	ldr	r2, [pc, #140]	; (8005dac <rt_test_008_007_execute+0x10c>)
  }

  /* [8.7.3] Calling chEvtWaitAll() then verifying that both event
     flags have been received after 50mS and that the event flags mask
     has been emptied.*/
  test_set_step(3);
 8005d20:	2303      	movs	r3, #3
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 8005d22:	6010      	str	r0, [r2, #0]
  test_set_step(3);
 8005d24:	602b      	str	r3, [r5, #0]
  {
    m = chEvtWaitAll(5);
 8005d26:	f7fc f87b 	bl	8001e20 <chEvtWaitAll.constprop.37>
    test_assert_time_window(target_time,
 8005d2a:	f50b 7102 	add.w	r1, fp, #520	; 0x208
 8005d2e:	f50b 70fa 	add.w	r0, fp, #500	; 0x1f4
 8005d32:	f7fa fb8d 	bl	8000450 <_test_assert_time_window.constprop.2>
 8005d36:	b110      	cbz	r0, 8005d3e <rt_test_008_007_execute+0x9e>
    chEvtUnregister(&es1, &el1);
    chEvtUnregister(&es2, &el2);
    test_assert(!chEvtIsListeningI(&es1), "stuck listener");
    test_assert(!chEvtIsListeningI(&es2), "stuck listener");
  }
}
 8005d38:	b00b      	add	sp, #44	; 0x2c
 8005d3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    m = chEvtGetAndClearEvents(ALL_EVENTS);
 8005d3e:	f7fa fb77 	bl	8000430 <chEvtGetAndClearEvents.constprop.43>
    test_assert(m == 0, "stuck event");
 8005d42:	fab0 f080 	clz	r0, r0
 8005d46:	0940      	lsrs	r0, r0, #5
 8005d48:	4919      	ldr	r1, [pc, #100]	; (8005db0 <rt_test_008_007_execute+0x110>)
 8005d4a:	f7fa fd59 	bl	8000800 <_test_assert>
 8005d4e:	2800      	cmp	r0, #0
 8005d50:	d1f2      	bne.n	8005d38 <rt_test_008_007_execute+0x98>
    test_wait_threads();
 8005d52:	f7ff fc6d 	bl	8005630 <test_wait_threads>
    chEvtUnregister(&es1, &el1);
 8005d56:	4631      	mov	r1, r6
 8005d58:	4640      	mov	r0, r8
  test_set_step(4);
 8005d5a:	f8c5 a000 	str.w	sl, [r5]
    chEvtUnregister(&es1, &el1);
 8005d5e:	f7fa ffcf 	bl	8000d00 <chEvtUnregister>
    chEvtUnregister(&es2, &el2);
 8005d62:	4621      	mov	r1, r4
 8005d64:	4648      	mov	r0, r9
 8005d66:	f7fa ffcb 	bl	8000d00 <chEvtUnregister>
    test_assert(!chEvtIsListeningI(&es1), "stuck listener");
 8005d6a:	f8d8 0000 	ldr.w	r0, [r8]
 8005d6e:	4911      	ldr	r1, [pc, #68]	; (8005db4 <rt_test_008_007_execute+0x114>)
 8005d70:	eba0 0008 	sub.w	r0, r0, r8
 8005d74:	fab0 f080 	clz	r0, r0
 8005d78:	0940      	lsrs	r0, r0, #5
 8005d7a:	f7fa fd41 	bl	8000800 <_test_assert>
 8005d7e:	2800      	cmp	r0, #0
 8005d80:	d1da      	bne.n	8005d38 <rt_test_008_007_execute+0x98>
    test_assert(!chEvtIsListeningI(&es2), "stuck listener");
 8005d82:	f8d9 0000 	ldr.w	r0, [r9]
 8005d86:	490b      	ldr	r1, [pc, #44]	; (8005db4 <rt_test_008_007_execute+0x114>)
 8005d88:	eba0 0009 	sub.w	r0, r0, r9
 8005d8c:	fab0 f080 	clz	r0, r0
 8005d90:	0940      	lsrs	r0, r0, #5
 8005d92:	f7fa fd35 	bl	8000800 <_test_assert>
 8005d96:	e7cf      	b.n	8005d38 <rt_test_008_007_execute+0x98>
 8005d98:	20001254 	.word	0x20001254
 8005d9c:	200008f0 	.word	0x200008f0
 8005da0:	08008874 	.word	0x08008874
 8005da4:	08003ce1 	.word	0x08003ce1
 8005da8:	20000b40 	.word	0x20000b40
 8005dac:	2000126c 	.word	0x2000126c
 8005db0:	08008a1c 	.word	0x08008a1c
 8005db4:	08008930 	.word	0x08008930
 8005db8:	20000808 	.word	0x20000808
 8005dbc:	2000080c 	.word	0x2000080c

08005dc0 <rt_test_008_005_execute>:
static void rt_test_008_005_execute(void) {
 8005dc0:	b538      	push	{r3, r4, r5, lr}
    chEvtAddEvents(5);
 8005dc2:	2005      	movs	r0, #5
  test_set_step(2);
 8005dc4:	4c28      	ldr	r4, [pc, #160]	; (8005e68 <rt_test_008_005_execute+0xa8>)
    chEvtAddEvents(5);
 8005dc6:	f7fa ff8b 	bl	8000ce0 <chEvtAddEvents>
  test_set_step(2);
 8005dca:	2302      	movs	r3, #2
 8005dcc:	6023      	str	r3, [r4, #0]
    m = chEvtWaitAll(5);
 8005dce:	f7fc f827 	bl	8001e20 <chEvtWaitAll.constprop.37>
    test_assert(m == 5, "unexpected pending bit");
 8005dd2:	f1a0 0005 	sub.w	r0, r0, #5
 8005dd6:	fab0 f080 	clz	r0, r0
 8005dda:	4924      	ldr	r1, [pc, #144]	; (8005e6c <rt_test_008_005_execute+0xac>)
 8005ddc:	0940      	lsrs	r0, r0, #5
 8005dde:	f7fa fd0f 	bl	8000800 <_test_assert>
 8005de2:	b100      	cbz	r0, 8005de6 <rt_test_008_005_execute+0x26>
}
 8005de4:	bd38      	pop	{r3, r4, r5, pc}
    m = chEvtGetAndClearEvents(ALL_EVENTS);
 8005de6:	f7fa fb23 	bl	8000430 <chEvtGetAndClearEvents.constprop.43>
    test_assert(m == 0, "stuck event");
 8005dea:	fab0 f080 	clz	r0, r0
 8005dee:	0940      	lsrs	r0, r0, #5
 8005df0:	491f      	ldr	r1, [pc, #124]	; (8005e70 <rt_test_008_005_execute+0xb0>)
 8005df2:	f7fa fd05 	bl	8000800 <_test_assert>
 8005df6:	2800      	cmp	r0, #0
 8005df8:	d1f4      	bne.n	8005de4 <rt_test_008_005_execute+0x24>
    chEvtAddEvents(4);
 8005dfa:	2004      	movs	r0, #4
 8005dfc:	f7fa ff70 	bl	8000ce0 <chEvtAddEvents>
  test_set_step(4);
 8005e00:	2304      	movs	r3, #4
 8005e02:	6023      	str	r3, [r4, #0]
    target_time = chTimeAddX(test_wait_tick(), TIME_MS2I(50));
 8005e04:	f7fc fc64 	bl	80026d0 <test_wait_tick>
  return ch.rlist.current;
 8005e08:	4b1a      	ldr	r3, [pc, #104]	; (8005e74 <rt_test_008_005_execute+0xb4>)
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 8005e0a:	4a1b      	ldr	r2, [pc, #108]	; (8005e78 <rt_test_008_005_execute+0xb8>)
 8005e0c:	699b      	ldr	r3, [r3, #24]
 8005e0e:	6899      	ldr	r1, [r3, #8]
    target_time = chTimeAddX(test_wait_tick(), TIME_MS2I(50));
 8005e10:	4605      	mov	r5, r0
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 8005e12:	3901      	subs	r1, #1
 8005e14:	4819      	ldr	r0, [pc, #100]	; (8005e7c <rt_test_008_005_execute+0xbc>)
 8005e16:	f7fb ff03 	bl	8001c20 <chThdCreateStatic.constprop.62>
 8005e1a:	4a19      	ldr	r2, [pc, #100]	; (8005e80 <rt_test_008_005_execute+0xc0>)
  test_set_step(5);
 8005e1c:	2305      	movs	r3, #5
 8005e1e:	6023      	str	r3, [r4, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 8005e20:	6010      	str	r0, [r2, #0]
    m = chEvtWaitAll(5);
 8005e22:	f7fb fffd 	bl	8001e20 <chEvtWaitAll.constprop.37>
    test_assert_time_window(target_time,
 8005e26:	f505 7102 	add.w	r1, r5, #520	; 0x208
    m = chEvtWaitAll(5);
 8005e2a:	4604      	mov	r4, r0
    test_assert_time_window(target_time,
 8005e2c:	f505 70fa 	add.w	r0, r5, #500	; 0x1f4
 8005e30:	f7fa fb0e 	bl	8000450 <_test_assert_time_window.constprop.2>
 8005e34:	2800      	cmp	r0, #0
 8005e36:	d1d5      	bne.n	8005de4 <rt_test_008_005_execute+0x24>
    test_assert(m == 5, "event flags error");
 8005e38:	f1a4 0005 	sub.w	r0, r4, #5
 8005e3c:	fab0 f080 	clz	r0, r0
 8005e40:	0940      	lsrs	r0, r0, #5
 8005e42:	4910      	ldr	r1, [pc, #64]	; (8005e84 <rt_test_008_005_execute+0xc4>)
 8005e44:	f7fa fcdc 	bl	8000800 <_test_assert>
 8005e48:	2800      	cmp	r0, #0
 8005e4a:	d1cb      	bne.n	8005de4 <rt_test_008_005_execute+0x24>
    m = chEvtGetAndClearEvents(ALL_EVENTS);
 8005e4c:	f7fa faf0 	bl	8000430 <chEvtGetAndClearEvents.constprop.43>
    test_assert(m == 0, "stuck event");
 8005e50:	fab0 f080 	clz	r0, r0
 8005e54:	0940      	lsrs	r0, r0, #5
 8005e56:	4906      	ldr	r1, [pc, #24]	; (8005e70 <rt_test_008_005_execute+0xb0>)
 8005e58:	f7fa fcd2 	bl	8000800 <_test_assert>
 8005e5c:	2800      	cmp	r0, #0
 8005e5e:	d1c1      	bne.n	8005de4 <rt_test_008_005_execute+0x24>
}
 8005e60:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    test_wait_threads();
 8005e64:	f7ff bbe4 	b.w	8005630 <test_wait_threads>
 8005e68:	20001254 	.word	0x20001254
 8005e6c:	080089c0 	.word	0x080089c0
 8005e70:	08008a1c 	.word	0x08008a1c
 8005e74:	200008f0 	.word	0x200008f0
 8005e78:	08003d21 	.word	0x08003d21
 8005e7c:	20000b40 	.word	0x20000b40
 8005e80:	2000126c 	.word	0x2000126c
 8005e84:	080089d8 	.word	0x080089d8
	...

08005e90 <rt_test_008_004_execute>:
static void rt_test_008_004_execute(void) {
 8005e90:	b538      	push	{r3, r4, r5, lr}
    chEvtAddEvents(5);
 8005e92:	2005      	movs	r0, #5
  test_set_step(2);
 8005e94:	4c27      	ldr	r4, [pc, #156]	; (8005f34 <rt_test_008_004_execute+0xa4>)
    chEvtAddEvents(5);
 8005e96:	f7fa ff23 	bl	8000ce0 <chEvtAddEvents>
  test_set_step(2);
 8005e9a:	2302      	movs	r3, #2
 8005e9c:	6023      	str	r3, [r4, #0]
    m = chEvtWaitAny(ALL_EVENTS);
 8005e9e:	f7fb ffa7 	bl	8001df0 <chEvtWaitAny.constprop.38>
    test_assert(m == 5, "unexpected pending bit");
 8005ea2:	f1a0 0005 	sub.w	r0, r0, #5
 8005ea6:	fab0 f080 	clz	r0, r0
 8005eaa:	4923      	ldr	r1, [pc, #140]	; (8005f38 <rt_test_008_004_execute+0xa8>)
 8005eac:	0940      	lsrs	r0, r0, #5
 8005eae:	f7fa fca7 	bl	8000800 <_test_assert>
 8005eb2:	b100      	cbz	r0, 8005eb6 <rt_test_008_004_execute+0x26>
}
 8005eb4:	bd38      	pop	{r3, r4, r5, pc}
    m = chEvtGetAndClearEvents(ALL_EVENTS);
 8005eb6:	f7fa fabb 	bl	8000430 <chEvtGetAndClearEvents.constprop.43>
    test_assert(m == 0, "stuck event");
 8005eba:	fab0 f080 	clz	r0, r0
 8005ebe:	0940      	lsrs	r0, r0, #5
 8005ec0:	491e      	ldr	r1, [pc, #120]	; (8005f3c <rt_test_008_004_execute+0xac>)
 8005ec2:	f7fa fc9d 	bl	8000800 <_test_assert>
 8005ec6:	2800      	cmp	r0, #0
 8005ec8:	d1f4      	bne.n	8005eb4 <rt_test_008_004_execute+0x24>
  test_set_step(3);
 8005eca:	2303      	movs	r3, #3
 8005ecc:	6023      	str	r3, [r4, #0]
    target_time = chTimeAddX(test_wait_tick(), TIME_MS2I(50));
 8005ece:	f7fc fbff 	bl	80026d0 <test_wait_tick>
 8005ed2:	4b1b      	ldr	r3, [pc, #108]	; (8005f40 <rt_test_008_004_execute+0xb0>)
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 8005ed4:	4a1b      	ldr	r2, [pc, #108]	; (8005f44 <rt_test_008_004_execute+0xb4>)
 8005ed6:	699b      	ldr	r3, [r3, #24]
 8005ed8:	6899      	ldr	r1, [r3, #8]
    target_time = chTimeAddX(test_wait_tick(), TIME_MS2I(50));
 8005eda:	4605      	mov	r5, r0
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 8005edc:	3901      	subs	r1, #1
 8005ede:	481a      	ldr	r0, [pc, #104]	; (8005f48 <rt_test_008_004_execute+0xb8>)
 8005ee0:	f7fb fe9e 	bl	8001c20 <chThdCreateStatic.constprop.62>
 8005ee4:	4a19      	ldr	r2, [pc, #100]	; (8005f4c <rt_test_008_004_execute+0xbc>)
  test_set_step(4);
 8005ee6:	2304      	movs	r3, #4
 8005ee8:	6023      	str	r3, [r4, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 8005eea:	6010      	str	r0, [r2, #0]
    m = chEvtWaitAny(ALL_EVENTS);
 8005eec:	f7fb ff80 	bl	8001df0 <chEvtWaitAny.constprop.38>
    test_assert_time_window(target_time,
 8005ef0:	f505 7102 	add.w	r1, r5, #520	; 0x208
    m = chEvtWaitAny(ALL_EVENTS);
 8005ef4:	4604      	mov	r4, r0
    test_assert_time_window(target_time,
 8005ef6:	f505 70fa 	add.w	r0, r5, #500	; 0x1f4
 8005efa:	f7fa faa9 	bl	8000450 <_test_assert_time_window.constprop.2>
 8005efe:	2800      	cmp	r0, #0
 8005f00:	d1d8      	bne.n	8005eb4 <rt_test_008_004_execute+0x24>
    test_assert(m == 1, "event flag error");
 8005f02:	f1a4 0001 	sub.w	r0, r4, #1
 8005f06:	fab0 f080 	clz	r0, r0
 8005f0a:	0940      	lsrs	r0, r0, #5
 8005f0c:	4910      	ldr	r1, [pc, #64]	; (8005f50 <rt_test_008_004_execute+0xc0>)
 8005f0e:	f7fa fc77 	bl	8000800 <_test_assert>
 8005f12:	2800      	cmp	r0, #0
 8005f14:	d1ce      	bne.n	8005eb4 <rt_test_008_004_execute+0x24>
    m = chEvtGetAndClearEvents(ALL_EVENTS);
 8005f16:	f7fa fa8b 	bl	8000430 <chEvtGetAndClearEvents.constprop.43>
    test_assert(m == 0, "stuck event");
 8005f1a:	fab0 f080 	clz	r0, r0
 8005f1e:	0940      	lsrs	r0, r0, #5
 8005f20:	4906      	ldr	r1, [pc, #24]	; (8005f3c <rt_test_008_004_execute+0xac>)
 8005f22:	f7fa fc6d 	bl	8000800 <_test_assert>
 8005f26:	2800      	cmp	r0, #0
 8005f28:	d1c4      	bne.n	8005eb4 <rt_test_008_004_execute+0x24>
}
 8005f2a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    test_wait_threads();
 8005f2e:	f7ff bb7f 	b.w	8005630 <test_wait_threads>
 8005f32:	bf00      	nop
 8005f34:	20001254 	.word	0x20001254
 8005f38:	080089c0 	.word	0x080089c0
 8005f3c:	08008a1c 	.word	0x08008a1c
 8005f40:	200008f0 	.word	0x200008f0
 8005f44:	08003d21 	.word	0x08003d21
 8005f48:	20000b40 	.word	0x20000b40
 8005f4c:	2000126c 	.word	0x2000126c
 8005f50:	0800899c 	.word	0x0800899c
	...

08005f60 <rt_test_008_003_execute>:
static void rt_test_008_003_execute(void) {
 8005f60:	b538      	push	{r3, r4, r5, lr}
    chEvtAddEvents(7);
 8005f62:	2007      	movs	r0, #7
  test_set_step(2);
 8005f64:	4c33      	ldr	r4, [pc, #204]	; (8006034 <rt_test_008_003_execute+0xd4>)
    chEvtAddEvents(7);
 8005f66:	f7fa febb 	bl	8000ce0 <chEvtAddEvents>
  test_set_step(2);
 8005f6a:	2302      	movs	r3, #2
 8005f6c:	6023      	str	r3, [r4, #0]
    m = chEvtWaitOne(ALL_EVENTS);
 8005f6e:	f7fb ff1f 	bl	8001db0 <chEvtWaitOne.constprop.39>
    test_assert(m == 1, "single event error");
 8005f72:	f1a0 0001 	sub.w	r0, r0, #1
 8005f76:	fab0 f080 	clz	r0, r0
 8005f7a:	492f      	ldr	r1, [pc, #188]	; (8006038 <rt_test_008_003_execute+0xd8>)
 8005f7c:	0940      	lsrs	r0, r0, #5
 8005f7e:	f7fa fc3f 	bl	8000800 <_test_assert>
 8005f82:	b100      	cbz	r0, 8005f86 <rt_test_008_003_execute+0x26>
}
 8005f84:	bd38      	pop	{r3, r4, r5, pc}
    m = chEvtWaitOne(ALL_EVENTS);
 8005f86:	f7fb ff13 	bl	8001db0 <chEvtWaitOne.constprop.39>
    test_assert(m == 2, "single event error");
 8005f8a:	f1a0 0002 	sub.w	r0, r0, #2
 8005f8e:	fab0 f080 	clz	r0, r0
 8005f92:	4929      	ldr	r1, [pc, #164]	; (8006038 <rt_test_008_003_execute+0xd8>)
 8005f94:	0940      	lsrs	r0, r0, #5
 8005f96:	f7fa fc33 	bl	8000800 <_test_assert>
 8005f9a:	2800      	cmp	r0, #0
 8005f9c:	d1f2      	bne.n	8005f84 <rt_test_008_003_execute+0x24>
    m = chEvtWaitOne(ALL_EVENTS);
 8005f9e:	f7fb ff07 	bl	8001db0 <chEvtWaitOne.constprop.39>
    test_assert(m == 4, "single event error");
 8005fa2:	f1a0 0004 	sub.w	r0, r0, #4
 8005fa6:	fab0 f080 	clz	r0, r0
 8005faa:	4923      	ldr	r1, [pc, #140]	; (8006038 <rt_test_008_003_execute+0xd8>)
 8005fac:	0940      	lsrs	r0, r0, #5
 8005fae:	f7fa fc27 	bl	8000800 <_test_assert>
 8005fb2:	2800      	cmp	r0, #0
 8005fb4:	d1e6      	bne.n	8005f84 <rt_test_008_003_execute+0x24>
    m = chEvtGetAndClearEvents(ALL_EVENTS);
 8005fb6:	f7fa fa3b 	bl	8000430 <chEvtGetAndClearEvents.constprop.43>
    test_assert(m == 0, "stuck event");
 8005fba:	fab0 f080 	clz	r0, r0
 8005fbe:	0940      	lsrs	r0, r0, #5
 8005fc0:	491e      	ldr	r1, [pc, #120]	; (800603c <rt_test_008_003_execute+0xdc>)
 8005fc2:	f7fa fc1d 	bl	8000800 <_test_assert>
 8005fc6:	2800      	cmp	r0, #0
 8005fc8:	d1dc      	bne.n	8005f84 <rt_test_008_003_execute+0x24>
  test_set_step(3);
 8005fca:	2303      	movs	r3, #3
 8005fcc:	6023      	str	r3, [r4, #0]
    target_time = chTimeAddX(test_wait_tick(), TIME_MS2I(50));
 8005fce:	f7fc fb7f 	bl	80026d0 <test_wait_tick>
 8005fd2:	4b1b      	ldr	r3, [pc, #108]	; (8006040 <rt_test_008_003_execute+0xe0>)
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 8005fd4:	4a1b      	ldr	r2, [pc, #108]	; (8006044 <rt_test_008_003_execute+0xe4>)
 8005fd6:	699b      	ldr	r3, [r3, #24]
 8005fd8:	6899      	ldr	r1, [r3, #8]
    target_time = chTimeAddX(test_wait_tick(), TIME_MS2I(50));
 8005fda:	4605      	mov	r5, r0
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 8005fdc:	3901      	subs	r1, #1
 8005fde:	481a      	ldr	r0, [pc, #104]	; (8006048 <rt_test_008_003_execute+0xe8>)
 8005fe0:	f7fb fe1e 	bl	8001c20 <chThdCreateStatic.constprop.62>
 8005fe4:	4a19      	ldr	r2, [pc, #100]	; (800604c <rt_test_008_003_execute+0xec>)
  test_set_step(4);
 8005fe6:	2304      	movs	r3, #4
 8005fe8:	6023      	str	r3, [r4, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 8005fea:	6010      	str	r0, [r2, #0]
    m = chEvtWaitOne(ALL_EVENTS);
 8005fec:	f7fb fee0 	bl	8001db0 <chEvtWaitOne.constprop.39>
    test_assert_time_window(target_time,
 8005ff0:	f505 7102 	add.w	r1, r5, #520	; 0x208
    m = chEvtWaitOne(ALL_EVENTS);
 8005ff4:	4604      	mov	r4, r0
    test_assert_time_window(target_time,
 8005ff6:	f505 70fa 	add.w	r0, r5, #500	; 0x1f4
 8005ffa:	f7fa fa29 	bl	8000450 <_test_assert_time_window.constprop.2>
 8005ffe:	2800      	cmp	r0, #0
 8006000:	d1c0      	bne.n	8005f84 <rt_test_008_003_execute+0x24>
    test_assert(m == 1, "event flag error");
 8006002:	f1a4 0001 	sub.w	r0, r4, #1
 8006006:	fab0 f080 	clz	r0, r0
 800600a:	0940      	lsrs	r0, r0, #5
 800600c:	4910      	ldr	r1, [pc, #64]	; (8006050 <rt_test_008_003_execute+0xf0>)
 800600e:	f7fa fbf7 	bl	8000800 <_test_assert>
 8006012:	2800      	cmp	r0, #0
 8006014:	d1b6      	bne.n	8005f84 <rt_test_008_003_execute+0x24>
    m = chEvtGetAndClearEvents(ALL_EVENTS);
 8006016:	f7fa fa0b 	bl	8000430 <chEvtGetAndClearEvents.constprop.43>
    test_assert(m == 0, "stuck event");
 800601a:	fab0 f080 	clz	r0, r0
 800601e:	0940      	lsrs	r0, r0, #5
 8006020:	4906      	ldr	r1, [pc, #24]	; (800603c <rt_test_008_003_execute+0xdc>)
 8006022:	f7fa fbed 	bl	8000800 <_test_assert>
 8006026:	2800      	cmp	r0, #0
 8006028:	d1ac      	bne.n	8005f84 <rt_test_008_003_execute+0x24>
}
 800602a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    test_wait_threads();
 800602e:	f7ff baff 	b.w	8005630 <test_wait_threads>
 8006032:	bf00      	nop
 8006034:	20001254 	.word	0x20001254
 8006038:	08008978 	.word	0x08008978
 800603c:	08008a1c 	.word	0x08008a1c
 8006040:	200008f0 	.word	0x200008f0
 8006044:	08003d21 	.word	0x08003d21
 8006048:	20000b40 	.word	0x20000b40
 800604c:	2000126c 	.word	0x2000126c
 8006050:	0800899c 	.word	0x0800899c
	...

08006060 <rt_test_007_001_execute>:
 * - [7.1.1] Starting the messenger thread.
 * - [7.1.2] Waiting for four messages then testing the receive order.
 * .
 */

static void rt_test_007_001_execute(void) {
 8006060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006062:	4b14      	ldr	r3, [pc, #80]	; (80060b4 <rt_test_007_001_execute+0x54>)
  thread_t *tp;
  msg_t msg;

  /* [7.1.1] Starting the messenger thread.*/
  test_set_step(1);
 8006064:	4c14      	ldr	r4, [pc, #80]	; (80060b8 <rt_test_007_001_execute+0x58>)
 8006066:	699b      	ldr	r3, [r3, #24]
  {
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() + 1,
 8006068:	4a14      	ldr	r2, [pc, #80]	; (80060bc <rt_test_007_001_execute+0x5c>)
 800606a:	6899      	ldr	r1, [r3, #8]
 800606c:	4814      	ldr	r0, [pc, #80]	; (80060c0 <rt_test_007_001_execute+0x60>)
 800606e:	3101      	adds	r1, #1
  test_set_step(1);
 8006070:	2501      	movs	r5, #1
 8006072:	6025      	str	r5, [r4, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() + 1,
 8006074:	f7fb fdd4 	bl	8001c20 <chThdCreateStatic.constprop.62>
 8006078:	4a12      	ldr	r2, [pc, #72]	; (80060c4 <rt_test_007_001_execute+0x64>)
                                   msg_thread1, chThdGetSelfX());
  }

  /* [7.1.2] Waiting for four messages then testing the receive
     order.*/
  test_set_step(2);
 800607a:	2302      	movs	r3, #2
 800607c:	6023      	str	r3, [r4, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() + 1,
 800607e:	6010      	str	r0, [r2, #0]
  test_set_step(2);
 8006080:	2404      	movs	r4, #4
 8006082:	2720      	movs	r7, #32
 8006084:	2600      	movs	r6, #0
  {
    unsigned i;

    for (i = 0; i < 4; i++) {
      tp = chMsgWait();
 8006086:	f7fc fb83 	bl	8002790 <chMsgWait>
      msg = chMsgGet(tp);
 800608a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800608c:	f387 8811 	msr	BASEPRI, r7
 8006090:	4629      	mov	r1, r5
 8006092:	f7fb fd95 	bl	8001bc0 <chSchWakeupS>
 8006096:	f386 8811 	msr	BASEPRI, r6
      chMsgRelease(tp, msg);
      test_emit_token(msg);
 800609a:	b2e8      	uxtb	r0, r5
 800609c:	f7fa fc50 	bl	8000940 <test_emit_token>
    for (i = 0; i < 4; i++) {
 80060a0:	3c01      	subs	r4, #1
 80060a2:	d1f0      	bne.n	8006086 <rt_test_007_001_execute+0x26>
    }
    test_wait_threads();
 80060a4:	f7ff fac4 	bl	8005630 <test_wait_threads>
    test_assert_sequence("ABCD", "invalid sequence");
 80060a8:	4907      	ldr	r1, [pc, #28]	; (80060c8 <rt_test_007_001_execute+0x68>)
 80060aa:	4808      	ldr	r0, [pc, #32]	; (80060cc <rt_test_007_001_execute+0x6c>)
  }
}
 80060ac:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    test_assert_sequence("ABCD", "invalid sequence");
 80060b0:	f7fa bcbe 	b.w	8000a30 <_test_assert_sequence>
 80060b4:	200008f0 	.word	0x200008f0
 80060b8:	20001254 	.word	0x20001254
 80060bc:	08002871 	.word	0x08002871
 80060c0:	20000b40 	.word	0x20000b40
 80060c4:	2000126c 	.word	0x2000126c
 80060c8:	08008950 	.word	0x08008950
 80060cc:	08007810 	.word	0x08007810

080060d0 <rt_test_006_009_execute>:

static void rt_test_006_009_execute(void) {
 80060d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060d2:	4b1c      	ldr	r3, [pc, #112]	; (8006144 <rt_test_006_009_execute+0x74>)

  /* [6.9.2] Thread A is created at priority P(+1), it locks M2, locks
     M1 and goes to wait on C1.*/
  test_set_step(2);
  {
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread8, "A");
 80060d4:	4e1c      	ldr	r6, [pc, #112]	; (8006148 <rt_test_006_009_execute+0x78>)
  return chThdGetSelfX()->prio;
 80060d6:	699b      	ldr	r3, [r3, #24]
  test_set_step(2);
 80060d8:	4c1c      	ldr	r4, [pc, #112]	; (800614c <rt_test_006_009_execute+0x7c>)
 80060da:	689f      	ldr	r7, [r3, #8]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread8, "A");
 80060dc:	4a1c      	ldr	r2, [pc, #112]	; (8006150 <rt_test_006_009_execute+0x80>)
 80060de:	4b1d      	ldr	r3, [pc, #116]	; (8006154 <rt_test_006_009_execute+0x84>)
 80060e0:	4d1d      	ldr	r5, [pc, #116]	; (8006158 <rt_test_006_009_execute+0x88>)
 80060e2:	1c79      	adds	r1, r7, #1
  test_set_step(2);
 80060e4:	f04f 0c02 	mov.w	ip, #2
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread8, "A");
 80060e8:	4630      	mov	r0, r6
  test_set_step(2);
 80060ea:	f8c4 c000 	str.w	ip, [r4]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread8, "A");
 80060ee:	f7fb fd97 	bl	8001c20 <chThdCreateStatic.constprop.62>
  }

  /* [6.9.3] Thread C is created at priority P(+2), it enqueues on M1
     and boosts TA priority at P(+2).*/
  test_set_step(3);
 80060f2:	f04f 0c03 	mov.w	ip, #3
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread8, "A");
 80060f6:	6028      	str	r0, [r5, #0]
  {
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread6, "C");
 80060f8:	1cb9      	adds	r1, r7, #2
 80060fa:	f506 70a4 	add.w	r0, r6, #328	; 0x148
 80060fe:	4b17      	ldr	r3, [pc, #92]	; (800615c <rt_test_006_009_execute+0x8c>)
 8006100:	4a17      	ldr	r2, [pc, #92]	; (8006160 <rt_test_006_009_execute+0x90>)
  test_set_step(3);
 8006102:	f8c4 c000 	str.w	ip, [r4]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread6, "C");
 8006106:	f7fb fd8b 	bl	8001c20 <chThdCreateStatic.constprop.62>

  /* [6.9.4] Thread B is created at priority P(+3), it enqueues on M2
     and boosts TA priority at P(+3).*/
  test_set_step(4);
  {
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread9, "B");
 800610a:	1cf9      	adds	r1, r7, #3
 800610c:	4a15      	ldr	r2, [pc, #84]	; (8006164 <rt_test_006_009_execute+0x94>)
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread6, "C");
 800610e:	6068      	str	r0, [r5, #4]
  test_set_step(4);
 8006110:	2704      	movs	r7, #4
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread9, "B");
 8006112:	f506 7024 	add.w	r0, r6, #656	; 0x290
 8006116:	4b14      	ldr	r3, [pc, #80]	; (8006168 <rt_test_006_009_execute+0x98>)
  test_set_step(4);
 8006118:	6027      	str	r7, [r4, #0]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread9, "B");
 800611a:	f7fb fd81 	bl	8001c20 <chThdCreateStatic.constprop.62>
  }

  /* [6.9.5] Signaling C1: TA wakes up, unlocks M1 and priority goes to
     P(+2). TB locks M1, unlocks M1 and completes. TA unlocks M2 and
     priority goes to P(+1). TC waits on C1. TA completes.*/
  test_set_step(5);
 800611e:	2305      	movs	r3, #5
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread9, "B");
 8006120:	60a8      	str	r0, [r5, #8]
  test_set_step(5);
 8006122:	6023      	str	r3, [r4, #0]
  {
    chCondSignal(&c1);
 8006124:	f7fb fdc4 	bl	8001cb0 <chCondSignal.constprop.51>
  }

  /* [6.9.6] Signaling C1: TC wakes up, unlocks M1 and completes.*/
  test_set_step(6);
 8006128:	2306      	movs	r3, #6
 800612a:	6023      	str	r3, [r4, #0]
  {
    chCondSignal(&c1);
 800612c:	f7fb fdc0 	bl	8001cb0 <chCondSignal.constprop.51>
  }

  /* [6.9.7] Checking the order of operations.*/
  test_set_step(7);
 8006130:	2307      	movs	r3, #7
 8006132:	6023      	str	r3, [r4, #0]
  {
    test_wait_threads();
 8006134:	f7ff fa7c 	bl	8005630 <test_wait_threads>
    test_assert_sequence("ABC", "invalid sequence");
 8006138:	490c      	ldr	r1, [pc, #48]	; (800616c <rt_test_006_009_execute+0x9c>)
 800613a:	480d      	ldr	r0, [pc, #52]	; (8006170 <rt_test_006_009_execute+0xa0>)
  }
}
 800613c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    test_assert_sequence("ABC", "invalid sequence");
 8006140:	f7fa bc76 	b.w	8000a30 <_test_assert_sequence>
 8006144:	200008f0 	.word	0x200008f0
 8006148:	20000b40 	.word	0x20000b40
 800614c:	20001254 	.word	0x20001254
 8006150:	08004361 	.word	0x08004361
 8006154:	08008874 	.word	0x08008874
 8006158:	2000126c 	.word	0x2000126c
 800615c:	08008ab0 	.word	0x08008ab0
 8006160:	080043f1 	.word	0x080043f1
 8006164:	08004461 	.word	0x08004461
 8006168:	08008878 	.word	0x08008878
 800616c:	08008950 	.word	0x08008950
 8006170:	08008964 	.word	0x08008964
	...

08006180 <rt_test_006_008_execute>:
static void rt_test_006_008_execute(void) {
 8006180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  return ch.rlist.current;
 8006182:	4b26      	ldr	r3, [pc, #152]	; (800621c <rt_test_006_008_execute+0x9c>)
  test_set_step(1);
 8006184:	4e26      	ldr	r6, [pc, #152]	; (8006220 <rt_test_006_008_execute+0xa0>)
  return chThdGetSelfX()->prio;
 8006186:	699a      	ldr	r2, [r3, #24]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread6, "E");
 8006188:	4826      	ldr	r0, [pc, #152]	; (8006224 <rt_test_006_008_execute+0xa4>)
 800618a:	6895      	ldr	r5, [r2, #8]
 800618c:	4b26      	ldr	r3, [pc, #152]	; (8006228 <rt_test_006_008_execute+0xa8>)
 800618e:	4a27      	ldr	r2, [pc, #156]	; (800622c <rt_test_006_008_execute+0xac>)
 8006190:	4c27      	ldr	r4, [pc, #156]	; (8006230 <rt_test_006_008_execute+0xb0>)
 8006192:	1c69      	adds	r1, r5, #1
  test_set_step(1);
 8006194:	2701      	movs	r7, #1
 8006196:	6037      	str	r7, [r6, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread6, "E");
 8006198:	f7fb fd42 	bl	8001c20 <chThdCreateStatic.constprop.62>
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread6, "D");
 800619c:	1ca9      	adds	r1, r5, #2
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread6, "E");
 800619e:	6020      	str	r0, [r4, #0]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread6, "D");
 80061a0:	4b24      	ldr	r3, [pc, #144]	; (8006234 <rt_test_006_008_execute+0xb4>)
 80061a2:	4a22      	ldr	r2, [pc, #136]	; (800622c <rt_test_006_008_execute+0xac>)
 80061a4:	4824      	ldr	r0, [pc, #144]	; (8006238 <rt_test_006_008_execute+0xb8>)
 80061a6:	f7fb fd3b 	bl	8001c20 <chThdCreateStatic.constprop.62>
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread6, "C");
 80061aa:	1ce9      	adds	r1, r5, #3
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread6, "D");
 80061ac:	6060      	str	r0, [r4, #4]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread6, "C");
 80061ae:	4b23      	ldr	r3, [pc, #140]	; (800623c <rt_test_006_008_execute+0xbc>)
 80061b0:	4a1e      	ldr	r2, [pc, #120]	; (800622c <rt_test_006_008_execute+0xac>)
 80061b2:	4823      	ldr	r0, [pc, #140]	; (8006240 <rt_test_006_008_execute+0xc0>)
 80061b4:	f7fb fd34 	bl	8001c20 <chThdCreateStatic.constprop.62>
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread6, "B");
 80061b8:	1d29      	adds	r1, r5, #4
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread6, "C");
 80061ba:	60a0      	str	r0, [r4, #8]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread6, "B");
 80061bc:	4b21      	ldr	r3, [pc, #132]	; (8006244 <rt_test_006_008_execute+0xc4>)
 80061be:	4a1b      	ldr	r2, [pc, #108]	; (800622c <rt_test_006_008_execute+0xac>)
 80061c0:	4821      	ldr	r0, [pc, #132]	; (8006248 <rt_test_006_008_execute+0xc8>)
 80061c2:	f7fb fd2d 	bl	8001c20 <chThdCreateStatic.constprop.62>
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread6, "A");
 80061c6:	1d69      	adds	r1, r5, #5
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread6, "B");
 80061c8:	60e0      	str	r0, [r4, #12]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread6, "A");
 80061ca:	4b20      	ldr	r3, [pc, #128]	; (800624c <rt_test_006_008_execute+0xcc>)
 80061cc:	4a17      	ldr	r2, [pc, #92]	; (800622c <rt_test_006_008_execute+0xac>)
 80061ce:	4820      	ldr	r0, [pc, #128]	; (8006250 <rt_test_006_008_execute+0xd0>)
 80061d0:	f7fb fd26 	bl	8001c20 <chThdCreateStatic.constprop.62>
  test_set_step(2);
 80061d4:	2302      	movs	r3, #2
 80061d6:	6033      	str	r3, [r6, #0]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread6, "A");
 80061d8:	6120      	str	r0, [r4, #16]
 80061da:	2320      	movs	r3, #32
 80061dc:	f383 8811 	msr	BASEPRI, r3
  return (bool)(tqp->next != (const thread_t *)tqp);
 80061e0:	4c1c      	ldr	r4, [pc, #112]	; (8006254 <rt_test_006_008_execute+0xd4>)
 80061e2:	6823      	ldr	r3, [r4, #0]
  while (queue_notempty(&cp->queue)) {
 80061e4:	42a3      	cmp	r3, r4
 80061e6:	d00b      	beq.n	8006200 <rt_test_006_008_execute+0x80>
    chSchReadyI(queue_fifo_remove(&cp->queue))->u.rdymsg = MSG_RESET;
 80061e8:	f06f 0501 	mvn.w	r5, #1
  tqp->next             = tp->queue.next;
 80061ec:	681a      	ldr	r2, [r3, #0]
 80061ee:	6022      	str	r2, [r4, #0]
 80061f0:	4618      	mov	r0, r3
  tqp->next->queue.prev = (thread_t *)tqp;
 80061f2:	6054      	str	r4, [r2, #4]
 80061f4:	f7fa febc 	bl	8000f70 <chSchReadyI>
  return (bool)(tqp->next != (const thread_t *)tqp);
 80061f8:	6823      	ldr	r3, [r4, #0]
 80061fa:	6245      	str	r5, [r0, #36]	; 0x24
  while (queue_notempty(&cp->queue)) {
 80061fc:	42a3      	cmp	r3, r4
 80061fe:	d1f5      	bne.n	80061ec <rt_test_006_008_execute+0x6c>
  chSchRescheduleS();
 8006200:	f7fc ffde 	bl	80031c0 <chSchRescheduleS>
 8006204:	2300      	movs	r3, #0
 8006206:	f383 8811 	msr	BASEPRI, r3
    test_wait_threads();
 800620a:	f7ff fa11 	bl	8005630 <test_wait_threads>
    test_assert_sequence("ABCDE", "invalid sequence");
 800620e:	4912      	ldr	r1, [pc, #72]	; (8006258 <rt_test_006_008_execute+0xd8>)
 8006210:	4812      	ldr	r0, [pc, #72]	; (800625c <rt_test_006_008_execute+0xdc>)
}
 8006212:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    test_assert_sequence("ABCDE", "invalid sequence");
 8006216:	f7fa bc0b 	b.w	8000a30 <_test_assert_sequence>
 800621a:	bf00      	nop
 800621c:	200008f0 	.word	0x200008f0
 8006220:	20001254 	.word	0x20001254
 8006224:	20000b40 	.word	0x20000b40
 8006228:	080088f0 	.word	0x080088f0
 800622c:	080043f1 	.word	0x080043f1
 8006230:	2000126c 	.word	0x2000126c
 8006234:	08008abc 	.word	0x08008abc
 8006238:	20000c88 	.word	0x20000c88
 800623c:	08008ab0 	.word	0x08008ab0
 8006240:	20000dd0 	.word	0x20000dd0
 8006244:	08008878 	.word	0x08008878
 8006248:	20000f18 	.word	0x20000f18
 800624c:	08008874 	.word	0x08008874
 8006250:	20001060 	.word	0x20001060
 8006254:	20000800 	.word	0x20000800
 8006258:	08008950 	.word	0x08008950
 800625c:	080088ec 	.word	0x080088ec

08006260 <rt_test_006_007_execute>:
  return ch.rlist.current;
 8006260:	4b28      	ldr	r3, [pc, #160]	; (8006304 <rt_test_006_007_execute+0xa4>)
  return chThdGetSelfX()->prio;
 8006262:	699b      	ldr	r3, [r3, #24]
static void rt_test_006_007_execute(void) {
 8006264:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006268:	689f      	ldr	r7, [r3, #8]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread6, "E");
 800626a:	4e27      	ldr	r6, [pc, #156]	; (8006308 <rt_test_006_007_execute+0xa8>)
 800626c:	4d27      	ldr	r5, [pc, #156]	; (800630c <rt_test_006_007_execute+0xac>)
  test_set_step(1);
 800626e:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 8006330 <rt_test_006_007_execute+0xd0>
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread6, "E");
 8006272:	4b27      	ldr	r3, [pc, #156]	; (8006310 <rt_test_006_007_execute+0xb0>)
 8006274:	4c27      	ldr	r4, [pc, #156]	; (8006314 <rt_test_006_007_execute+0xb4>)
  test_set_step(1);
 8006276:	f04f 0c01 	mov.w	ip, #1
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread6, "E");
 800627a:	1c79      	adds	r1, r7, #1
 800627c:	4632      	mov	r2, r6
 800627e:	4628      	mov	r0, r5
  test_set_step(1);
 8006280:	f8c8 c000 	str.w	ip, [r8]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread6, "E");
 8006284:	f7fb fccc 	bl	8001c20 <chThdCreateStatic.constprop.62>
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread6, "D");
 8006288:	1cb9      	adds	r1, r7, #2
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread6, "E");
 800628a:	6020      	str	r0, [r4, #0]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread6, "D");
 800628c:	4632      	mov	r2, r6
 800628e:	f505 70a4 	add.w	r0, r5, #328	; 0x148
 8006292:	4b21      	ldr	r3, [pc, #132]	; (8006318 <rt_test_006_007_execute+0xb8>)
 8006294:	f7fb fcc4 	bl	8001c20 <chThdCreateStatic.constprop.62>
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread6, "C");
 8006298:	1cf9      	adds	r1, r7, #3
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread6, "D");
 800629a:	6060      	str	r0, [r4, #4]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread6, "C");
 800629c:	4632      	mov	r2, r6
 800629e:	f505 7024 	add.w	r0, r5, #656	; 0x290
 80062a2:	4b1e      	ldr	r3, [pc, #120]	; (800631c <rt_test_006_007_execute+0xbc>)
 80062a4:	f7fb fcbc 	bl	8001c20 <chThdCreateStatic.constprop.62>
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread6, "B");
 80062a8:	1d39      	adds	r1, r7, #4
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread6, "C");
 80062aa:	60a0      	str	r0, [r4, #8]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread6, "B");
 80062ac:	4632      	mov	r2, r6
 80062ae:	f505 7076 	add.w	r0, r5, #984	; 0x3d8
 80062b2:	4b1b      	ldr	r3, [pc, #108]	; (8006320 <rt_test_006_007_execute+0xc0>)
 80062b4:	f7fb fcb4 	bl	8001c20 <chThdCreateStatic.constprop.62>
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread6, "A");
 80062b8:	1d79      	adds	r1, r7, #5
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread6, "B");
 80062ba:	60e0      	str	r0, [r4, #12]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread6, "A");
 80062bc:	4632      	mov	r2, r6
 80062be:	f505 60a4 	add.w	r0, r5, #1312	; 0x520
 80062c2:	4b18      	ldr	r3, [pc, #96]	; (8006324 <rt_test_006_007_execute+0xc4>)
 80062c4:	f7fb fcac 	bl	8001c20 <chThdCreateStatic.constprop.62>
  test_set_step(2);
 80062c8:	2302      	movs	r3, #2
 80062ca:	f8c8 3000 	str.w	r3, [r8]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread6, "A");
 80062ce:	6120      	str	r0, [r4, #16]
 80062d0:	2320      	movs	r3, #32
 80062d2:	f383 8811 	msr	BASEPRI, r3
    chCondSignalI(&c1);
 80062d6:	f7fa ff03 	bl	80010e0 <chCondSignalI.constprop.50>
    chCondSignalI(&c1);
 80062da:	f7fa ff01 	bl	80010e0 <chCondSignalI.constprop.50>
    chCondSignalI(&c1);
 80062de:	f7fa feff 	bl	80010e0 <chCondSignalI.constprop.50>
    chCondSignalI(&c1);
 80062e2:	f7fa fefd 	bl	80010e0 <chCondSignalI.constprop.50>
    chCondSignalI(&c1);
 80062e6:	f7fa fefb 	bl	80010e0 <chCondSignalI.constprop.50>
    chSchRescheduleS();
 80062ea:	f7fc ff69 	bl	80031c0 <chSchRescheduleS>
 80062ee:	2300      	movs	r3, #0
 80062f0:	f383 8811 	msr	BASEPRI, r3
    test_wait_threads();
 80062f4:	f7ff f99c 	bl	8005630 <test_wait_threads>
    test_assert_sequence("ABCDE", "invalid sequence");
 80062f8:	490b      	ldr	r1, [pc, #44]	; (8006328 <rt_test_006_007_execute+0xc8>)
 80062fa:	480c      	ldr	r0, [pc, #48]	; (800632c <rt_test_006_007_execute+0xcc>)
}
 80062fc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    test_assert_sequence("ABCDE", "invalid sequence");
 8006300:	f7fa bb96 	b.w	8000a30 <_test_assert_sequence>
 8006304:	200008f0 	.word	0x200008f0
 8006308:	080043f1 	.word	0x080043f1
 800630c:	20000b40 	.word	0x20000b40
 8006310:	080088f0 	.word	0x080088f0
 8006314:	2000126c 	.word	0x2000126c
 8006318:	08008abc 	.word	0x08008abc
 800631c:	08008ab0 	.word	0x08008ab0
 8006320:	08008878 	.word	0x08008878
 8006324:	08008874 	.word	0x08008874
 8006328:	08008950 	.word	0x08008950
 800632c:	080088ec 	.word	0x080088ec
 8006330:	20001254 	.word	0x20001254
	...

08006340 <rt_test_005_006_teardown>:
 *   must not change from "not taken".
 * .
 */

static void rt_test_005_006_teardown(void) {
  test_wait_threads();
 8006340:	f7ff b976 	b.w	8005630 <test_wait_threads>
	...

08006350 <rt_test_006_004_teardown>:
 8006350:	f7ff b96e 	b.w	8005630 <test_wait_threads>
	...

08006360 <rt_test_006_001_execute>:
static void rt_test_006_001_execute(void) {
 8006360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  return ch.rlist.current;
 8006362:	4f24      	ldr	r7, [pc, #144]	; (80063f4 <rt_test_006_001_execute+0x94>)
  test_set_step(2);
 8006364:	4e24      	ldr	r6, [pc, #144]	; (80063f8 <rt_test_006_001_execute+0x98>)
  return chThdGetSelfX()->prio;
 8006366:	69bb      	ldr	r3, [r7, #24]
    chMtxLock(&m1);
 8006368:	4824      	ldr	r0, [pc, #144]	; (80063fc <rt_test_006_001_execute+0x9c>)
 800636a:	689c      	ldr	r4, [r3, #8]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread1, "E");
 800636c:	4d24      	ldr	r5, [pc, #144]	; (8006400 <rt_test_006_001_execute+0xa0>)
  test_set_step(2);
 800636e:	2302      	movs	r3, #2
 8006370:	6033      	str	r3, [r6, #0]
    chMtxLock(&m1);
 8006372:	f7fc fb0d 	bl	8002990 <chMtxLock>
  test_set_step(3);
 8006376:	f04f 0c03 	mov.w	ip, #3
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread1, "E");
 800637a:	1c61      	adds	r1, r4, #1
 800637c:	4b21      	ldr	r3, [pc, #132]	; (8006404 <rt_test_006_001_execute+0xa4>)
 800637e:	4a22      	ldr	r2, [pc, #136]	; (8006408 <rt_test_006_001_execute+0xa8>)
 8006380:	4822      	ldr	r0, [pc, #136]	; (800640c <rt_test_006_001_execute+0xac>)
  test_set_step(3);
 8006382:	f8c6 c000 	str.w	ip, [r6]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread1, "E");
 8006386:	f7fb fc4b 	bl	8001c20 <chThdCreateStatic.constprop.62>
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread1, "D");
 800638a:	1ca1      	adds	r1, r4, #2
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread1, "E");
 800638c:	6028      	str	r0, [r5, #0]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread1, "D");
 800638e:	4b20      	ldr	r3, [pc, #128]	; (8006410 <rt_test_006_001_execute+0xb0>)
 8006390:	4a1d      	ldr	r2, [pc, #116]	; (8006408 <rt_test_006_001_execute+0xa8>)
 8006392:	4820      	ldr	r0, [pc, #128]	; (8006414 <rt_test_006_001_execute+0xb4>)
 8006394:	f7fb fc44 	bl	8001c20 <chThdCreateStatic.constprop.62>
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread1, "C");
 8006398:	1ce1      	adds	r1, r4, #3
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread1, "D");
 800639a:	6068      	str	r0, [r5, #4]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread1, "C");
 800639c:	4b1e      	ldr	r3, [pc, #120]	; (8006418 <rt_test_006_001_execute+0xb8>)
 800639e:	4a1a      	ldr	r2, [pc, #104]	; (8006408 <rt_test_006_001_execute+0xa8>)
 80063a0:	481e      	ldr	r0, [pc, #120]	; (800641c <rt_test_006_001_execute+0xbc>)
 80063a2:	f7fb fc3d 	bl	8001c20 <chThdCreateStatic.constprop.62>
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread1, "B");
 80063a6:	1d21      	adds	r1, r4, #4
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread1, "C");
 80063a8:	60a8      	str	r0, [r5, #8]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread1, "B");
 80063aa:	4b1d      	ldr	r3, [pc, #116]	; (8006420 <rt_test_006_001_execute+0xc0>)
 80063ac:	4a16      	ldr	r2, [pc, #88]	; (8006408 <rt_test_006_001_execute+0xa8>)
 80063ae:	481d      	ldr	r0, [pc, #116]	; (8006424 <rt_test_006_001_execute+0xc4>)
 80063b0:	f7fb fc36 	bl	8001c20 <chThdCreateStatic.constprop.62>
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread1, "A");
 80063b4:	1d61      	adds	r1, r4, #5
 80063b6:	4a14      	ldr	r2, [pc, #80]	; (8006408 <rt_test_006_001_execute+0xa8>)
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread1, "B");
 80063b8:	60e8      	str	r0, [r5, #12]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread1, "A");
 80063ba:	4b1b      	ldr	r3, [pc, #108]	; (8006428 <rt_test_006_001_execute+0xc8>)
 80063bc:	481b      	ldr	r0, [pc, #108]	; (800642c <rt_test_006_001_execute+0xcc>)
 80063be:	f7fb fc2f 	bl	8001c20 <chThdCreateStatic.constprop.62>
  test_set_step(4);
 80063c2:	2304      	movs	r3, #4
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread1, "A");
 80063c4:	6128      	str	r0, [r5, #16]
    chMtxUnlock(&m1);
 80063c6:	480d      	ldr	r0, [pc, #52]	; (80063fc <rt_test_006_001_execute+0x9c>)
  test_set_step(4);
 80063c8:	6033      	str	r3, [r6, #0]
    chMtxUnlock(&m1);
 80063ca:	f7fd fd29 	bl	8003e20 <chMtxUnlock>
    test_wait_threads();
 80063ce:	f7ff f92f 	bl	8005630 <test_wait_threads>
 80063d2:	69bb      	ldr	r3, [r7, #24]
    test_assert(prio == chThdGetPriorityX(), "wrong priority level");
 80063d4:	4916      	ldr	r1, [pc, #88]	; (8006430 <rt_test_006_001_execute+0xd0>)
 80063d6:	6898      	ldr	r0, [r3, #8]
 80063d8:	1b00      	subs	r0, r0, r4
 80063da:	fab0 f080 	clz	r0, r0
 80063de:	0940      	lsrs	r0, r0, #5
 80063e0:	f7fa fa0e 	bl	8000800 <_test_assert>
 80063e4:	b100      	cbz	r0, 80063e8 <rt_test_006_001_execute+0x88>
}
 80063e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    test_assert_sequence("ABCDE", "invalid sequence");
 80063e8:	4912      	ldr	r1, [pc, #72]	; (8006434 <rt_test_006_001_execute+0xd4>)
 80063ea:	4813      	ldr	r0, [pc, #76]	; (8006438 <rt_test_006_001_execute+0xd8>)
}
 80063ec:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    test_assert_sequence("ABCDE", "invalid sequence");
 80063f0:	f7fa bb1e 	b.w	8000a30 <_test_assert_sequence>
 80063f4:	200008f0 	.word	0x200008f0
 80063f8:	20001254 	.word	0x20001254
 80063fc:	2000082c 	.word	0x2000082c
 8006400:	2000126c 	.word	0x2000126c
 8006404:	080088f0 	.word	0x080088f0
 8006408:	08004741 	.word	0x08004741
 800640c:	20000b40 	.word	0x20000b40
 8006410:	08008abc 	.word	0x08008abc
 8006414:	20000c88 	.word	0x20000c88
 8006418:	08008ab0 	.word	0x08008ab0
 800641c:	20000dd0 	.word	0x20000dd0
 8006420:	08008878 	.word	0x08008878
 8006424:	20000f18 	.word	0x20000f18
 8006428:	08008874 	.word	0x08008874
 800642c:	20001060 	.word	0x20001060
 8006430:	080088b4 	.word	0x080088b4
 8006434:	08008950 	.word	0x08008950
 8006438:	080088ec 	.word	0x080088ec
 800643c:	00000000 	.word	0x00000000

08006440 <rt_test_005_005_teardown>:
 8006440:	f7ff b8f6 	b.w	8005630 <test_wait_threads>
	...

08006450 <rt_test_005_004_execute>:
  return ch.rlist.current;
 8006450:	4b23      	ldr	r3, [pc, #140]	; (80064e0 <rt_test_005_004_execute+0x90>)
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread1, "A");
 8006452:	4824      	ldr	r0, [pc, #144]	; (80064e4 <rt_test_005_004_execute+0x94>)
  return chThdGetSelfX()->prio;
 8006454:	699a      	ldr	r2, [r3, #24]
 8006456:	4b24      	ldr	r3, [pc, #144]	; (80064e8 <rt_test_005_004_execute+0x98>)
 8006458:	6891      	ldr	r1, [r2, #8]
 800645a:	4a24      	ldr	r2, [pc, #144]	; (80064ec <rt_test_005_004_execute+0x9c>)
static void rt_test_005_004_execute(void) {
 800645c:	b570      	push	{r4, r5, r6, lr}
  test_set_step(1);
 800645e:	4c24      	ldr	r4, [pc, #144]	; (80064f0 <rt_test_005_004_execute+0xa0>)
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread1, "A");
 8006460:	3101      	adds	r1, #1
  test_set_step(1);
 8006462:	2501      	movs	r5, #1
 8006464:	6025      	str	r5, [r4, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread1, "A");
 8006466:	f7fb fbdb 	bl	8001c20 <chThdCreateStatic.constprop.62>
 800646a:	4b22      	ldr	r3, [pc, #136]	; (80064f4 <rt_test_005_004_execute+0xa4>)
  test_set_step(2);
 800646c:	2502      	movs	r5, #2
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread1, "A");
 800646e:	6018      	str	r0, [r3, #0]
  test_set_step(2);
 8006470:	6025      	str	r5, [r4, #0]
 8006472:	2320      	movs	r3, #32
 8006474:	f383 8811 	msr	BASEPRI, r3
 8006478:	4c1f      	ldr	r4, [pc, #124]	; (80064f8 <rt_test_005_004_execute+0xa8>)
      chSchReadyI(queue_fifo_remove(&sp->queue))->u.rdymsg = MSG_OK;
 800647a:	2600      	movs	r6, #0
 800647c:	e002      	b.n	8006484 <rt_test_005_004_execute+0x34>
  while (n > (cnt_t)0) {
 800647e:	2d01      	cmp	r5, #1
 8006480:	d00e      	beq.n	80064a0 <rt_test_005_004_execute+0x50>
 8006482:	2501      	movs	r5, #1
    if (++sp->cnt <= (cnt_t)0) {
 8006484:	68a3      	ldr	r3, [r4, #8]
 8006486:	3301      	adds	r3, #1
 8006488:	2b00      	cmp	r3, #0
 800648a:	60a3      	str	r3, [r4, #8]
 800648c:	dcf7      	bgt.n	800647e <rt_test_005_004_execute+0x2e>
  thread_t *tp = tqp->next;
 800648e:	6820      	ldr	r0, [r4, #0]
  tqp->next             = tp->queue.next;
 8006490:	6803      	ldr	r3, [r0, #0]
 8006492:	6023      	str	r3, [r4, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 8006494:	605c      	str	r4, [r3, #4]
      chSchReadyI(queue_fifo_remove(&sp->queue))->u.rdymsg = MSG_OK;
 8006496:	f7fa fd6b 	bl	8000f70 <chSchReadyI>
  while (n > (cnt_t)0) {
 800649a:	2d01      	cmp	r5, #1
      chSchReadyI(queue_fifo_remove(&sp->queue))->u.rdymsg = MSG_OK;
 800649c:	6246      	str	r6, [r0, #36]	; 0x24
  while (n > (cnt_t)0) {
 800649e:	d1f0      	bne.n	8006482 <rt_test_005_004_execute+0x32>
    chSchRescheduleS();
 80064a0:	f7fc fe8e 	bl	80031c0 <chSchRescheduleS>
 80064a4:	2500      	movs	r5, #0
 80064a6:	f385 8811 	msr	BASEPRI, r5
    test_wait_threads();
 80064aa:	f7ff f8c1 	bl	8005630 <test_wait_threads>
 80064ae:	2320      	movs	r3, #32
 80064b0:	f383 8811 	msr	BASEPRI, r3
    test_assert_lock(chSemGetCounterI(&sem1) == 1, "invalid counter");
 80064b4:	68a0      	ldr	r0, [r4, #8]
 80064b6:	4911      	ldr	r1, [pc, #68]	; (80064fc <rt_test_005_004_execute+0xac>)
 80064b8:	f1a0 0001 	sub.w	r0, r0, #1
 80064bc:	fab0 f080 	clz	r0, r0
 80064c0:	0940      	lsrs	r0, r0, #5
 80064c2:	f7fa f99d 	bl	8000800 <_test_assert>
 80064c6:	b110      	cbz	r0, 80064ce <rt_test_005_004_execute+0x7e>
 80064c8:	f385 8811 	msr	BASEPRI, r5
}
 80064cc:	bd70      	pop	{r4, r5, r6, pc}
 80064ce:	f380 8811 	msr	BASEPRI, r0
    test_assert_sequence("A", "invalid sequence");
 80064d2:	490b      	ldr	r1, [pc, #44]	; (8006500 <rt_test_005_004_execute+0xb0>)
 80064d4:	4804      	ldr	r0, [pc, #16]	; (80064e8 <rt_test_005_004_execute+0x98>)
}
 80064d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    test_assert_sequence("A", "invalid sequence");
 80064da:	f7fa baa9 	b.w	8000a30 <_test_assert_sequence>
 80064de:	bf00      	nop
 80064e0:	200008f0 	.word	0x200008f0
 80064e4:	20000b40 	.word	0x20000b40
 80064e8:	08008874 	.word	0x08008874
 80064ec:	08002ae1 	.word	0x08002ae1
 80064f0:	20001254 	.word	0x20001254
 80064f4:	2000126c 	.word	0x2000126c
 80064f8:	20000b28 	.word	0x20000b28
 80064fc:	080087c0 	.word	0x080087c0
 8006500:	08008950 	.word	0x08008950
	...

08006510 <rt_test_005_003_execute>:
static void rt_test_005_003_execute(void) {
 8006510:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  test_set_step(1);
 8006514:	4d4b      	ldr	r5, [pc, #300]	; (8006644 <rt_test_005_003_execute+0x134>)
 8006516:	2001      	movs	r0, #1
 8006518:	6028      	str	r0, [r5, #0]
 800651a:	2320      	movs	r3, #32
 800651c:	f383 8811 	msr	BASEPRI, r3
  if (--sp->cnt < (cnt_t)0) {
 8006520:	4c49      	ldr	r4, [pc, #292]	; (8006648 <rt_test_005_003_execute+0x138>)
 8006522:	68a3      	ldr	r3, [r4, #8]
 8006524:	3b01      	subs	r3, #1
 8006526:	bf5c      	itt	pl
 8006528:	60a3      	strpl	r3, [r4, #8]
 800652a:	2000      	movpl	r0, #0
 800652c:	2300      	movs	r3, #0
 800652e:	f383 8811 	msr	BASEPRI, r3
    test_assert(msg == MSG_TIMEOUT, "wrong wake-up message");
 8006532:	4946      	ldr	r1, [pc, #280]	; (800664c <rt_test_005_003_execute+0x13c>)
 8006534:	f7fa f964 	bl	8000800 <_test_assert>
 8006538:	b108      	cbz	r0, 800653e <rt_test_005_003_execute+0x2e>
}
 800653a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  return (bool)(tqp->next == (const thread_t *)tqp);
 800653e:	6820      	ldr	r0, [r4, #0]
    test_assert(queue_isempty(&sem1.queue), "queue not empty");
 8006540:	4943      	ldr	r1, [pc, #268]	; (8006650 <rt_test_005_003_execute+0x140>)
 8006542:	1b00      	subs	r0, r0, r4
 8006544:	fab0 f080 	clz	r0, r0
 8006548:	0940      	lsrs	r0, r0, #5
 800654a:	f7fa f959 	bl	8000800 <_test_assert>
 800654e:	2800      	cmp	r0, #0
 8006550:	d1f3      	bne.n	800653a <rt_test_005_003_execute+0x2a>
    test_assert(sem1.cnt == 0, "counter not zero");
 8006552:	68a0      	ldr	r0, [r4, #8]
 8006554:	493f      	ldr	r1, [pc, #252]	; (8006654 <rt_test_005_003_execute+0x144>)
 8006556:	fab0 f080 	clz	r0, r0
 800655a:	0940      	lsrs	r0, r0, #5
 800655c:	f7fa f950 	bl	8000800 <_test_assert>
 8006560:	4603      	mov	r3, r0
 8006562:	2800      	cmp	r0, #0
 8006564:	d1e9      	bne.n	800653a <rt_test_005_003_execute+0x2a>
  return ch.rlist.current;
 8006566:	493c      	ldr	r1, [pc, #240]	; (8006658 <rt_test_005_003_execute+0x148>)
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 8006568:	4a3c      	ldr	r2, [pc, #240]	; (800665c <rt_test_005_003_execute+0x14c>)
  return chThdGetSelfX()->prio;
 800656a:	6989      	ldr	r1, [r1, #24]
 800656c:	483c      	ldr	r0, [pc, #240]	; (8006660 <rt_test_005_003_execute+0x150>)
 800656e:	6889      	ldr	r1, [r1, #8]
  test_set_step(2);
 8006570:	2602      	movs	r6, #2
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 8006572:	3901      	subs	r1, #1
  test_set_step(2);
 8006574:	602e      	str	r6, [r5, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 8006576:	f7fb fb53 	bl	8001c20 <chThdCreateStatic.constprop.62>
 800657a:	4b3a      	ldr	r3, [pc, #232]	; (8006664 <rt_test_005_003_execute+0x154>)
 800657c:	6018      	str	r0, [r3, #0]
    msg = chSemWaitTimeout(&sem1, TIME_MS2I(500));
 800657e:	f241 3088 	movw	r0, #5000	; 0x1388
 8006582:	f7fb fcad 	bl	8001ee0 <chSemWaitTimeout.constprop.58>
 8006586:	4606      	mov	r6, r0
    test_wait_threads();
 8006588:	f7ff f852 	bl	8005630 <test_wait_threads>
    test_assert(msg == MSG_OK, "wrong wake-up message");
 800658c:	fab6 f086 	clz	r0, r6
 8006590:	0940      	lsrs	r0, r0, #5
 8006592:	492e      	ldr	r1, [pc, #184]	; (800664c <rt_test_005_003_execute+0x13c>)
 8006594:	f7fa f934 	bl	8000800 <_test_assert>
 8006598:	2800      	cmp	r0, #0
 800659a:	d1ce      	bne.n	800653a <rt_test_005_003_execute+0x2a>
 800659c:	6820      	ldr	r0, [r4, #0]
    test_assert(queue_isempty(&sem1.queue), "queue not empty");
 800659e:	492c      	ldr	r1, [pc, #176]	; (8006650 <rt_test_005_003_execute+0x140>)
 80065a0:	1b00      	subs	r0, r0, r4
 80065a2:	fab0 f080 	clz	r0, r0
 80065a6:	0940      	lsrs	r0, r0, #5
 80065a8:	f7fa f92a 	bl	8000800 <_test_assert>
 80065ac:	2800      	cmp	r0, #0
 80065ae:	d1c4      	bne.n	800653a <rt_test_005_003_execute+0x2a>
    test_assert(sem1.cnt == 0, "counter not zero");
 80065b0:	68a0      	ldr	r0, [r4, #8]
 80065b2:	4928      	ldr	r1, [pc, #160]	; (8006654 <rt_test_005_003_execute+0x144>)
 80065b4:	fab0 f080 	clz	r0, r0
 80065b8:	0940      	lsrs	r0, r0, #5
 80065ba:	f7fa f921 	bl	8000800 <_test_assert>
 80065be:	2800      	cmp	r0, #0
 80065c0:	d1bb      	bne.n	800653a <rt_test_005_003_execute+0x2a>
  test_set_step(3);
 80065c2:	2303      	movs	r3, #3
 80065c4:	602b      	str	r3, [r5, #0]
    target_time = chTimeAddX(test_wait_tick(), TIME_MS2I(5 * 50));
 80065c6:	f7fc f883 	bl	80026d0 <test_wait_tick>
      test_assert(msg == MSG_TIMEOUT, "wrong wake-up message");
 80065ca:	f8df 8080 	ldr.w	r8, [pc, #128]	; 800664c <rt_test_005_003_execute+0x13c>
      test_assert(queue_isempty(&sem1.queue), "queue not empty");
 80065ce:	4f20      	ldr	r7, [pc, #128]	; (8006650 <rt_test_005_003_execute+0x140>)
      test_assert(sem1.cnt == 0, "counter not zero");
 80065d0:	4e20      	ldr	r6, [pc, #128]	; (8006654 <rt_test_005_003_execute+0x144>)
    target_time = chTimeAddX(test_wait_tick(), TIME_MS2I(5 * 50));
 80065d2:	2541      	movs	r5, #65	; 0x41
 80065d4:	4681      	mov	r9, r0
      test_emit_token('A' + i);
 80065d6:	4628      	mov	r0, r5
 80065d8:	f7fa f9b2 	bl	8000940 <test_emit_token>
      msg = chSemWaitTimeout(&sem1, TIME_MS2I(50));
 80065dc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80065e0:	f7fb fc7e 	bl	8001ee0 <chSemWaitTimeout.constprop.58>
      test_assert(msg == MSG_TIMEOUT, "wrong wake-up message");
 80065e4:	f1a0 30ff 	sub.w	r0, r0, #4294967295	; 0xffffffff
 80065e8:	fab0 f080 	clz	r0, r0
 80065ec:	4641      	mov	r1, r8
 80065ee:	0940      	lsrs	r0, r0, #5
 80065f0:	f7fa f906 	bl	8000800 <_test_assert>
      test_assert(queue_isempty(&sem1.queue), "queue not empty");
 80065f4:	4639      	mov	r1, r7
      test_assert(msg == MSG_TIMEOUT, "wrong wake-up message");
 80065f6:	2800      	cmp	r0, #0
 80065f8:	d19f      	bne.n	800653a <rt_test_005_003_execute+0x2a>
 80065fa:	6820      	ldr	r0, [r4, #0]
      test_assert(queue_isempty(&sem1.queue), "queue not empty");
 80065fc:	1b00      	subs	r0, r0, r4
 80065fe:	fab0 f080 	clz	r0, r0
 8006602:	0940      	lsrs	r0, r0, #5
 8006604:	f7fa f8fc 	bl	8000800 <_test_assert>
      test_assert(sem1.cnt == 0, "counter not zero");
 8006608:	4631      	mov	r1, r6
      test_assert(queue_isempty(&sem1.queue), "queue not empty");
 800660a:	2800      	cmp	r0, #0
 800660c:	d195      	bne.n	800653a <rt_test_005_003_execute+0x2a>
      test_assert(sem1.cnt == 0, "counter not zero");
 800660e:	68a0      	ldr	r0, [r4, #8]
 8006610:	fab0 f080 	clz	r0, r0
 8006614:	0940      	lsrs	r0, r0, #5
 8006616:	f7fa f8f3 	bl	8000800 <_test_assert>
 800661a:	3501      	adds	r5, #1
 800661c:	b2ed      	uxtb	r5, r5
 800661e:	2800      	cmp	r0, #0
 8006620:	d18b      	bne.n	800653a <rt_test_005_003_execute+0x2a>
    for (i = 0; i < 5; i++) {
 8006622:	2d46      	cmp	r5, #70	; 0x46
 8006624:	d1d7      	bne.n	80065d6 <rt_test_005_003_execute+0xc6>
    test_assert_sequence("ABCDE", "invalid sequence");
 8006626:	4910      	ldr	r1, [pc, #64]	; (8006668 <rt_test_005_003_execute+0x158>)
 8006628:	4810      	ldr	r0, [pc, #64]	; (800666c <rt_test_005_003_execute+0x15c>)
 800662a:	f7fa fa01 	bl	8000a30 <_test_assert_sequence>
 800662e:	2800      	cmp	r0, #0
 8006630:	d183      	bne.n	800653a <rt_test_005_003_execute+0x2a>
    test_assert_time_window(target_time,
 8006632:	f609 11d8 	addw	r1, r9, #2520	; 0x9d8
 8006636:	f609 10c4 	addw	r0, r9, #2500	; 0x9c4
}
 800663a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    test_assert_time_window(target_time,
 800663e:	f7f9 bf07 	b.w	8000450 <_test_assert_time_window.constprop.2>
 8006642:	bf00      	nop
 8006644:	20001254 	.word	0x20001254
 8006648:	20000b28 	.word	0x20000b28
 800664c:	08007828 	.word	0x08007828
 8006650:	080087e0 	.word	0x080087e0
 8006654:	080087f0 	.word	0x080087f0
 8006658:	200008f0 	.word	0x200008f0
 800665c:	08003d81 	.word	0x08003d81
 8006660:	20000b40 	.word	0x20000b40
 8006664:	2000126c 	.word	0x2000126c
 8006668:	08008950 	.word	0x08008950
 800666c:	080088ec 	.word	0x080088ec

08006670 <rt_test_005_002_execute>:
static void rt_test_005_002_execute(void) {
 8006670:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  return ch.rlist.current;
 8006674:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 8006758 <rt_test_005_002_execute+0xe8>
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread1, "A");
 8006678:	4f2c      	ldr	r7, [pc, #176]	; (800672c <rt_test_005_002_execute+0xbc>)
  return chThdGetSelfX()->prio;
 800667a:	f8d8 3018 	ldr.w	r3, [r8, #24]
 800667e:	4e2c      	ldr	r6, [pc, #176]	; (8006730 <rt_test_005_002_execute+0xc0>)
 8006680:	6899      	ldr	r1, [r3, #8]
  test_set_step(1);
 8006682:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 800675c <rt_test_005_002_execute+0xec>
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread1, "A");
 8006686:	4b2b      	ldr	r3, [pc, #172]	; (8006734 <rt_test_005_002_execute+0xc4>)
 8006688:	4d2b      	ldr	r5, [pc, #172]	; (8006738 <rt_test_005_002_execute+0xc8>)
 800668a:	463a      	mov	r2, r7
 800668c:	3105      	adds	r1, #5
 800668e:	4630      	mov	r0, r6
  test_set_step(1);
 8006690:	2401      	movs	r4, #1
 8006692:	f8c9 4000 	str.w	r4, [r9]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread1, "A");
 8006696:	f7fb fac3 	bl	8001c20 <chThdCreateStatic.constprop.62>
 800669a:	f8d8 3018 	ldr.w	r3, [r8, #24]
 800669e:	6028      	str	r0, [r5, #0]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()+1, thread1, "B");
 80066a0:	6899      	ldr	r1, [r3, #8]
 80066a2:	4b26      	ldr	r3, [pc, #152]	; (800673c <rt_test_005_002_execute+0xcc>)
    chSemSignal(&sem1);
 80066a4:	4c26      	ldr	r4, [pc, #152]	; (8006740 <rt_test_005_002_execute+0xd0>)
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()+1, thread1, "B");
 80066a6:	463a      	mov	r2, r7
 80066a8:	3101      	adds	r1, #1
 80066aa:	f506 70a4 	add.w	r0, r6, #328	; 0x148
 80066ae:	f7fb fab7 	bl	8001c20 <chThdCreateStatic.constprop.62>
 80066b2:	f8d8 3018 	ldr.w	r3, [r8, #24]
 80066b6:	6068      	str	r0, [r5, #4]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()+3, thread1, "C");
 80066b8:	6899      	ldr	r1, [r3, #8]
 80066ba:	4b22      	ldr	r3, [pc, #136]	; (8006744 <rt_test_005_002_execute+0xd4>)
 80066bc:	463a      	mov	r2, r7
 80066be:	3103      	adds	r1, #3
 80066c0:	f506 7024 	add.w	r0, r6, #656	; 0x290
 80066c4:	f7fb faac 	bl	8001c20 <chThdCreateStatic.constprop.62>
 80066c8:	f8d8 3018 	ldr.w	r3, [r8, #24]
 80066cc:	60a8      	str	r0, [r5, #8]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()+4, thread1, "D");
 80066ce:	6899      	ldr	r1, [r3, #8]
 80066d0:	4b1d      	ldr	r3, [pc, #116]	; (8006748 <rt_test_005_002_execute+0xd8>)
 80066d2:	463a      	mov	r2, r7
 80066d4:	3104      	adds	r1, #4
 80066d6:	f506 7076 	add.w	r0, r6, #984	; 0x3d8
 80066da:	f7fb faa1 	bl	8001c20 <chThdCreateStatic.constprop.62>
 80066de:	f8d8 3018 	ldr.w	r3, [r8, #24]
 80066e2:	60e8      	str	r0, [r5, #12]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()+2, thread1, "E");
 80066e4:	6899      	ldr	r1, [r3, #8]
 80066e6:	4b19      	ldr	r3, [pc, #100]	; (800674c <rt_test_005_002_execute+0xdc>)
 80066e8:	3102      	adds	r1, #2
 80066ea:	463a      	mov	r2, r7
 80066ec:	f506 60a4 	add.w	r0, r6, #1312	; 0x520
 80066f0:	f7fb fa96 	bl	8001c20 <chThdCreateStatic.constprop.62>
  test_set_step(2);
 80066f4:	2302      	movs	r3, #2
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()+2, thread1, "E");
 80066f6:	6128      	str	r0, [r5, #16]
    chSemSignal(&sem1);
 80066f8:	4620      	mov	r0, r4
  test_set_step(2);
 80066fa:	f8c9 3000 	str.w	r3, [r9]
    chSemSignal(&sem1);
 80066fe:	f7fb fb1f 	bl	8001d40 <chSemSignal>
    chSemSignal(&sem1);
 8006702:	4620      	mov	r0, r4
 8006704:	f7fb fb1c 	bl	8001d40 <chSemSignal>
    chSemSignal(&sem1);
 8006708:	4620      	mov	r0, r4
 800670a:	f7fb fb19 	bl	8001d40 <chSemSignal>
    chSemSignal(&sem1);
 800670e:	4620      	mov	r0, r4
 8006710:	f7fb fb16 	bl	8001d40 <chSemSignal>
    chSemSignal(&sem1);
 8006714:	4620      	mov	r0, r4
 8006716:	f7fb fb13 	bl	8001d40 <chSemSignal>
    test_wait_threads();
 800671a:	f7fe ff89 	bl	8005630 <test_wait_threads>
    test_assert_sequence("ABCDE", "invalid sequence");
 800671e:	490c      	ldr	r1, [pc, #48]	; (8006750 <rt_test_005_002_execute+0xe0>)
 8006720:	480c      	ldr	r0, [pc, #48]	; (8006754 <rt_test_005_002_execute+0xe4>)
}
 8006722:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    test_assert_sequence("ABCDE", "invalid sequence");
 8006726:	f7fa b983 	b.w	8000a30 <_test_assert_sequence>
 800672a:	bf00      	nop
 800672c:	08002ae1 	.word	0x08002ae1
 8006730:	20000b40 	.word	0x20000b40
 8006734:	08008874 	.word	0x08008874
 8006738:	2000126c 	.word	0x2000126c
 800673c:	08008878 	.word	0x08008878
 8006740:	20000b28 	.word	0x20000b28
 8006744:	08008ab0 	.word	0x08008ab0
 8006748:	08008abc 	.word	0x08008abc
 800674c:	080088f0 	.word	0x080088f0
 8006750:	08008950 	.word	0x08008950
 8006754:	080088ec 	.word	0x080088ec
 8006758:	200008f0 	.word	0x200008f0
 800675c:	20001254 	.word	0x20001254

08006760 <rt_test_004_001_execute>:

static void rt_test_004_001_execute(void) {
 8006760:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  return ch.rlist.current;
 8006764:	4d30      	ldr	r5, [pc, #192]	; (8006828 <rt_test_004_001_execute+0xc8>)
  msg_t msg;

  /* [4.1.1] The function chThdSuspendTimeoutS() is invoked, the thread
     is remotely resumed with message @p MSG_OK. On return the message
     and the state of the reference are tested.*/
  test_set_step(1);
 8006766:	4f31      	ldr	r7, [pc, #196]	; (800682c <rt_test_004_001_execute+0xcc>)
  return chThdGetSelfX()->prio;
 8006768:	69aa      	ldr	r2, [r5, #24]
  {
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, thread1, "A");
 800676a:	4b31      	ldr	r3, [pc, #196]	; (8006830 <rt_test_004_001_execute+0xd0>)
 800676c:	6891      	ldr	r1, [r2, #8]
 800676e:	4831      	ldr	r0, [pc, #196]	; (8006834 <rt_test_004_001_execute+0xd4>)
 8006770:	4a31      	ldr	r2, [pc, #196]	; (8006838 <rt_test_004_001_execute+0xd8>)
 8006772:	3901      	subs	r1, #1
  test_set_step(1);
 8006774:	2401      	movs	r4, #1
 8006776:	603c      	str	r4, [r7, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, thread1, "A");
 8006778:	f7fb fa52 	bl	8001c20 <chThdCreateStatic.constprop.62>
 800677c:	4b2f      	ldr	r3, [pc, #188]	; (800683c <rt_test_004_001_execute+0xdc>)
 800677e:	2620      	movs	r6, #32
 8006780:	6018      	str	r0, [r3, #0]
 8006782:	f386 8811 	msr	BASEPRI, r6
  return ch.rlist.current;
 8006786:	69ab      	ldr	r3, [r5, #24]
  *trp = tp;
 8006788:	4c2d      	ldr	r4, [pc, #180]	; (8006840 <rt_test_004_001_execute+0xe0>)
  tp->u.wttrp = trp;
 800678a:	625c      	str	r4, [r3, #36]	; 0x24
    chSchGoSleepS(newstate);
 800678c:	2003      	movs	r0, #3
  *trp = tp;
 800678e:	6023      	str	r3, [r4, #0]
 8006790:	f7fb faf6 	bl	8001d80 <chSchGoSleepS>
  return currp->u.rdymsg;
 8006794:	69aa      	ldr	r2, [r5, #24]
 8006796:	2300      	movs	r3, #0
 8006798:	f8d2 8024 	ldr.w	r8, [r2, #36]	; 0x24
 800679c:	f383 8811 	msr	BASEPRI, r3
    chSysLock();
    msg = chThdSuspendTimeoutS(&tr1, TIME_INFINITE);
    chSysUnlock();
    test_assert(NULL == tr1, "not NULL");
 80067a0:	6820      	ldr	r0, [r4, #0]
 80067a2:	4928      	ldr	r1, [pc, #160]	; (8006844 <rt_test_004_001_execute+0xe4>)
 80067a4:	fab0 f080 	clz	r0, r0
 80067a8:	0940      	lsrs	r0, r0, #5
 80067aa:	f7fa f829 	bl	8000800 <_test_assert>
 80067ae:	b108      	cbz	r0, 80067b4 <rt_test_004_001_execute+0x54>
                            chTimeAddX(time, TIME_MS2I(1000) + CH_CFG_ST_TIMEDELTA + 1),
                            "out of time window");
    test_assert(NULL == tr1, "not NULL");
    test_assert(MSG_TIMEOUT == msg, "wrong returned message");
  }
}
 80067b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    test_assert(MSG_OK == msg,"wrong returned message");
 80067b4:	fab8 f088 	clz	r0, r8
 80067b8:	0940      	lsrs	r0, r0, #5
 80067ba:	4923      	ldr	r1, [pc, #140]	; (8006848 <rt_test_004_001_execute+0xe8>)
 80067bc:	f7fa f820 	bl	8000800 <_test_assert>
 80067c0:	4680      	mov	r8, r0
 80067c2:	2800      	cmp	r0, #0
 80067c4:	d1f4      	bne.n	80067b0 <rt_test_004_001_execute+0x50>
    test_wait_threads();
 80067c6:	f7fe ff33 	bl	8005630 <test_wait_threads>
  test_set_step(2);
 80067ca:	2302      	movs	r3, #2
 80067cc:	603b      	str	r3, [r7, #0]
 80067ce:	f386 8811 	msr	BASEPRI, r6
 80067d2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80067d6:	69ab      	ldr	r3, [r5, #24]
 80067d8:	6a55      	ldr	r5, [r2, #36]	; 0x24
  tp->u.wttrp = trp;
 80067da:	625c      	str	r4, [r3, #36]	; 0x24
  return chSchGoSleepTimeoutS(CH_STATE_SUSPENDED, timeout);
 80067dc:	f242 7110 	movw	r1, #10000	; 0x2710
 80067e0:	2003      	movs	r0, #3
  *trp = tp;
 80067e2:	6023      	str	r3, [r4, #0]
  return chSchGoSleepTimeoutS(CH_STATE_SUSPENDED, timeout);
 80067e4:	f7fb fb54 	bl	8001e90 <chSchGoSleepTimeoutS>
 80067e8:	4606      	mov	r6, r0
 80067ea:	f388 8811 	msr	BASEPRI, r8
    test_assert_time_window(chTimeAddX(time, TIME_MS2I(1000)),
 80067ee:	f505 511c 	add.w	r1, r5, #9984	; 0x2700
 80067f2:	4608      	mov	r0, r1
 80067f4:	3010      	adds	r0, #16
 80067f6:	3113      	adds	r1, #19
 80067f8:	f7f9 fe2a 	bl	8000450 <_test_assert_time_window.constprop.2>
 80067fc:	2800      	cmp	r0, #0
 80067fe:	d1d7      	bne.n	80067b0 <rt_test_004_001_execute+0x50>
    test_assert(NULL == tr1, "not NULL");
 8006800:	6820      	ldr	r0, [r4, #0]
 8006802:	4910      	ldr	r1, [pc, #64]	; (8006844 <rt_test_004_001_execute+0xe4>)
 8006804:	fab0 f080 	clz	r0, r0
 8006808:	0940      	lsrs	r0, r0, #5
 800680a:	f7f9 fff9 	bl	8000800 <_test_assert>
 800680e:	2800      	cmp	r0, #0
 8006810:	d1ce      	bne.n	80067b0 <rt_test_004_001_execute+0x50>
    test_assert(MSG_TIMEOUT == msg, "wrong returned message");
 8006812:	f1a6 30ff 	sub.w	r0, r6, #4294967295	; 0xffffffff
 8006816:	fab0 f080 	clz	r0, r0
 800681a:	0940      	lsrs	r0, r0, #5
 800681c:	490a      	ldr	r1, [pc, #40]	; (8006848 <rt_test_004_001_execute+0xe8>)
}
 800681e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    test_assert(MSG_TIMEOUT == msg, "wrong returned message");
 8006822:	f7f9 bfed 	b.w	8000800 <_test_assert>
 8006826:	bf00      	nop
 8006828:	200008f0 	.word	0x200008f0
 800682c:	20001254 	.word	0x20001254
 8006830:	08008874 	.word	0x08008874
 8006834:	20000b40 	.word	0x20000b40
 8006838:	08003de1 	.word	0x08003de1
 800683c:	2000126c 	.word	0x2000126c
 8006840:	20001280 	.word	0x20001280
 8006844:	08008748 	.word	0x08008748
 8006848:	08008754 	.word	0x08008754
 800684c:	00000000 	.word	0x00000000

08006850 <rt_test_003_002_execute>:
 * - [3.2.3] Creating 5 threads with pseudo-random priority, execution
 *   sequence is tested.
 * .
 */

static void rt_test_003_002_execute(void) {
 8006850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006852:	4d54      	ldr	r5, [pc, #336]	; (80069a4 <rt_test_003_002_execute+0x154>)

  /* [3.2.1] Creating 5 threads with increasing priority, execution
     sequence is tested.*/
  test_set_step(1);
 8006854:	4e54      	ldr	r6, [pc, #336]	; (80069a8 <rt_test_003_002_execute+0x158>)
  return chThdGetSelfX()->prio;
 8006856:	69aa      	ldr	r2, [r5, #24]
  {
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
 8006858:	4b54      	ldr	r3, [pc, #336]	; (80069ac <rt_test_003_002_execute+0x15c>)
 800685a:	6891      	ldr	r1, [r2, #8]
 800685c:	4854      	ldr	r0, [pc, #336]	; (80069b0 <rt_test_003_002_execute+0x160>)
 800685e:	4a55      	ldr	r2, [pc, #340]	; (80069b4 <rt_test_003_002_execute+0x164>)
 8006860:	4c55      	ldr	r4, [pc, #340]	; (80069b8 <rt_test_003_002_execute+0x168>)
 8006862:	3905      	subs	r1, #5
  test_set_step(1);
 8006864:	2701      	movs	r7, #1
 8006866:	6037      	str	r7, [r6, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
 8006868:	f7fb f9da 	bl	8001c20 <chThdCreateStatic.constprop.62>
 800686c:	69ab      	ldr	r3, [r5, #24]
 800686e:	6020      	str	r0, [r4, #0]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
 8006870:	6899      	ldr	r1, [r3, #8]
 8006872:	4a50      	ldr	r2, [pc, #320]	; (80069b4 <rt_test_003_002_execute+0x164>)
 8006874:	4b51      	ldr	r3, [pc, #324]	; (80069bc <rt_test_003_002_execute+0x16c>)
 8006876:	4852      	ldr	r0, [pc, #328]	; (80069c0 <rt_test_003_002_execute+0x170>)
 8006878:	3904      	subs	r1, #4
 800687a:	f7fb f9d1 	bl	8001c20 <chThdCreateStatic.constprop.62>
 800687e:	69ab      	ldr	r3, [r5, #24]
 8006880:	6060      	str	r0, [r4, #4]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
 8006882:	6899      	ldr	r1, [r3, #8]
 8006884:	4a4b      	ldr	r2, [pc, #300]	; (80069b4 <rt_test_003_002_execute+0x164>)
 8006886:	4b4f      	ldr	r3, [pc, #316]	; (80069c4 <rt_test_003_002_execute+0x174>)
 8006888:	484f      	ldr	r0, [pc, #316]	; (80069c8 <rt_test_003_002_execute+0x178>)
 800688a:	3903      	subs	r1, #3
 800688c:	f7fb f9c8 	bl	8001c20 <chThdCreateStatic.constprop.62>
 8006890:	69ab      	ldr	r3, [r5, #24]
 8006892:	60a0      	str	r0, [r4, #8]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-2, thread, "B");
 8006894:	6899      	ldr	r1, [r3, #8]
 8006896:	4a47      	ldr	r2, [pc, #284]	; (80069b4 <rt_test_003_002_execute+0x164>)
 8006898:	4b4c      	ldr	r3, [pc, #304]	; (80069cc <rt_test_003_002_execute+0x17c>)
 800689a:	484d      	ldr	r0, [pc, #308]	; (80069d0 <rt_test_003_002_execute+0x180>)
 800689c:	3902      	subs	r1, #2
 800689e:	f7fb f9bf 	bl	8001c20 <chThdCreateStatic.constprop.62>
 80068a2:	69ab      	ldr	r3, [r5, #24]
 80068a4:	60e0      	str	r0, [r4, #12]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread, "A");
 80068a6:	6899      	ldr	r1, [r3, #8]
 80068a8:	4a42      	ldr	r2, [pc, #264]	; (80069b4 <rt_test_003_002_execute+0x164>)
 80068aa:	4b4a      	ldr	r3, [pc, #296]	; (80069d4 <rt_test_003_002_execute+0x184>)
 80068ac:	484a      	ldr	r0, [pc, #296]	; (80069d8 <rt_test_003_002_execute+0x188>)
 80068ae:	3901      	subs	r1, #1
 80068b0:	f7fb f9b6 	bl	8001c20 <chThdCreateStatic.constprop.62>
 80068b4:	6120      	str	r0, [r4, #16]
    test_wait_threads();
 80068b6:	f7fe febb 	bl	8005630 <test_wait_threads>
    test_assert_sequence("ABCDE", "invalid sequence");
 80068ba:	4948      	ldr	r1, [pc, #288]	; (80069dc <rt_test_003_002_execute+0x18c>)
 80068bc:	4848      	ldr	r0, [pc, #288]	; (80069e0 <rt_test_003_002_execute+0x190>)
 80068be:	f7fa f8b7 	bl	8000a30 <_test_assert_sequence>
 80068c2:	b100      	cbz	r0, 80068c6 <rt_test_003_002_execute+0x76>
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-2, thread, "B");
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
    test_wait_threads();
    test_assert_sequence("ABCDE", "invalid sequence");
  }
}
 80068c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80068c6:	69aa      	ldr	r2, [r5, #24]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread, "A");
 80068c8:	4b42      	ldr	r3, [pc, #264]	; (80069d4 <rt_test_003_002_execute+0x184>)
 80068ca:	6891      	ldr	r1, [r2, #8]
 80068cc:	4842      	ldr	r0, [pc, #264]	; (80069d8 <rt_test_003_002_execute+0x188>)
 80068ce:	4a39      	ldr	r2, [pc, #228]	; (80069b4 <rt_test_003_002_execute+0x164>)
 80068d0:	3901      	subs	r1, #1
  test_set_step(2);
 80068d2:	2702      	movs	r7, #2
 80068d4:	6037      	str	r7, [r6, #0]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread, "A");
 80068d6:	f7fb f9a3 	bl	8001c20 <chThdCreateStatic.constprop.62>
 80068da:	69ab      	ldr	r3, [r5, #24]
 80068dc:	6120      	str	r0, [r4, #16]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-2, thread, "B");
 80068de:	6899      	ldr	r1, [r3, #8]
 80068e0:	4a34      	ldr	r2, [pc, #208]	; (80069b4 <rt_test_003_002_execute+0x164>)
 80068e2:	4b3a      	ldr	r3, [pc, #232]	; (80069cc <rt_test_003_002_execute+0x17c>)
 80068e4:	483a      	ldr	r0, [pc, #232]	; (80069d0 <rt_test_003_002_execute+0x180>)
 80068e6:	3902      	subs	r1, #2
 80068e8:	f7fb f99a 	bl	8001c20 <chThdCreateStatic.constprop.62>
 80068ec:	69ab      	ldr	r3, [r5, #24]
 80068ee:	60e0      	str	r0, [r4, #12]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
 80068f0:	6899      	ldr	r1, [r3, #8]
 80068f2:	4a30      	ldr	r2, [pc, #192]	; (80069b4 <rt_test_003_002_execute+0x164>)
 80068f4:	4b33      	ldr	r3, [pc, #204]	; (80069c4 <rt_test_003_002_execute+0x174>)
 80068f6:	4834      	ldr	r0, [pc, #208]	; (80069c8 <rt_test_003_002_execute+0x178>)
 80068f8:	3903      	subs	r1, #3
 80068fa:	f7fb f991 	bl	8001c20 <chThdCreateStatic.constprop.62>
 80068fe:	69ab      	ldr	r3, [r5, #24]
 8006900:	60a0      	str	r0, [r4, #8]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
 8006902:	6899      	ldr	r1, [r3, #8]
 8006904:	4a2b      	ldr	r2, [pc, #172]	; (80069b4 <rt_test_003_002_execute+0x164>)
 8006906:	4b2d      	ldr	r3, [pc, #180]	; (80069bc <rt_test_003_002_execute+0x16c>)
 8006908:	482d      	ldr	r0, [pc, #180]	; (80069c0 <rt_test_003_002_execute+0x170>)
 800690a:	3904      	subs	r1, #4
 800690c:	f7fb f988 	bl	8001c20 <chThdCreateStatic.constprop.62>
 8006910:	69ab      	ldr	r3, [r5, #24]
 8006912:	6060      	str	r0, [r4, #4]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
 8006914:	6899      	ldr	r1, [r3, #8]
 8006916:	4a27      	ldr	r2, [pc, #156]	; (80069b4 <rt_test_003_002_execute+0x164>)
 8006918:	4b24      	ldr	r3, [pc, #144]	; (80069ac <rt_test_003_002_execute+0x15c>)
 800691a:	4825      	ldr	r0, [pc, #148]	; (80069b0 <rt_test_003_002_execute+0x160>)
 800691c:	3905      	subs	r1, #5
 800691e:	f7fb f97f 	bl	8001c20 <chThdCreateStatic.constprop.62>
 8006922:	6020      	str	r0, [r4, #0]
    test_wait_threads();
 8006924:	f7fe fe84 	bl	8005630 <test_wait_threads>
    test_assert_sequence("ABCDE", "invalid sequence");
 8006928:	492c      	ldr	r1, [pc, #176]	; (80069dc <rt_test_003_002_execute+0x18c>)
 800692a:	482d      	ldr	r0, [pc, #180]	; (80069e0 <rt_test_003_002_execute+0x190>)
 800692c:	f7fa f880 	bl	8000a30 <_test_assert_sequence>
 8006930:	2800      	cmp	r0, #0
 8006932:	d1c7      	bne.n	80068c4 <rt_test_003_002_execute+0x74>
 8006934:	69aa      	ldr	r2, [r5, #24]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
 8006936:	4b21      	ldr	r3, [pc, #132]	; (80069bc <rt_test_003_002_execute+0x16c>)
 8006938:	6891      	ldr	r1, [r2, #8]
 800693a:	4821      	ldr	r0, [pc, #132]	; (80069c0 <rt_test_003_002_execute+0x170>)
 800693c:	4a1d      	ldr	r2, [pc, #116]	; (80069b4 <rt_test_003_002_execute+0x164>)
 800693e:	3904      	subs	r1, #4
  test_set_step(3);
 8006940:	2703      	movs	r7, #3
 8006942:	6037      	str	r7, [r6, #0]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
 8006944:	f7fb f96c 	bl	8001c20 <chThdCreateStatic.constprop.62>
 8006948:	69ab      	ldr	r3, [r5, #24]
 800694a:	6060      	str	r0, [r4, #4]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
 800694c:	6899      	ldr	r1, [r3, #8]
 800694e:	4a19      	ldr	r2, [pc, #100]	; (80069b4 <rt_test_003_002_execute+0x164>)
 8006950:	4b16      	ldr	r3, [pc, #88]	; (80069ac <rt_test_003_002_execute+0x15c>)
 8006952:	4817      	ldr	r0, [pc, #92]	; (80069b0 <rt_test_003_002_execute+0x160>)
 8006954:	3905      	subs	r1, #5
 8006956:	f7fb f963 	bl	8001c20 <chThdCreateStatic.constprop.62>
 800695a:	69ab      	ldr	r3, [r5, #24]
 800695c:	6020      	str	r0, [r4, #0]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread, "A");
 800695e:	6899      	ldr	r1, [r3, #8]
 8006960:	4a14      	ldr	r2, [pc, #80]	; (80069b4 <rt_test_003_002_execute+0x164>)
 8006962:	4b1c      	ldr	r3, [pc, #112]	; (80069d4 <rt_test_003_002_execute+0x184>)
 8006964:	481c      	ldr	r0, [pc, #112]	; (80069d8 <rt_test_003_002_execute+0x188>)
 8006966:	3901      	subs	r1, #1
 8006968:	f7fb f95a 	bl	8001c20 <chThdCreateStatic.constprop.62>
 800696c:	69ab      	ldr	r3, [r5, #24]
 800696e:	6120      	str	r0, [r4, #16]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-2, thread, "B");
 8006970:	6899      	ldr	r1, [r3, #8]
 8006972:	4a10      	ldr	r2, [pc, #64]	; (80069b4 <rt_test_003_002_execute+0x164>)
 8006974:	4b15      	ldr	r3, [pc, #84]	; (80069cc <rt_test_003_002_execute+0x17c>)
 8006976:	4816      	ldr	r0, [pc, #88]	; (80069d0 <rt_test_003_002_execute+0x180>)
 8006978:	3902      	subs	r1, #2
 800697a:	f7fb f951 	bl	8001c20 <chThdCreateStatic.constprop.62>
 800697e:	69ab      	ldr	r3, [r5, #24]
 8006980:	60e0      	str	r0, [r4, #12]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
 8006982:	6899      	ldr	r1, [r3, #8]
 8006984:	4a0b      	ldr	r2, [pc, #44]	; (80069b4 <rt_test_003_002_execute+0x164>)
 8006986:	4b0f      	ldr	r3, [pc, #60]	; (80069c4 <rt_test_003_002_execute+0x174>)
 8006988:	480f      	ldr	r0, [pc, #60]	; (80069c8 <rt_test_003_002_execute+0x178>)
 800698a:	3903      	subs	r1, #3
 800698c:	f7fb f948 	bl	8001c20 <chThdCreateStatic.constprop.62>
 8006990:	60a0      	str	r0, [r4, #8]
    test_wait_threads();
 8006992:	f7fe fe4d 	bl	8005630 <test_wait_threads>
    test_assert_sequence("ABCDE", "invalid sequence");
 8006996:	4911      	ldr	r1, [pc, #68]	; (80069dc <rt_test_003_002_execute+0x18c>)
 8006998:	4811      	ldr	r0, [pc, #68]	; (80069e0 <rt_test_003_002_execute+0x190>)
}
 800699a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    test_assert_sequence("ABCDE", "invalid sequence");
 800699e:	f7fa b847 	b.w	8000a30 <_test_assert_sequence>
 80069a2:	bf00      	nop
 80069a4:	200008f0 	.word	0x200008f0
 80069a8:	20001254 	.word	0x20001254
 80069ac:	080088f0 	.word	0x080088f0
 80069b0:	20000b40 	.word	0x20000b40
 80069b4:	080009a1 	.word	0x080009a1
 80069b8:	2000126c 	.word	0x2000126c
 80069bc:	08008abc 	.word	0x08008abc
 80069c0:	20000c88 	.word	0x20000c88
 80069c4:	08008ab0 	.word	0x08008ab0
 80069c8:	20000dd0 	.word	0x20000dd0
 80069cc:	08008878 	.word	0x08008878
 80069d0:	20000f18 	.word	0x20000f18
 80069d4:	08008874 	.word	0x08008874
 80069d8:	20001060 	.word	0x20001060
 80069dc:	08008950 	.word	0x08008950
 80069e0:	080088ec 	.word	0x080088ec
	...

080069f0 <chSemReset>:
void chSemReset(semaphore_t *sp, cnt_t n) {
 80069f0:	b570      	push	{r4, r5, r6, lr}
 80069f2:	2320      	movs	r3, #32
 80069f4:	f383 8811 	msr	BASEPRI, r3
  cnt = sp->cnt;
 80069f8:	6884      	ldr	r4, [r0, #8]
  sp->cnt = n;
 80069fa:	6081      	str	r1, [r0, #8]
  while (++cnt <= (cnt_t)0) {
 80069fc:	3401      	adds	r4, #1
 80069fe:	2c00      	cmp	r4, #0
 8006a00:	dc0c      	bgt.n	8006a1c <chSemReset+0x2c>
 8006a02:	4605      	mov	r5, r0
    chSchReadyI(queue_lifo_remove(&sp->queue))->u.rdymsg = MSG_RESET;
 8006a04:	f06f 0601 	mvn.w	r6, #1
  thread_t *tp = tqp->prev;
 8006a08:	6868      	ldr	r0, [r5, #4]
  tqp->prev             = tp->queue.prev;
 8006a0a:	6843      	ldr	r3, [r0, #4]
 8006a0c:	606b      	str	r3, [r5, #4]
  tqp->prev->queue.next = (thread_t *)tqp;
 8006a0e:	601d      	str	r5, [r3, #0]
 8006a10:	f7fa faae 	bl	8000f70 <chSchReadyI>
  while (++cnt <= (cnt_t)0) {
 8006a14:	3401      	adds	r4, #1
 8006a16:	2c01      	cmp	r4, #1
    chSchReadyI(queue_lifo_remove(&sp->queue))->u.rdymsg = MSG_RESET;
 8006a18:	6246      	str	r6, [r0, #36]	; 0x24
  while (++cnt <= (cnt_t)0) {
 8006a1a:	d1f5      	bne.n	8006a08 <chSemReset+0x18>
  chSchRescheduleS();
 8006a1c:	f7fc fbd0 	bl	80031c0 <chSchRescheduleS>
 8006a20:	2300      	movs	r3, #0
 8006a22:	f383 8811 	msr	BASEPRI, r3
}
 8006a26:	bd70      	pop	{r4, r5, r6, pc}
	...

08006a30 <rt_test_010_007_execute>:
static void rt_test_010_007_execute(void) {
 8006a30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  return ch.rlist.current;
 8006a34:	4d35      	ldr	r5, [pc, #212]	; (8006b0c <rt_test_010_007_execute+0xdc>)
  test_set_step(1);
 8006a36:	f8df 8104 	ldr.w	r8, [pc, #260]	; 8006b3c <rt_test_010_007_execute+0x10c>
  return chThdGetSelfX()->prio;
 8006a3a:	69ab      	ldr	r3, [r5, #24]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, bmk_thread7, NULL);
 8006a3c:	4a34      	ldr	r2, [pc, #208]	; (8006b10 <rt_test_010_007_execute+0xe0>)
 8006a3e:	6899      	ldr	r1, [r3, #8]
 8006a40:	4834      	ldr	r0, [pc, #208]	; (8006b14 <rt_test_010_007_execute+0xe4>)
 8006a42:	4c35      	ldr	r4, [pc, #212]	; (8006b18 <rt_test_010_007_execute+0xe8>)
      chSemReset(&sem1, 0);
 8006a44:	4f35      	ldr	r7, [pc, #212]	; (8006b1c <rt_test_010_007_execute+0xec>)
  test_set_step(1);
 8006a46:	2301      	movs	r3, #1
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, bmk_thread7, NULL);
 8006a48:	3105      	adds	r1, #5
  test_set_step(1);
 8006a4a:	f8c8 3000 	str.w	r3, [r8]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, bmk_thread7, NULL);
 8006a4e:	2300      	movs	r3, #0
 8006a50:	f7fb f8e6 	bl	8001c20 <chThdCreateStatic.constprop.62>
 8006a54:	69ab      	ldr	r3, [r5, #24]
 8006a56:	6020      	str	r0, [r4, #0]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()+4, bmk_thread7, NULL);
 8006a58:	6899      	ldr	r1, [r3, #8]
 8006a5a:	4a2d      	ldr	r2, [pc, #180]	; (8006b10 <rt_test_010_007_execute+0xe0>)
 8006a5c:	4830      	ldr	r0, [pc, #192]	; (8006b20 <rt_test_010_007_execute+0xf0>)
 8006a5e:	3104      	adds	r1, #4
 8006a60:	2300      	movs	r3, #0
 8006a62:	f7fb f8dd 	bl	8001c20 <chThdCreateStatic.constprop.62>
 8006a66:	69ab      	ldr	r3, [r5, #24]
 8006a68:	6060      	str	r0, [r4, #4]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()+3, bmk_thread7, NULL);
 8006a6a:	6899      	ldr	r1, [r3, #8]
 8006a6c:	4a28      	ldr	r2, [pc, #160]	; (8006b10 <rt_test_010_007_execute+0xe0>)
 8006a6e:	482d      	ldr	r0, [pc, #180]	; (8006b24 <rt_test_010_007_execute+0xf4>)
 8006a70:	3103      	adds	r1, #3
 8006a72:	2300      	movs	r3, #0
 8006a74:	f7fb f8d4 	bl	8001c20 <chThdCreateStatic.constprop.62>
 8006a78:	69ab      	ldr	r3, [r5, #24]
 8006a7a:	60a0      	str	r0, [r4, #8]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()+2, bmk_thread7, NULL);
 8006a7c:	6899      	ldr	r1, [r3, #8]
 8006a7e:	4a24      	ldr	r2, [pc, #144]	; (8006b10 <rt_test_010_007_execute+0xe0>)
 8006a80:	4829      	ldr	r0, [pc, #164]	; (8006b28 <rt_test_010_007_execute+0xf8>)
 8006a82:	3102      	adds	r1, #2
 8006a84:	2300      	movs	r3, #0
 8006a86:	f7fb f8cb 	bl	8001c20 <chThdCreateStatic.constprop.62>
 8006a8a:	69ab      	ldr	r3, [r5, #24]
 8006a8c:	60e0      	str	r0, [r4, #12]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()+1, bmk_thread7, NULL);
 8006a8e:	6899      	ldr	r1, [r3, #8]
 8006a90:	4a1f      	ldr	r2, [pc, #124]	; (8006b10 <rt_test_010_007_execute+0xe0>)
 8006a92:	4826      	ldr	r0, [pc, #152]	; (8006b2c <rt_test_010_007_execute+0xfc>)
 8006a94:	3101      	adds	r1, #1
 8006a96:	2300      	movs	r3, #0
 8006a98:	f7fb f8c2 	bl	8001c20 <chThdCreateStatic.constprop.62>
  test_set_step(2);
 8006a9c:	2302      	movs	r3, #2
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()+1, bmk_thread7, NULL);
 8006a9e:	6120      	str	r0, [r4, #16]
  test_set_step(2);
 8006aa0:	f8c8 3000 	str.w	r3, [r8]
    start = test_wait_tick();
 8006aa4:	f7fb fe14 	bl	80026d0 <test_wait_tick>
    n = 0;
 8006aa8:	2400      	movs	r4, #0
    start = test_wait_tick();
 8006aaa:	4606      	mov	r6, r0
 8006aac:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
      chSemReset(&sem1, 0);
 8006ab0:	2100      	movs	r1, #0
 8006ab2:	4638      	mov	r0, r7
 8006ab4:	f7ff ff9c 	bl	80069f0 <chSemReset>
 8006ab8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    } while (chVTIsSystemTimeWithinX(start, end));
 8006aba:	f242 720f 	movw	r2, #9999	; 0x270f
 8006abe:	1b9b      	subs	r3, r3, r6
 8006ac0:	4293      	cmp	r3, r2
      n++;
 8006ac2:	f104 0401 	add.w	r4, r4, #1
    } while (chVTIsSystemTimeWithinX(start, end));
 8006ac6:	d9f3      	bls.n	8006ab0 <rt_test_010_007_execute+0x80>
  test_set_step(3);
 8006ac8:	2303      	movs	r3, #3
 8006aca:	f8c8 3000 	str.w	r3, [r8]
    test_terminate_threads();
 8006ace:	f7f9 fed7 	bl	8000880 <test_terminate_threads>
    chSemReset(&sem1, 0);
 8006ad2:	2100      	movs	r1, #0
 8006ad4:	4811      	ldr	r0, [pc, #68]	; (8006b1c <rt_test_010_007_execute+0xec>)
 8006ad6:	f7ff ff8b 	bl	80069f0 <chSemReset>
    test_wait_threads();
 8006ada:	f7fe fda9 	bl	8005630 <test_wait_threads>
  test_set_step(4);
 8006ade:	2304      	movs	r3, #4
    test_print("--- Score : ");
 8006ae0:	4813      	ldr	r0, [pc, #76]	; (8006b30 <rt_test_010_007_execute+0x100>)
  test_set_step(4);
 8006ae2:	f8c8 3000 	str.w	r3, [r8]
    test_print("--- Score : ");
 8006ae6:	f7f9 ff8b 	bl	8000a00 <test_print>
    test_printn(n);
 8006aea:	4620      	mov	r0, r4
 8006aec:	f7f9 ff18 	bl	8000920 <test_printn>
    test_printn(n * 6);
 8006af0:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    test_print(" reschedules/S, ");
 8006af4:	480f      	ldr	r0, [pc, #60]	; (8006b34 <rt_test_010_007_execute+0x104>)
 8006af6:	f7f9 ff83 	bl	8000a00 <test_print>
    test_printn(n * 6);
 8006afa:	0060      	lsls	r0, r4, #1
 8006afc:	f7f9 ff10 	bl	8000920 <test_printn>
    test_println(" ctxswc/S");
 8006b00:	480d      	ldr	r0, [pc, #52]	; (8006b38 <rt_test_010_007_execute+0x108>)
}
 8006b02:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    test_println(" ctxswc/S");
 8006b06:	f7f9 bf5b 	b.w	80009c0 <test_println>
 8006b0a:	bf00      	nop
 8006b0c:	200008f0 	.word	0x200008f0
 8006b10:	08002a91 	.word	0x08002a91
 8006b14:	20000b40 	.word	0x20000b40
 8006b18:	2000126c 	.word	0x2000126c
 8006b1c:	20000b34 	.word	0x20000b34
 8006b20:	20000c88 	.word	0x20000c88
 8006b24:	20000dd0 	.word	0x20000dd0
 8006b28:	20000f18 	.word	0x20000f18
 8006b2c:	20001060 	.word	0x20001060
 8006b30:	08008bf0 	.word	0x08008bf0
 8006b34:	08008bb0 	.word	0x08008bb0
 8006b38:	08008bd4 	.word	0x08008bd4
 8006b3c:	20001254 	.word	0x20001254

08006b40 <rt_test_005_006_execute>:
}

static void rt_test_005_006_execute(void) {
 8006b40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  binary_semaphore_t bsem;
  msg_t msg;

  /* [5.6.1] Creating a binary semaphore in "taken" state, the state is
     checked.*/
  test_set_step(1);
 8006b44:	4f60      	ldr	r7, [pc, #384]	; (8006cc8 <rt_test_005_006_execute+0x188>)
static void rt_test_005_006_execute(void) {
 8006b46:	b084      	sub	sp, #16
  test_set_step(1);
 8006b48:	2301      	movs	r3, #1
  tqp->next = (thread_t *)tqp;
 8006b4a:	ac01      	add	r4, sp, #4
  sp->cnt = n;
 8006b4c:	2600      	movs	r6, #0
 8006b4e:	603b      	str	r3, [r7, #0]
  tqp->prev = (thread_t *)tqp;
 8006b50:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8006b54:	9603      	str	r6, [sp, #12]
 8006b56:	f04f 0820 	mov.w	r8, #32
 8006b5a:	f388 8811 	msr	BASEPRI, r8
 */
static inline bool chBSemGetStateI(const binary_semaphore_t *bsp) {

  chDbgCheckClassI();

  return (bsp->sem.cnt > (cnt_t)0) ? false : true;
 8006b5e:	9803      	ldr	r0, [sp, #12]
  {
    chBSemObjectInit(&bsem, true);
    test_assert_lock(chBSemGetStateI(&bsem) == true, "not taken");
 8006b60:	495a      	ldr	r1, [pc, #360]	; (8006ccc <rt_test_005_006_execute+0x18c>)
 8006b62:	42b0      	cmp	r0, r6
 8006b64:	bfcc      	ite	gt
 8006b66:	2000      	movgt	r0, #0
 8006b68:	2001      	movle	r0, #1
 8006b6a:	f7f9 fe49 	bl	8000800 <_test_assert>
 8006b6e:	b120      	cbz	r0, 8006b7a <rt_test_005_006_execute+0x3a>
 8006b70:	f386 8811 	msr	BASEPRI, r6
  {
    chBSemSignal(&bsem);
    test_assert_lock(chBSemGetStateI(&bsem) == false, "taken");
    test_assert_lock(chSemGetCounterI(&bsem.sem) == 1, "unexpected counter");
  }
}
 8006b74:	b004      	add	sp, #16
 8006b76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b7a:	4605      	mov	r5, r0
 8006b7c:	f380 8811 	msr	BASEPRI, r0
  test_set_step(2);
 8006b80:	2302      	movs	r3, #2
  chSemReset(&bsp->sem, taken ? (cnt_t)0 : (cnt_t)1);
 8006b82:	4601      	mov	r1, r0
 8006b84:	4620      	mov	r0, r4
 8006b86:	603b      	str	r3, [r7, #0]
 8006b88:	f7ff ff32 	bl	80069f0 <chSemReset>
 8006b8c:	f388 8811 	msr	BASEPRI, r8
  return (bsp->sem.cnt > (cnt_t)0) ? false : true;
 8006b90:	9803      	ldr	r0, [sp, #12]
    test_assert_lock(chBSemGetStateI(&bsem) == true, "not taken");
 8006b92:	494e      	ldr	r1, [pc, #312]	; (8006ccc <rt_test_005_006_execute+0x18c>)
 8006b94:	2800      	cmp	r0, #0
 8006b96:	bfcc      	ite	gt
 8006b98:	2000      	movgt	r0, #0
 8006b9a:	2001      	movle	r0, #1
 8006b9c:	f7f9 fe30 	bl	8000800 <_test_assert>
 8006ba0:	4606      	mov	r6, r0
 8006ba2:	b120      	cbz	r0, 8006bae <rt_test_005_006_execute+0x6e>
 8006ba4:	f385 8811 	msr	BASEPRI, r5
}
 8006ba8:	b004      	add	sp, #16
 8006baa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006bae:	f380 8811 	msr	BASEPRI, r0
  return ch.rlist.current;
 8006bb2:	4b47      	ldr	r3, [pc, #284]	; (8006cd0 <rt_test_005_006_execute+0x190>)
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE,
 8006bb4:	4a47      	ldr	r2, [pc, #284]	; (8006cd4 <rt_test_005_006_execute+0x194>)
  return chThdGetSelfX()->prio;
 8006bb6:	699b      	ldr	r3, [r3, #24]
 8006bb8:	4847      	ldr	r0, [pc, #284]	; (8006cd8 <rt_test_005_006_execute+0x198>)
 8006bba:	6899      	ldr	r1, [r3, #8]
  test_set_step(3);
 8006bbc:	2503      	movs	r5, #3
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE,
 8006bbe:	3901      	subs	r1, #1
 8006bc0:	4623      	mov	r3, r4
  test_set_step(3);
 8006bc2:	603d      	str	r5, [r7, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE,
 8006bc4:	f7fb f82c 	bl	8001c20 <chThdCreateStatic.constprop.62>
 8006bc8:	4a44      	ldr	r2, [pc, #272]	; (8006cdc <rt_test_005_006_execute+0x19c>)
  test_set_step(4);
 8006bca:	2304      	movs	r3, #4
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE,
 8006bcc:	6010      	str	r0, [r2, #0]
  return chSemWait(&bsp->sem);
 8006bce:	4620      	mov	r0, r4
  test_set_step(4);
 8006bd0:	603b      	str	r3, [r7, #0]
 8006bd2:	f7fb feed 	bl	80029b0 <chSemWait>
 8006bd6:	4605      	mov	r5, r0
 8006bd8:	f388 8811 	msr	BASEPRI, r8
  return (bsp->sem.cnt > (cnt_t)0) ? false : true;
 8006bdc:	9803      	ldr	r0, [sp, #12]
    test_assert_lock(chBSemGetStateI(&bsem) == true, "not taken");
 8006bde:	493b      	ldr	r1, [pc, #236]	; (8006ccc <rt_test_005_006_execute+0x18c>)
 8006be0:	2800      	cmp	r0, #0
 8006be2:	bfcc      	ite	gt
 8006be4:	2000      	movgt	r0, #0
 8006be6:	2001      	movle	r0, #1
 8006be8:	f7f9 fe0a 	bl	8000800 <_test_assert>
 8006bec:	2800      	cmp	r0, #0
 8006bee:	d1bf      	bne.n	8006b70 <rt_test_005_006_execute+0x30>
 8006bf0:	f380 8811 	msr	BASEPRI, r0
    test_assert(msg == MSG_OK, "unexpected message");
 8006bf4:	fab5 f085 	clz	r0, r5
 8006bf8:	0940      	lsrs	r0, r0, #5
 8006bfa:	4939      	ldr	r1, [pc, #228]	; (8006ce0 <rt_test_005_006_execute+0x1a0>)
 8006bfc:	f7f9 fe00 	bl	8000800 <_test_assert>
 8006c00:	2800      	cmp	r0, #0
 8006c02:	d1b7      	bne.n	8006b74 <rt_test_005_006_execute+0x34>
  test_set_step(5);
 8006c04:	2305      	movs	r3, #5
 8006c06:	603b      	str	r3, [r7, #0]
 8006c08:	f388 8811 	msr	BASEPRI, r8
  if (bsp->sem.cnt < (cnt_t)1) {
 8006c0c:	9b03      	ldr	r3, [sp, #12]
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	dd4e      	ble.n	8006cb0 <rt_test_005_006_execute+0x170>
  chSchRescheduleS();
 8006c12:	f7fc fad5 	bl	80031c0 <chSchRescheduleS>
 8006c16:	2500      	movs	r5, #0
 8006c18:	f385 8811 	msr	BASEPRI, r5
 8006c1c:	f04f 0820 	mov.w	r8, #32
 8006c20:	f388 8811 	msr	BASEPRI, r8
    test_assert_lock(chBSemGetStateI(&bsem) ==false, "still taken");
 8006c24:	9803      	ldr	r0, [sp, #12]
 8006c26:	492f      	ldr	r1, [pc, #188]	; (8006ce4 <rt_test_005_006_execute+0x1a4>)
 8006c28:	42a8      	cmp	r0, r5
 8006c2a:	bfd4      	ite	le
 8006c2c:	2000      	movle	r0, #0
 8006c2e:	2001      	movgt	r0, #1
 8006c30:	f7f9 fde6 	bl	8000800 <_test_assert>
 8006c34:	4606      	mov	r6, r0
 8006c36:	2800      	cmp	r0, #0
 8006c38:	d1b4      	bne.n	8006ba4 <rt_test_005_006_execute+0x64>
 8006c3a:	f380 8811 	msr	BASEPRI, r0
 8006c3e:	f388 8811 	msr	BASEPRI, r8
    test_assert_lock(chSemGetCounterI(&bsem.sem) == 1, "unexpected counter");
 8006c42:	9803      	ldr	r0, [sp, #12]
 8006c44:	4928      	ldr	r1, [pc, #160]	; (8006ce8 <rt_test_005_006_execute+0x1a8>)
 8006c46:	f1a0 0001 	sub.w	r0, r0, #1
 8006c4a:	fab0 f080 	clz	r0, r0
 8006c4e:	0940      	lsrs	r0, r0, #5
 8006c50:	f7f9 fdd6 	bl	8000800 <_test_assert>
 8006c54:	2800      	cmp	r0, #0
 8006c56:	d18b      	bne.n	8006b70 <rt_test_005_006_execute+0x30>
 8006c58:	f380 8811 	msr	BASEPRI, r0
  test_set_step(6);
 8006c5c:	2306      	movs	r3, #6
 8006c5e:	603b      	str	r3, [r7, #0]
 8006c60:	f388 8811 	msr	BASEPRI, r8
  if (bsp->sem.cnt < (cnt_t)1) {
 8006c64:	9b03      	ldr	r3, [sp, #12]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	dd26      	ble.n	8006cb8 <rt_test_005_006_execute+0x178>
  chSchRescheduleS();
 8006c6a:	f7fc faa9 	bl	80031c0 <chSchRescheduleS>
 8006c6e:	2600      	movs	r6, #0
 8006c70:	f386 8811 	msr	BASEPRI, r6
 8006c74:	2520      	movs	r5, #32
 8006c76:	f385 8811 	msr	BASEPRI, r5
    test_assert_lock(chBSemGetStateI(&bsem) == false, "taken");
 8006c7a:	9803      	ldr	r0, [sp, #12]
 8006c7c:	491b      	ldr	r1, [pc, #108]	; (8006cec <rt_test_005_006_execute+0x1ac>)
 8006c7e:	42b0      	cmp	r0, r6
 8006c80:	bfd4      	ite	le
 8006c82:	2000      	movle	r0, #0
 8006c84:	2001      	movgt	r0, #1
 8006c86:	f7f9 fdbb 	bl	8000800 <_test_assert>
 8006c8a:	4604      	mov	r4, r0
 8006c8c:	2800      	cmp	r0, #0
 8006c8e:	f47f af6f 	bne.w	8006b70 <rt_test_005_006_execute+0x30>
 8006c92:	f380 8811 	msr	BASEPRI, r0
 8006c96:	f385 8811 	msr	BASEPRI, r5
    test_assert_lock(chSemGetCounterI(&bsem.sem) == 1, "unexpected counter");
 8006c9a:	9803      	ldr	r0, [sp, #12]
 8006c9c:	4912      	ldr	r1, [pc, #72]	; (8006ce8 <rt_test_005_006_execute+0x1a8>)
 8006c9e:	1e43      	subs	r3, r0, #1
 8006ca0:	4258      	negs	r0, r3
 8006ca2:	4158      	adcs	r0, r3
 8006ca4:	f7f9 fdac 	bl	8000800 <_test_assert>
 8006ca8:	b150      	cbz	r0, 8006cc0 <rt_test_005_006_execute+0x180>
 8006caa:	f384 8811 	msr	BASEPRI, r4
 8006cae:	e761      	b.n	8006b74 <rt_test_005_006_execute+0x34>
    chSemSignalI(&bsp->sem);
 8006cb0:	4620      	mov	r0, r4
 8006cb2:	f7fa fa85 	bl	80011c0 <chSemSignalI>
 8006cb6:	e7ac      	b.n	8006c12 <rt_test_005_006_execute+0xd2>
 8006cb8:	4620      	mov	r0, r4
 8006cba:	f7fa fa81 	bl	80011c0 <chSemSignalI>
 8006cbe:	e7d4      	b.n	8006c6a <rt_test_005_006_execute+0x12a>
 8006cc0:	f380 8811 	msr	BASEPRI, r0
 8006cc4:	e756      	b.n	8006b74 <rt_test_005_006_execute+0x34>
 8006cc6:	bf00      	nop
 8006cc8:	20001254 	.word	0x20001254
 8006ccc:	08008814 	.word	0x08008814
 8006cd0:	200008f0 	.word	0x200008f0
 8006cd4:	08003db1 	.word	0x08003db1
 8006cd8:	20000b40 	.word	0x20000b40
 8006cdc:	2000126c 	.word	0x2000126c
 8006ce0:	08008820 	.word	0x08008820
 8006ce4:	08008834 	.word	0x08008834
 8006ce8:	08008840 	.word	0x08008840
 8006cec:	08008818 	.word	0x08008818

08006cf0 <rt_test_005_001_execute>:
static void rt_test_005_001_execute(void) {
 8006cf0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    msg = chSemWait(&sem1);
 8006cf4:	4c29      	ldr	r4, [pc, #164]	; (8006d9c <rt_test_005_001_execute+0xac>)
  test_set_step(1);
 8006cf6:	4e2a      	ldr	r6, [pc, #168]	; (8006da0 <rt_test_005_001_execute+0xb0>)
 8006cf8:	2301      	movs	r3, #1
    msg = chSemWait(&sem1);
 8006cfa:	4620      	mov	r0, r4
  test_set_step(1);
 8006cfc:	6033      	str	r3, [r6, #0]
    msg = chSemWait(&sem1);
 8006cfe:	f7fb fe57 	bl	80029b0 <chSemWait>
 8006d02:	2520      	movs	r5, #32
 8006d04:	4607      	mov	r7, r0
 8006d06:	f385 8811 	msr	BASEPRI, r5
    test_assert_lock(chSemGetCounterI(&sem1) == 0, "wrong counter value");
 8006d0a:	68a0      	ldr	r0, [r4, #8]
 8006d0c:	4925      	ldr	r1, [pc, #148]	; (8006da4 <rt_test_005_001_execute+0xb4>)
 8006d0e:	fab0 f080 	clz	r0, r0
 8006d12:	0940      	lsrs	r0, r0, #5
 8006d14:	f7f9 fd74 	bl	8000800 <_test_assert>
 8006d18:	b120      	cbz	r0, 8006d24 <rt_test_005_001_execute+0x34>
 8006d1a:	2300      	movs	r3, #0
 8006d1c:	f383 8811 	msr	BASEPRI, r3
}
 8006d20:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006d24:	f380 8811 	msr	BASEPRI, r0
    test_assert(MSG_OK == msg, "wrong returned message");
 8006d28:	fab7 f087 	clz	r0, r7
 8006d2c:	0940      	lsrs	r0, r0, #5
 8006d2e:	491e      	ldr	r1, [pc, #120]	; (8006da8 <rt_test_005_001_execute+0xb8>)
 8006d30:	f7f9 fd66 	bl	8000800 <_test_assert>
 8006d34:	4607      	mov	r7, r0
 8006d36:	2800      	cmp	r0, #0
 8006d38:	d1f2      	bne.n	8006d20 <rt_test_005_001_execute+0x30>
  test_set_step(2);
 8006d3a:	f04f 0902 	mov.w	r9, #2
    chSemSignal(&sem1);
 8006d3e:	4620      	mov	r0, r4
  test_set_step(2);
 8006d40:	f8c6 9000 	str.w	r9, [r6]
    chSemSignal(&sem1);
 8006d44:	f7fa fffc 	bl	8001d40 <chSemSignal>
 8006d48:	f385 8811 	msr	BASEPRI, r5
    test_assert_lock(chSemGetCounterI(&sem1) == 1, "wrong counter value");
 8006d4c:	68a0      	ldr	r0, [r4, #8]
 8006d4e:	4915      	ldr	r1, [pc, #84]	; (8006da4 <rt_test_005_001_execute+0xb4>)
 8006d50:	f1a0 0001 	sub.w	r0, r0, #1
 8006d54:	fab0 f080 	clz	r0, r0
 8006d58:	0940      	lsrs	r0, r0, #5
 8006d5a:	f7f9 fd51 	bl	8000800 <_test_assert>
 8006d5e:	4680      	mov	r8, r0
 8006d60:	b110      	cbz	r0, 8006d68 <rt_test_005_001_execute+0x78>
 8006d62:	f387 8811 	msr	BASEPRI, r7
 8006d66:	e7db      	b.n	8006d20 <rt_test_005_001_execute+0x30>
 8006d68:	f380 8811 	msr	BASEPRI, r0
  test_set_step(3);
 8006d6c:	2303      	movs	r3, #3
    chSemReset(&sem1, 2);
 8006d6e:	4649      	mov	r1, r9
 8006d70:	4620      	mov	r0, r4
  test_set_step(3);
 8006d72:	6033      	str	r3, [r6, #0]
    chSemReset(&sem1, 2);
 8006d74:	f7ff fe3c 	bl	80069f0 <chSemReset>
 8006d78:	f385 8811 	msr	BASEPRI, r5
    test_assert_lock(chSemGetCounterI(&sem1) == 2, "wrong counter value");
 8006d7c:	68a0      	ldr	r0, [r4, #8]
 8006d7e:	4909      	ldr	r1, [pc, #36]	; (8006da4 <rt_test_005_001_execute+0xb4>)
 8006d80:	f1a0 0002 	sub.w	r0, r0, #2
 8006d84:	fab0 f080 	clz	r0, r0
 8006d88:	0940      	lsrs	r0, r0, #5
 8006d8a:	f7f9 fd39 	bl	8000800 <_test_assert>
 8006d8e:	b910      	cbnz	r0, 8006d96 <rt_test_005_001_execute+0xa6>
 8006d90:	f380 8811 	msr	BASEPRI, r0
 8006d94:	e7c4      	b.n	8006d20 <rt_test_005_001_execute+0x30>
 8006d96:	f388 8811 	msr	BASEPRI, r8
 8006d9a:	e7c1      	b.n	8006d20 <rt_test_005_001_execute+0x30>
 8006d9c:	20000b28 	.word	0x20000b28
 8006da0:	20001254 	.word	0x20001254
 8006da4:	0800877c 	.word	0x0800877c
 8006da8:	08008754 	.word	0x08008754
 8006dac:	00000000 	.word	0x00000000

08006db0 <rt_test_005_001_teardown>:
  chSemReset(&sem1, 0);
 8006db0:	2100      	movs	r1, #0
 8006db2:	4801      	ldr	r0, [pc, #4]	; (8006db8 <rt_test_005_001_teardown+0x8>)
 8006db4:	f7ff be1c 	b.w	80069f0 <chSemReset>
 8006db8:	20000b28 	.word	0x20000b28
 8006dbc:	00000000 	.word	0x00000000

08006dc0 <chThdSetPriority>:
tprio_t chThdSetPriority(tprio_t newprio) {
 8006dc0:	b510      	push	{r4, lr}
 8006dc2:	2320      	movs	r3, #32
 8006dc4:	f383 8811 	msr	BASEPRI, r3
  oldprio = currp->realprio;
 8006dc8:	4b08      	ldr	r3, [pc, #32]	; (8006dec <chThdSetPriority+0x2c>)
 8006dca:	699b      	ldr	r3, [r3, #24]
 8006dcc:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
  if ((currp->prio == currp->realprio) || (newprio > currp->prio)) {
 8006dce:	6899      	ldr	r1, [r3, #8]
 8006dd0:	42a1      	cmp	r1, r4
 8006dd2:	d001      	beq.n	8006dd8 <chThdSetPriority+0x18>
 8006dd4:	4281      	cmp	r1, r0
 8006dd6:	d200      	bcs.n	8006dda <chThdSetPriority+0x1a>
    currp->prio = newprio;
 8006dd8:	6098      	str	r0, [r3, #8]
  currp->realprio = newprio;
 8006dda:	63d8      	str	r0, [r3, #60]	; 0x3c
  chSchRescheduleS();
 8006ddc:	f7fc f9f0 	bl	80031c0 <chSchRescheduleS>
 8006de0:	2300      	movs	r3, #0
 8006de2:	f383 8811 	msr	BASEPRI, r3
}
 8006de6:	4620      	mov	r0, r4
 8006de8:	bd10      	pop	{r4, pc}
 8006dea:	bf00      	nop
 8006dec:	200008f0 	.word	0x200008f0

08006df0 <rt_test_003_004_execute>:
 * - [3.4.3] Raising thread priority above the boosted level.
 * - [3.4.4] Restoring original conditions.
 * .
 */

static void rt_test_003_004_execute(void) {
 8006df0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  return ch.rlist.current;
 8006df4:	4d2f      	ldr	r5, [pc, #188]	; (8006eb4 <rt_test_003_004_execute+0xc4>)
    test_assert(chThdGetPriorityX() == prio + 2, "unexpected priority level");
  }

  /* [3.4.2] Raising thread priority above original priority but below
     the boosted level.*/
  test_set_step(2);
 8006df6:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006ec8 <rt_test_003_004_execute+0xd8>
 8006dfa:	69ab      	ldr	r3, [r5, #24]
  return chThdGetSelfX()->prio;
 8006dfc:	689c      	ldr	r4, [r3, #8]
    chThdGetSelfX()->prio += 2;
 8006dfe:	1ca6      	adds	r6, r4, #2
  {
    p1 = chThdSetPriority(prio + 1);
 8006e00:	1c67      	adds	r7, r4, #1
    chThdGetSelfX()->prio += 2;
 8006e02:	609e      	str	r6, [r3, #8]
    p1 = chThdSetPriority(prio + 1);
 8006e04:	4638      	mov	r0, r7
  test_set_step(2);
 8006e06:	2302      	movs	r3, #2
 8006e08:	f8c8 3000 	str.w	r3, [r8]
    p1 = chThdSetPriority(prio + 1);
 8006e0c:	f7ff ffd8 	bl	8006dc0 <chThdSetPriority>
    test_assert(p1 == prio, "unexpected returned priority level");
 8006e10:	1b00      	subs	r0, r0, r4
 8006e12:	fab0 f080 	clz	r0, r0
 8006e16:	4928      	ldr	r1, [pc, #160]	; (8006eb8 <rt_test_003_004_execute+0xc8>)
 8006e18:	0940      	lsrs	r0, r0, #5
 8006e1a:	f7f9 fcf1 	bl	8000800 <_test_assert>
 8006e1e:	b108      	cbz	r0, 8006e24 <rt_test_003_004_execute+0x34>
    chSysLock();
    chThdGetSelfX()->prio = prio;
    chThdGetSelfX()->realprio = prio;
    chSysUnlock();
  }
}
 8006e20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    test_assert(chThdGetSelfX()->prio == prio + 2, "unexpected priority level");
 8006e24:	69ab      	ldr	r3, [r5, #24]
 8006e26:	4925      	ldr	r1, [pc, #148]	; (8006ebc <rt_test_003_004_execute+0xcc>)
 8006e28:	6898      	ldr	r0, [r3, #8]
 8006e2a:	1b80      	subs	r0, r0, r6
 8006e2c:	fab0 f080 	clz	r0, r0
 8006e30:	0940      	lsrs	r0, r0, #5
 8006e32:	f7f9 fce5 	bl	8000800 <_test_assert>
 8006e36:	2800      	cmp	r0, #0
 8006e38:	d1f2      	bne.n	8006e20 <rt_test_003_004_execute+0x30>
    test_assert(chThdGetSelfX()->realprio == prio + 1, "unexpected returned real priority level");
 8006e3a:	69ab      	ldr	r3, [r5, #24]
 8006e3c:	4920      	ldr	r1, [pc, #128]	; (8006ec0 <rt_test_003_004_execute+0xd0>)
 8006e3e:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8006e40:	1bc0      	subs	r0, r0, r7
 8006e42:	fab0 f080 	clz	r0, r0
 8006e46:	0940      	lsrs	r0, r0, #5
 8006e48:	f7f9 fcda 	bl	8000800 <_test_assert>
 8006e4c:	2800      	cmp	r0, #0
 8006e4e:	d1e7      	bne.n	8006e20 <rt_test_003_004_execute+0x30>
    p1 = chThdSetPriority(prio + 3);
 8006e50:	1ce6      	adds	r6, r4, #3
  test_set_step(3);
 8006e52:	2303      	movs	r3, #3
    p1 = chThdSetPriority(prio + 3);
 8006e54:	4630      	mov	r0, r6
  test_set_step(3);
 8006e56:	f8c8 3000 	str.w	r3, [r8]
    p1 = chThdSetPriority(prio + 3);
 8006e5a:	f7ff ffb1 	bl	8006dc0 <chThdSetPriority>
    test_assert(p1 == prio + 1, "unexpected returned priority level");
 8006e5e:	1a38      	subs	r0, r7, r0
 8006e60:	fab0 f080 	clz	r0, r0
 8006e64:	4914      	ldr	r1, [pc, #80]	; (8006eb8 <rt_test_003_004_execute+0xc8>)
 8006e66:	0940      	lsrs	r0, r0, #5
 8006e68:	f7f9 fcca 	bl	8000800 <_test_assert>
 8006e6c:	2800      	cmp	r0, #0
 8006e6e:	d1d7      	bne.n	8006e20 <rt_test_003_004_execute+0x30>
    test_assert(chThdGetSelfX()->prio == prio + 3, "unexpected priority level");
 8006e70:	69ab      	ldr	r3, [r5, #24]
 8006e72:	4912      	ldr	r1, [pc, #72]	; (8006ebc <rt_test_003_004_execute+0xcc>)
 8006e74:	6898      	ldr	r0, [r3, #8]
 8006e76:	1b80      	subs	r0, r0, r6
 8006e78:	fab0 f080 	clz	r0, r0
 8006e7c:	0940      	lsrs	r0, r0, #5
 8006e7e:	f7f9 fcbf 	bl	8000800 <_test_assert>
 8006e82:	2800      	cmp	r0, #0
 8006e84:	d1cc      	bne.n	8006e20 <rt_test_003_004_execute+0x30>
    test_assert(chThdGetSelfX()->realprio == prio + 3, "unexpected real priority level");
 8006e86:	69ab      	ldr	r3, [r5, #24]
 8006e88:	490e      	ldr	r1, [pc, #56]	; (8006ec4 <rt_test_003_004_execute+0xd4>)
 8006e8a:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8006e8c:	1b80      	subs	r0, r0, r6
 8006e8e:	fab0 f080 	clz	r0, r0
 8006e92:	0940      	lsrs	r0, r0, #5
 8006e94:	f7f9 fcb4 	bl	8000800 <_test_assert>
 8006e98:	2800      	cmp	r0, #0
 8006e9a:	d1c1      	bne.n	8006e20 <rt_test_003_004_execute+0x30>
  test_set_step(4);
 8006e9c:	2304      	movs	r3, #4
 8006e9e:	f8c8 3000 	str.w	r3, [r8]
 8006ea2:	2320      	movs	r3, #32
 8006ea4:	f383 8811 	msr	BASEPRI, r3
  return ch.rlist.current;
 8006ea8:	69ab      	ldr	r3, [r5, #24]
    chThdGetSelfX()->prio = prio;
 8006eaa:	609c      	str	r4, [r3, #8]
    chThdGetSelfX()->realprio = prio;
 8006eac:	63dc      	str	r4, [r3, #60]	; 0x3c
 8006eae:	f380 8811 	msr	BASEPRI, r0
 8006eb2:	e7b5      	b.n	8006e20 <rt_test_003_004_execute+0x30>
 8006eb4:	200008f0 	.word	0x200008f0
 8006eb8:	080086b0 	.word	0x080086b0
 8006ebc:	080086d4 	.word	0x080086d4
 8006ec0:	080086f0 	.word	0x080086f0
 8006ec4:	08008718 	.word	0x08008718
 8006ec8:	20001254 	.word	0x20001254
 8006ecc:	00000000 	.word	0x00000000

08006ed0 <rt_test_003_003_execute>:
static void rt_test_003_003_execute(void) {
 8006ed0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ed4:	4e1c      	ldr	r6, [pc, #112]	; (8006f48 <rt_test_003_003_execute+0x78>)
  test_set_step(1);
 8006ed6:	4f1d      	ldr	r7, [pc, #116]	; (8006f4c <rt_test_003_003_execute+0x7c>)
  return chThdGetSelfX()->prio;
 8006ed8:	69b3      	ldr	r3, [r6, #24]
 8006eda:	689c      	ldr	r4, [r3, #8]
    p1 = chThdSetPriority(prio + 1);
 8006edc:	1c65      	adds	r5, r4, #1
  test_set_step(1);
 8006ede:	2301      	movs	r3, #1
    p1 = chThdSetPriority(prio + 1);
 8006ee0:	4628      	mov	r0, r5
  test_set_step(1);
 8006ee2:	603b      	str	r3, [r7, #0]
    p1 = chThdSetPriority(prio + 1);
 8006ee4:	f7ff ff6c 	bl	8006dc0 <chThdSetPriority>
 8006ee8:	4680      	mov	r8, r0
    test_assert(p1 == prio, "unexpected returned priority level");
 8006eea:	1b00      	subs	r0, r0, r4
 8006eec:	fab0 f080 	clz	r0, r0
 8006ef0:	0940      	lsrs	r0, r0, #5
 8006ef2:	4917      	ldr	r1, [pc, #92]	; (8006f50 <rt_test_003_003_execute+0x80>)
 8006ef4:	f7f9 fc84 	bl	8000800 <_test_assert>
 8006ef8:	b108      	cbz	r0, 8006efe <rt_test_003_003_execute+0x2e>
}
 8006efa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006efe:	69b3      	ldr	r3, [r6, #24]
    test_assert(chThdGetPriorityX() == prio + 1, "unexpected priority level");
 8006f00:	4914      	ldr	r1, [pc, #80]	; (8006f54 <rt_test_003_003_execute+0x84>)
 8006f02:	6898      	ldr	r0, [r3, #8]
 8006f04:	1b40      	subs	r0, r0, r5
 8006f06:	fab0 f080 	clz	r0, r0
 8006f0a:	0940      	lsrs	r0, r0, #5
 8006f0c:	f7f9 fc78 	bl	8000800 <_test_assert>
 8006f10:	2800      	cmp	r0, #0
 8006f12:	d1f2      	bne.n	8006efa <rt_test_003_003_execute+0x2a>
  test_set_step(2);
 8006f14:	2302      	movs	r3, #2
    p1 = chThdSetPriority(p1);
 8006f16:	4640      	mov	r0, r8
  test_set_step(2);
 8006f18:	603b      	str	r3, [r7, #0]
    p1 = chThdSetPriority(p1);
 8006f1a:	f7ff ff51 	bl	8006dc0 <chThdSetPriority>
    test_assert(p1 == prio + 1, "unexpected returned priority level");
 8006f1e:	1a28      	subs	r0, r5, r0
 8006f20:	fab0 f080 	clz	r0, r0
 8006f24:	490a      	ldr	r1, [pc, #40]	; (8006f50 <rt_test_003_003_execute+0x80>)
 8006f26:	0940      	lsrs	r0, r0, #5
 8006f28:	f7f9 fc6a 	bl	8000800 <_test_assert>
 8006f2c:	2800      	cmp	r0, #0
 8006f2e:	d1e4      	bne.n	8006efa <rt_test_003_003_execute+0x2a>
 8006f30:	69b3      	ldr	r3, [r6, #24]
    test_assert(chThdGetPriorityX() == prio, "unexpected priority level");
 8006f32:	4908      	ldr	r1, [pc, #32]	; (8006f54 <rt_test_003_003_execute+0x84>)
 8006f34:	6898      	ldr	r0, [r3, #8]
 8006f36:	1b00      	subs	r0, r0, r4
 8006f38:	fab0 f080 	clz	r0, r0
 8006f3c:	0940      	lsrs	r0, r0, #5
}
 8006f3e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    test_assert(chThdGetPriorityX() == prio, "unexpected priority level");
 8006f42:	f7f9 bc5d 	b.w	8000800 <_test_assert>
 8006f46:	bf00      	nop
 8006f48:	200008f0 	.word	0x200008f0
 8006f4c:	20001254 	.word	0x20001254
 8006f50:	080086b0 	.word	0x080086b0
 8006f54:	080086d4 	.word	0x080086d4
	...

08006f60 <chSysRestoreStatusX.part.2>:
 *
 * @param[in] sts       the system status to be restored.
 *
 * @xclass
 */
void chSysRestoreStatusX(syssts_t sts) {
 8006f60:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006f62:	f3ef 8405 	mrs	r4, IPSR
  return (bool)((__get_IPSR() & 0x1FFU) != 0U);
 8006f66:	f3c4 0408 	ubfx	r4, r4, #0, #9

  if (port_irq_enabled(sts)) {
    if (port_is_isr_context()) {
 8006f6a:	b11c      	cbz	r4, 8006f74 <chSysRestoreStatusX.part.2+0x14>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8006f6c:	2300      	movs	r3, #0
 8006f6e:	f383 8811 	msr	BASEPRI, r3
    else {
      chSchRescheduleS();
      chSysUnlock();
    }
  }
}
 8006f72:	bd10      	pop	{r4, pc}
      chSchRescheduleS();
 8006f74:	f7fc f924 	bl	80031c0 <chSchRescheduleS>
 8006f78:	f384 8811 	msr	BASEPRI, r4
}
 8006f7c:	bd10      	pop	{r4, pc}
 8006f7e:	bf00      	nop

08006f80 <rt_test_002_002_execute>:
static void rt_test_002_002_execute(void) {
 8006f80:	b510      	push	{r4, lr}
  test_set_step(1);
 8006f82:	4c31      	ldr	r4, [pc, #196]	; (8007048 <rt_test_002_002_execute+0xc8>)
 8006f84:	2301      	movs	r3, #1
static void rt_test_002_002_execute(void) {
 8006f86:	b086      	sub	sp, #24
  test_set_step(1);
 8006f88:	6023      	str	r3, [r4, #0]
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006f8a:	f3ef 8311 	mrs	r3, BASEPRI
  if (port_irq_enabled(sts)) {
 8006f8e:	b91b      	cbnz	r3, 8006f98 <rt_test_002_002_execute+0x18>
 8006f90:	f7fa f9ae 	bl	80012f0 <chSysGetStatusAndLockX.part.1>
 8006f94:	f7ff ffe4 	bl	8006f60 <chSysRestoreStatusX.part.2>
  test_set_step(2);
 8006f98:	2302      	movs	r3, #2
 8006f9a:	6023      	str	r3, [r4, #0]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8006f9c:	2320      	movs	r3, #32
 8006f9e:	f383 8811 	msr	BASEPRI, r3
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006fa2:	f3ef 8311 	mrs	r3, BASEPRI
 8006fa6:	b91b      	cbnz	r3, 8006fb0 <rt_test_002_002_execute+0x30>
 8006fa8:	f7fa f9a2 	bl	80012f0 <chSysGetStatusAndLockX.part.1>
 8006fac:	f7ff ffd8 	bl	8006f60 <chSysRestoreStatusX.part.2>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8006fb0:	2300      	movs	r3, #0
 8006fb2:	f383 8811 	msr	BASEPRI, r3
  test_set_step(3);
 8006fb6:	2303      	movs	r3, #3
 8006fb8:	6023      	str	r3, [r4, #0]
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006fba:	f3ef 8311 	mrs	r3, BASEPRI
 *
 * @special
 */
static inline void chSysUnconditionalLock(void) {

  if (port_irq_enabled(port_get_irq_status())) {
 8006fbe:	b913      	cbnz	r3, 8006fc6 <rt_test_002_002_execute+0x46>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8006fc0:	2320      	movs	r3, #32
 8006fc2:	f383 8811 	msr	BASEPRI, r3
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006fc6:	f3ef 8311 	mrs	r3, BASEPRI
 8006fca:	b913      	cbnz	r3, 8006fd2 <rt_test_002_002_execute+0x52>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8006fcc:	2320      	movs	r3, #32
 8006fce:	f383 8811 	msr	BASEPRI, r3
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	f383 8811 	msr	BASEPRI, r3
  test_set_step(4);
 8006fd8:	2204      	movs	r2, #4
 8006fda:	6022      	str	r2, [r4, #0]
 8006fdc:	2220      	movs	r2, #32
 8006fde:	f382 8811 	msr	BASEPRI, r2
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006fe2:	f3ef 8211 	mrs	r2, BASEPRI
 *
 * @special
 */
static inline void chSysUnconditionalUnlock(void) {

  if (!port_irq_enabled(port_get_irq_status())) {
 8006fe6:	b10a      	cbz	r2, 8006fec <rt_test_002_002_execute+0x6c>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8006fe8:	f383 8811 	msr	BASEPRI, r3
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006fec:	f3ef 8311 	mrs	r3, BASEPRI
 8006ff0:	b113      	cbz	r3, 8006ff8 <rt_test_002_002_execute+0x78>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8006ff2:	2300      	movs	r3, #0
 8006ff4:	f383 8811 	msr	BASEPRI, r3
  test_set_step(5);
 8006ff8:	2205      	movs	r2, #5
 *
 * @init
 */
static inline void chVTObjectInit(virtual_timer_t *vtp) {

  vtp->func = NULL;
 8006ffa:	2300      	movs	r3, #0
 8006ffc:	9304      	str	r3, [sp, #16]
 8006ffe:	6022      	str	r2, [r4, #0]
 8007000:	2320      	movs	r3, #32
 8007002:	f383 8811 	msr	BASEPRI, r3
 *
 * @iclass
 */
static inline void chVTResetI(virtual_timer_t *vtp) {

  if (chVTIsArmedI(vtp)) {
 8007006:	9b04      	ldr	r3, [sp, #16]
    chVTDoResetI(vtp);
 8007008:	ac01      	add	r4, sp, #4
  if (chVTIsArmedI(vtp)) {
 800700a:	b113      	cbz	r3, 8007012 <rt_test_002_002_execute+0x92>
    chVTDoResetI(vtp);
 800700c:	4620      	mov	r0, r4
 800700e:	f7fa f8e7 	bl	80011e0 <chVTDoResetI>
 */
static inline void chVTSetI(virtual_timer_t *vtp, sysinterval_t delay,
                            vtfunc_t vtfunc, void *par) {

  chVTResetI(vtp);
  chVTDoSetI(vtp, delay, vtfunc, par);
 8007012:	4620      	mov	r0, r4
 8007014:	2300      	movs	r3, #0
 8007016:	4a0d      	ldr	r2, [pc, #52]	; (800704c <rt_test_002_002_execute+0xcc>)
 8007018:	2101      	movs	r1, #1
 800701a:	f7fa f921 	bl	8001260 <chVTDoSetI>
 800701e:	2400      	movs	r4, #0
 8007020:	f384 8811 	msr	BASEPRI, r4
    chThdSleep(10);
 8007024:	200a      	movs	r0, #10
 8007026:	f7fb f91b 	bl	8002260 <chThdSleep>
 800702a:	2320      	movs	r3, #32
 800702c:	f383 8811 	msr	BASEPRI, r3
  b = chVTIsArmedI(vtp);
 8007030:	9804      	ldr	r0, [sp, #16]
 8007032:	f384 8811 	msr	BASEPRI, r4
    test_assert(chVTIsArmed(&vt) == false, "timer still armed");
 8007036:	fab0 f080 	clz	r0, r0
 800703a:	4905      	ldr	r1, [pc, #20]	; (8007050 <rt_test_002_002_execute+0xd0>)
 800703c:	0940      	lsrs	r0, r0, #5
 800703e:	f7f9 fbdf 	bl	8000800 <_test_assert>
}
 8007042:	b006      	add	sp, #24
 8007044:	bd10      	pop	{r4, pc}
 8007046:	bf00      	nop
 8007048:	20001254 	.word	0x20001254
 800704c:	08007061 	.word	0x08007061
 8007050:	0800863c 	.word	0x0800863c
	...

08007060 <vtcb>:
static void vtcb(void *p) {
 8007060:	b508      	push	{r3, lr}
 8007062:	2320      	movs	r3, #32
 8007064:	f383 8811 	msr	BASEPRI, r3
 8007068:	2200      	movs	r2, #0
 800706a:	f382 8811 	msr	BASEPRI, r2
 800706e:	f383 8811 	msr	BASEPRI, r3
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007072:	f3ef 8311 	mrs	r3, BASEPRI
 8007076:	b91b      	cbnz	r3, 8007080 <vtcb+0x20>
 8007078:	f7fa f93a 	bl	80012f0 <chSysGetStatusAndLockX.part.1>
 800707c:	f7ff ff70 	bl	8006f60 <chSysRestoreStatusX.part.2>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8007080:	2300      	movs	r3, #0
 8007082:	f383 8811 	msr	BASEPRI, r3
}
 8007086:	bd08      	pop	{r3, pc}
	...

08007090 <__early_init>:

static void stm32_gpio_init(void) {

  /* Enabling GPIO-related clocks, the mask comes from the
     registry header file.*/
  rccResetAHB2(STM32_GPIO_EN_MASK);
 8007090:	4a68      	ldr	r2, [pc, #416]	; (8007234 <__early_init+0x1a4>)
  gpiop->OTYPER  = config->otyper;
 8007092:	4869      	ldr	r0, [pc, #420]	; (8007238 <__early_init+0x1a8>)
  rccResetAHB2(STM32_GPIO_EN_MASK);
 8007094:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
  gpiop->OTYPER  = config->otyper;
 8007096:	4969      	ldr	r1, [pc, #420]	; (800723c <__early_init+0x1ac>)
  rccResetAHB2(STM32_GPIO_EN_MASK);
 8007098:	f043 0307 	orr.w	r3, r3, #7
/**
 * @brief   Early initialization code.
 * @details GPIO ports and system clocks are initialized before everything
 *          else.
 */
void __early_init(void) {
 800709c:	b4f0      	push	{r4, r5, r6, r7}
  rccResetAHB2(STM32_GPIO_EN_MASK);
 800709e:	62d3      	str	r3, [r2, #44]	; 0x2c
 80070a0:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
  gpiop->MODER   = config->moder;
 80070a2:	4e67      	ldr	r6, [pc, #412]	; (8007240 <__early_init+0x1b0>)
  rccResetAHB2(STM32_GPIO_EN_MASK);
 80070a4:	f023 0307 	bic.w	r3, r3, #7
 80070a8:	62d3      	str	r3, [r2, #44]	; 0x2c
 80070aa:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
  rccEnableAHB2(STM32_GPIO_EN_MASK, true);
 80070ac:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80070ae:	f043 0307 	orr.w	r3, r3, #7
 80070b2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80070b4:	6ed3      	ldr	r3, [r2, #108]	; 0x6c
  gpiop->OTYPER  = config->otyper;
 80070b6:	f04f 4490 	mov.w	r4, #1207959552	; 0x48000000
  rccEnableAHB2(STM32_GPIO_EN_MASK, true);
 80070ba:	f043 0307 	orr.w	r3, r3, #7
 80070be:	66d3      	str	r3, [r2, #108]	; 0x6c
  gpiop->OSPEEDR = config->ospeedr;
 80070c0:	f06f 0750 	mvn.w	r7, #80	; 0x50
  gpiop->OTYPER  = config->otyper;
 80070c4:	2300      	movs	r3, #0
  gpiop->PUPDR   = config->pupdr;
 80070c6:	f04f 5510 	mov.w	r5, #603979776	; 0x24000000
  rccEnableAHB2(STM32_GPIO_EN_MASK, true);
 80070ca:	f8d2 c06c 	ldr.w	ip, [r2, #108]	; 0x6c
  gpiop->OTYPER  = config->otyper;
 80070ce:	6063      	str	r3, [r4, #4]
  gpiop->ASCR    = config->ascr;
 80070d0:	62e3      	str	r3, [r4, #44]	; 0x2c
  gpiop->OSPEEDR = config->ospeedr;
 80070d2:	60a7      	str	r7, [r4, #8]
  gpiop->PUPDR   = config->pupdr;
 80070d4:	60e5      	str	r5, [r4, #12]
  gpiop->ODR     = config->odr;
 80070d6:	f64f 77ff 	movw	r7, #65535	; 0xffff
  gpiop->AFRL    = config->afrl;
 80070da:	f44f 65e0 	mov.w	r5, #1792	; 0x700
  gpiop->ODR     = config->odr;
 80070de:	6167      	str	r7, [r4, #20]
  gpiop->AFRL    = config->afrl;
 80070e0:	6225      	str	r5, [r4, #32]
  gpiop->AFRH    = config->afrh;
 80070e2:	f04f 5540 	mov.w	r5, #805306368	; 0x30000000
 80070e6:	6265      	str	r5, [r4, #36]	; 0x24
  gpiop->MODER   = config->moder;
 80070e8:	6026      	str	r6, [r4, #0]
  gpiop->OSPEEDR = config->ospeedr;
 80070ea:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
  gpiop->LOCKR   = config->lockr;
 80070ee:	61e3      	str	r3, [r4, #28]
  gpiop->PUPDR   = config->pupdr;
 80070f0:	2601      	movs	r6, #1
  gpiop->ODR     = config->odr;
 80070f2:	f64f 74f7 	movw	r4, #65527	; 0xfff7
  gpiop->OTYPER  = config->otyper;
 80070f6:	6043      	str	r3, [r0, #4]
  gpiop->ASCR    = config->ascr;
 80070f8:	62c3      	str	r3, [r0, #44]	; 0x2c
  gpiop->OSPEEDR = config->ospeedr;
 80070fa:	6085      	str	r5, [r0, #8]
  gpiop->PUPDR   = config->pupdr;
 80070fc:	60c6      	str	r6, [r0, #12]
  gpiop->ODR     = config->odr;
 80070fe:	6144      	str	r4, [r0, #20]
  gpiop->MODER   = config->moder;
 8007100:	f06f 0483 	mvn.w	r4, #131	; 0x83
  gpiop->AFRL    = config->afrl;
 8007104:	6203      	str	r3, [r0, #32]
  gpiop->AFRH    = config->afrh;
 8007106:	6243      	str	r3, [r0, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8007108:	6004      	str	r4, [r0, #0]
void stm32_clock_init(void) {

#if !STM32_NO_INIT
  /* PWR clock enable.*/
#if defined(HAL_USE_RTC) && defined(RCC_APB1ENR1_RTCAPBEN)
  RCC->APB1ENR1 = RCC_APB1ENR1_PWREN | RCC_APB1ENR1_RTCAPBEN;
 800710a:	4c4e      	ldr	r4, [pc, #312]	; (8007244 <__early_init+0x1b4>)
  gpiop->LOCKR   = config->lockr;
 800710c:	61c3      	str	r3, [r0, #28]
  gpiop->OTYPER  = config->otyper;
 800710e:	604b      	str	r3, [r1, #4]
     always enabled because it is the fall back clock when PLL the fails.
     Trim fields are not altered from reset values.*/

  /* MSIRANGE can be set only when MSI is OFF or READY.*/
  RCC->CR = RCC_CR_MSION;
  while ((RCC->CR & RCC_CR_MSIRDY) == 0)
 8007110:	4610      	mov	r0, r2
  gpiop->ASCR    = config->ascr;
 8007112:	62cb      	str	r3, [r1, #44]	; 0x2c
  gpiop->OSPEEDR = config->ospeedr;
 8007114:	608d      	str	r5, [r1, #8]
  gpiop->PUPDR   = config->pupdr;
 8007116:	60cb      	str	r3, [r1, #12]
  gpiop->ODR     = config->odr;
 8007118:	614f      	str	r7, [r1, #20]
  gpiop->AFRL    = config->afrl;
 800711a:	620b      	str	r3, [r1, #32]
  gpiop->AFRH    = config->afrh;
 800711c:	624b      	str	r3, [r1, #36]	; 0x24
  gpiop->MODER   = config->moder;
 800711e:	600d      	str	r5, [r1, #0]
  gpiop->LOCKR   = config->lockr;
 8007120:	61cb      	str	r3, [r1, #28]
  RCC->APB1ENR1 = RCC_APB1ENR1_PWREN | RCC_APB1ENR1_RTCAPBEN;
 8007122:	6594      	str	r4, [r2, #88]	; 0x58
  RCC->CR = RCC_CR_MSION;
 8007124:	6016      	str	r6, [r2, #0]
  while ((RCC->CR & RCC_CR_MSIRDY) == 0)
 8007126:	6803      	ldr	r3, [r0, #0]
 8007128:	079f      	lsls	r7, r3, #30
 800712a:	d5fc      	bpl.n	8007126 <__early_init+0x96>
    ;                                       /* Wait until MSI is stable.    */

  /* Clocking from MSI, in case MSI was not the default source.*/
  RCC->CFGR = 0;
 800712c:	2300      	movs	r3, #0
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_MSI)
 800712e:	4a41      	ldr	r2, [pc, #260]	; (8007234 <__early_init+0x1a4>)
  RCC->CFGR = 0;
 8007130:	6083      	str	r3, [r0, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_MSI)
 8007132:	6893      	ldr	r3, [r2, #8]
 8007134:	f013 0f0c 	tst.w	r3, #12
 8007138:	d1fb      	bne.n	8007132 <__early_init+0xa2>
    ;                                       /* Wait until MSI is selected.  */

  /* Core voltage setup.*/
  PWR->CR1 = STM32_VOS;
 800713a:	4a43      	ldr	r2, [pc, #268]	; (8007248 <__early_init+0x1b8>)
 800713c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007140:	6013      	str	r3, [r2, #0]
  while ((PWR->SR2 & PWR_SR2_VOSF) != 0)    /* Wait until regulator is      */
 8007142:	6953      	ldr	r3, [r2, #20]
 8007144:	055e      	lsls	r6, r3, #21
 8007146:	d4fc      	bmi.n	8007142 <__early_init+0xb2>
    ;                                       /* Wait until HSE is stable.    */
#endif

#if STM32_LSI_ENABLED
  /* LSI activation.*/
  RCC->CSR |= RCC_CSR_LSION;
 8007148:	4b3a      	ldr	r3, [pc, #232]	; (8007234 <__early_init+0x1a4>)
 800714a:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800714e:	f042 0201 	orr.w	r2, r2, #1
 8007152:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  while ((RCC->CSR & RCC_CSR_LSIRDY) == 0)
 8007156:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800715a:	0795      	lsls	r5, r2, #30
 800715c:	d5fb      	bpl.n	8007156 <__early_init+0xc6>
    ;                                       /* Wait until LSI is stable.    */
#endif

  /* Backup domain access enabled and left open.*/
  PWR->CR1 |= PWR_CR1_DBP;
 800715e:	483a      	ldr	r0, [pc, #232]	; (8007248 <__early_init+0x1b8>)
  RCC->BDCR |= STM32_LSEDRV | RCC_BDCR_LSEON | RCC_BDCR_LSEBYP;
#else
  /* No LSE Bypass.*/
  RCC->BDCR |= STM32_LSEDRV | RCC_BDCR_LSEON;
#endif
  while ((RCC->BDCR & RCC_BDCR_LSERDY) == 0)
 8007160:	4a34      	ldr	r2, [pc, #208]	; (8007234 <__early_init+0x1a4>)
  PWR->CR1 |= PWR_CR1_DBP;
 8007162:	6801      	ldr	r1, [r0, #0]
 8007164:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8007168:	6001      	str	r1, [r0, #0]
  RCC->BDCR |= STM32_LSEDRV | RCC_BDCR_LSEON;
 800716a:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 800716e:	f041 0111 	orr.w	r1, r1, #17
 8007172:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
  while ((RCC->BDCR & RCC_BDCR_LSERDY) == 0)
 8007176:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800717a:	079c      	lsls	r4, r3, #30
 800717c:	d5fb      	bpl.n	8007176 <__early_init+0xe6>
    ;                                       /* Wait until LSE is stable.    */
#endif

  /* Flash setup for selected MSI speed setting.*/
  FLASH->ACR = FLASH_ACR_DCEN | FLASH_ACR_ICEN | FLASH_ACR_PRFTEN |
 800717e:	4b33      	ldr	r3, [pc, #204]	; (800724c <__early_init+0x1bc>)
  /* Changing MSIRANGE to configured value.*/
  RCC->CR |= STM32_MSIRANGE;

  /* Switching from MSISRANGE to MSIRANGE.*/
  RCC->CR |= RCC_CR_MSIRGSEL;
  while ((RCC->CR & RCC_CR_MSIRDY) == 0)
 8007180:	492c      	ldr	r1, [pc, #176]	; (8007234 <__early_init+0x1a4>)
  FLASH->ACR = FLASH_ACR_DCEN | FLASH_ACR_ICEN | FLASH_ACR_PRFTEN |
 8007182:	f44f 60e0 	mov.w	r0, #1792	; 0x700
 8007186:	6018      	str	r0, [r3, #0]
  RCC->CR |= STM32_MSIRANGE;
 8007188:	6813      	ldr	r3, [r2, #0]
 800718a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800718e:	6013      	str	r3, [r2, #0]
  RCC->CR |= RCC_CR_MSIRGSEL;
 8007190:	6813      	ldr	r3, [r2, #0]
 8007192:	f043 0308 	orr.w	r3, r3, #8
 8007196:	6013      	str	r3, [r2, #0]
  while ((RCC->CR & RCC_CR_MSIRDY) == 0)
 8007198:	680b      	ldr	r3, [r1, #0]
 800719a:	0798      	lsls	r0, r3, #30
 800719c:	d5fc      	bpl.n	8007198 <__early_init+0x108>
    ;

  /* MSI is configured SYSCLK source so wait for it to be stable as well.*/
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_MSI)
 800719e:	4b25      	ldr	r3, [pc, #148]	; (8007234 <__early_init+0x1a4>)
 80071a0:	689a      	ldr	r2, [r3, #8]
 80071a2:	f012 0f0c 	tst.w	r2, #12
 80071a6:	d1fb      	bne.n	80071a0 <__early_init+0x110>
    ;

#if STM32_MSIPLL_ENABLED
  /* MSI PLL (to LSE) activation */
  RCC->CR |= RCC_CR_MSIPLLEN;
 80071a8:	6819      	ldr	r1, [r3, #0]
                 STM32_PLLREN  | STM32_PLLQ  |
                 STM32_PLLQEN  | STM32_PLLP  |
                 STM32_PLLPEN  | STM32_PLLN  |
                 STM32_PLLM    | STM32_PLLSRC;
#else
  RCC->PLLCFGR = STM32_PLLR   | STM32_PLLREN |
 80071aa:	4829      	ldr	r0, [pc, #164]	; (8007250 <__early_init+0x1c0>)
#if STM32_ACTIVATE_PLL
  /* PLL activation.*/
  RCC->CR |= RCC_CR_PLLON;

  /* Waiting for PLL lock.*/
  while ((RCC->CR & RCC_CR_PLLRDY) == 0)
 80071ac:	4a21      	ldr	r2, [pc, #132]	; (8007234 <__early_init+0x1a4>)
  RCC->CR |= RCC_CR_MSIPLLEN;
 80071ae:	f041 0104 	orr.w	r1, r1, #4
 80071b2:	6019      	str	r1, [r3, #0]
  RCC->CSR |= STM32_MSISRANGE;
 80071b4:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 80071b8:	f441 61c0 	orr.w	r1, r1, #1536	; 0x600
 80071bc:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
  RCC->PLLCFGR = STM32_PLLR   | STM32_PLLREN |
 80071c0:	60d8      	str	r0, [r3, #12]
  RCC->CR |= RCC_CR_PLLON;
 80071c2:	6819      	ldr	r1, [r3, #0]
 80071c4:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
 80071c8:	6019      	str	r1, [r3, #0]
  while ((RCC->CR & RCC_CR_PLLRDY) == 0)
 80071ca:	6813      	ldr	r3, [r2, #0]
 80071cc:	0199      	lsls	r1, r3, #6
 80071ce:	d5fc      	bpl.n	80071ca <__early_init+0x13a>
  RCC->PLLSAI1CFGR = STM32_PLLSAI1PDIV | STM32_PLLSAI1R |
                     STM32_PLLSAI1REN  | STM32_PLLSAI1Q |
                     STM32_PLLSAI1QEN  | STM32_PLLSAI1P |
                     STM32_PLLSAI1PEN  | STM32_PLLSAI1N;
#else
  RCC->PLLSAI1CFGR = STM32_PLLSAI1R | STM32_PLLSAI1REN |
 80071d0:	4b20      	ldr	r3, [pc, #128]	; (8007254 <__early_init+0x1c4>)
 80071d2:	6113      	str	r3, [r2, #16]
                     STM32_PLLSAI1Q | STM32_PLLSAI1QEN |
                     STM32_PLLSAI1P | STM32_PLLSAI1PEN |
                     STM32_PLLSAI1N;
#endif
  RCC->CR |= RCC_CR_PLLSAI1ON;
 80071d4:	6813      	ldr	r3, [r2, #0]

  /* Waiting for PLL lock.*/
  while ((RCC->CR & RCC_CR_PLLSAI1RDY) == 0)
 80071d6:	4917      	ldr	r1, [pc, #92]	; (8007234 <__early_init+0x1a4>)
  RCC->CR |= RCC_CR_PLLSAI1ON;
 80071d8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80071dc:	6013      	str	r3, [r2, #0]
  while ((RCC->CR & RCC_CR_PLLSAI1RDY) == 0)
 80071de:	680b      	ldr	r3, [r1, #0]
 80071e0:	011b      	lsls	r3, r3, #4
 80071e2:	d5fc      	bpl.n	80071de <__early_init+0x14e>
  while ((RCC->CR & RCC_CR_PLLSAI2RDY) == 0)
    ;
#endif

  /* Other clock-related settings (dividers, MCO etc).*/
  RCC->CFGR = STM32_MCOPRE | STM32_MCOSEL | STM32_STOPWUCK |
 80071e4:	2200      	movs	r2, #0
    ccipr |= STM32_SAI2SEL;
#endif
#if STM32_SAI1SEL != STM32_SAI1SEL_OFF
    ccipr |= STM32_SAI1SEL;
#endif
    RCC->CCIPR = ccipr;
 80071e6:	4b1c      	ldr	r3, [pc, #112]	; (8007258 <__early_init+0x1c8>)
  }

  /* Set flash WS's for SYSCLK source */
  if (STM32_FLASHBITS > STM32_MSI_FLASHBITS)
    FLASH->ACR = (FLASH->ACR & ~FLASH_ACR_LATENCY_Msk) | STM32_FLASHBITS;
 80071e8:	4818      	ldr	r0, [pc, #96]	; (800724c <__early_init+0x1bc>)
  RCC->CFGR = STM32_MCOPRE | STM32_MCOSEL | STM32_STOPWUCK |
 80071ea:	608a      	str	r2, [r1, #8]
    RCC->CCIPR = ccipr;
 80071ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    FLASH->ACR = (FLASH->ACR & ~FLASH_ACR_LATENCY_Msk) | STM32_FLASHBITS;
 80071f0:	6803      	ldr	r3, [r0, #0]
 80071f2:	f023 0307 	bic.w	r3, r3, #7
 80071f6:	f043 0304 	orr.w	r3, r3, #4
 80071fa:	6003      	str	r3, [r0, #0]

  /* Switching to the configured SYSCLK source if it is different from MSI.*/
#if (STM32_SW != STM32_SW_MSI)
  RCC->CFGR |= STM32_SW;        /* Switches on the selected clock source.   */
 80071fc:	688b      	ldr	r3, [r1, #8]
  /* Wait until SYSCLK is stable.*/
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
 80071fe:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
  RCC->CFGR |= STM32_SW;        /* Switches on the selected clock source.   */
 8007202:	f043 0303 	orr.w	r3, r3, #3
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
 8007206:	f502 3204 	add.w	r2, r2, #135168	; 0x21000
  RCC->CFGR |= STM32_SW;        /* Switches on the selected clock source.   */
 800720a:	608b      	str	r3, [r1, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
 800720c:	6893      	ldr	r3, [r2, #8]
 800720e:	f003 030c 	and.w	r3, r3, #12
 8007212:	2b0c      	cmp	r3, #12
 8007214:	d1fa      	bne.n	800720c <__early_init+0x17c>

#endif /* STM32_NO_INIT */

  /* SYSCFG clock enabled here because it is a multi-functional unit shared
     among multiple drivers.*/
  rccEnableAPB2(RCC_APB2ENR_SYSCFGEN, true);
 8007216:	6e13      	ldr	r3, [r2, #96]	; 0x60
 8007218:	f043 0301 	orr.w	r3, r3, #1
 800721c:	6613      	str	r3, [r2, #96]	; 0x60
 800721e:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 8007222:	f043 0301 	orr.w	r3, r3, #1
 8007226:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800722a:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80

  stm32_gpio_init();
  stm32_clock_init();
}
 800722e:	bcf0      	pop	{r4, r5, r6, r7}
 8007230:	4770      	bx	lr
 8007232:	bf00      	nop
 8007234:	40021000 	.word	0x40021000
 8007238:	48000400 	.word	0x48000400
 800723c:	48000800 	.word	0x48000800
 8007240:	abffffef 	.word	0xabffffef
 8007244:	10000400 	.word	0x10000400
 8007248:	40007000 	.word	0x40007000
 800724c:	40022000 	.word	0x40022000
 8007250:	03405001 	.word	0x03405001
 8007254:	04504800 	.word	0x04504800
 8007258:	34015555 	.word	0x34015555
 800725c:	00000000 	.word	0x00000000

08007260 <VectorD8>:
OSAL_IRQ_HANDLER(STM32_USART2_HANDLER) {
 8007260:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  USART_TypeDef *u = sdp->usart;
 8007264:	4d57      	ldr	r5, [pc, #348]	; (80073c4 <VectorD8+0x164>)
 8007266:	6d6e      	ldr	r6, [r5, #84]	; 0x54
  uint32_t cr1 = u->CR1;
 8007268:	6837      	ldr	r7, [r6, #0]
  isr = u->ISR;
 800726a:	69f4      	ldr	r4, [r6, #28]
  u->ICR = isr;
 800726c:	6234      	str	r4, [r6, #32]
  if (isr & (USART_ISR_ORE | USART_ISR_NE | USART_ISR_FE  | USART_ISR_PE))
 800726e:	0720      	lsls	r0, r4, #28
 8007270:	d146      	bne.n	8007300 <VectorD8+0xa0>
  if (isr & USART_ISR_LBDF) {
 8007272:	05e2      	lsls	r2, r4, #23
 8007274:	d438      	bmi.n	80072e8 <VectorD8+0x88>
  if (isr & USART_ISR_RXNE) {
 8007276:	06a3      	lsls	r3, r4, #26
 8007278:	d415      	bmi.n	80072a6 <VectorD8+0x46>
  if ((cr1 & USART_CR1_TXEIE) && (isr & USART_ISR_TXE)) {
 800727a:	0638      	lsls	r0, r7, #24
 800727c:	d501      	bpl.n	8007282 <VectorD8+0x22>
 800727e:	0621      	lsls	r1, r4, #24
 8007280:	d459      	bmi.n	8007336 <VectorD8+0xd6>
  if ((cr1 & USART_CR1_TCIE) && (isr & USART_ISR_TC)) {
 8007282:	067a      	lsls	r2, r7, #25
 8007284:	d50b      	bpl.n	800729e <VectorD8+0x3e>
 8007286:	0663      	lsls	r3, r4, #25
 8007288:	d509      	bpl.n	800729e <VectorD8+0x3e>
 800728a:	2320      	movs	r3, #32
 800728c:	f383 8811 	msr	BASEPRI, r3
    if (oqIsEmptyI(&sdp->oqueue)) {
 8007290:	e9d5 2311 	ldrd	r2, r3, [r5, #68]	; 0x44
 8007294:	429a      	cmp	r2, r3
 8007296:	d07d      	beq.n	8007394 <VectorD8+0x134>
 8007298:	2300      	movs	r3, #0
 800729a:	f383 8811 	msr	BASEPRI, r3
}
 800729e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  OSAL_IRQ_EPILOGUE();
 80072a2:	f7f9 bc2d 	b.w	8000b00 <_port_irq_epilogue>
 80072a6:	2320      	movs	r3, #32
 80072a8:	f383 8811 	msr	BASEPRI, r3
    sdIncomingDataI(sdp, (uint8_t)u->RDR & sdp->rxmask);
 80072ac:	8cb2      	ldrh	r2, [r6, #36]	; 0x24
 80072ae:	f895 105c 	ldrb.w	r1, [r5, #92]	; 0x5c
void sdIncomingDataI(SerialDriver *sdp, uint8_t b) {

  osalDbgCheckClassI();
  osalDbgCheck(sdp != NULL);

  if (iqIsEmptyI(&sdp->iqueue))
 80072b2:	696b      	ldr	r3, [r5, #20]
 80072b4:	ea01 0802 	and.w	r8, r1, r2
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d05d      	beq.n	8007378 <VectorD8+0x118>
  if (!iqIsFullI(iqp)) {
 80072bc:	e9d5 3208 	ldrd	r3, r2, [r5, #32]
 80072c0:	4293      	cmp	r3, r2
 80072c2:	d05e      	beq.n	8007382 <VectorD8+0x122>
    iqp->q_counter++;
 80072c4:	696a      	ldr	r2, [r5, #20]
    *iqp->q_wrptr++ = b;
 80072c6:	1c59      	adds	r1, r3, #1
    iqp->q_counter++;
 80072c8:	3201      	adds	r2, #1
 80072ca:	616a      	str	r2, [r5, #20]
    *iqp->q_wrptr++ = b;
 80072cc:	6229      	str	r1, [r5, #32]
 80072ce:	f883 8000 	strb.w	r8, [r3]
    if (iqp->q_wrptr >= iqp->q_top) {
 80072d2:	e9d5 3207 	ldrd	r3, r2, [r5, #28]
 80072d6:	429a      	cmp	r2, r3
 80072d8:	d24b      	bcs.n	8007372 <VectorD8+0x112>
 *
 * @iclass
 */
static inline void osalThreadDequeueNextI(threads_queue_t *tqp, msg_t msg) {

  chThdDequeueNextI(tqp, msg);
 80072da:	483b      	ldr	r0, [pc, #236]	; (80073c8 <VectorD8+0x168>)
 80072dc:	f7f9 fe60 	bl	8000fa0 <chThdDequeueNextI.constprop.75>
 80072e0:	2300      	movs	r3, #0
 80072e2:	f383 8811 	msr	BASEPRI, r3
 80072e6:	e7c8      	b.n	800727a <VectorD8+0x1a>
 80072e8:	2320      	movs	r3, #32
 80072ea:	f383 8811 	msr	BASEPRI, r3
 * @iclass
 */
static inline void osalEventBroadcastFlagsI(event_source_t *esp,
                                            eventflags_t flags) {

  chEvtBroadcastFlagsI(esp, flags);
 80072ee:	f44f 7100 	mov.w	r1, #512	; 0x200
 80072f2:	4836      	ldr	r0, [pc, #216]	; (80073cc <VectorD8+0x16c>)
 80072f4:	f7f9 ff24 	bl	8001140 <chEvtBroadcastFlagsI>
 80072f8:	2300      	movs	r3, #0
 80072fa:	f383 8811 	msr	BASEPRI, r3
 80072fe:	e7ba      	b.n	8007276 <VectorD8+0x16>
    sts |= SD_OVERRUN_ERROR;
 8007300:	f014 0f08 	tst.w	r4, #8
 8007304:	bf0c      	ite	eq
 8007306:	2100      	moveq	r1, #0
 8007308:	2180      	movne	r1, #128	; 0x80
  if (isr & USART_ISR_PE)
 800730a:	07e2      	lsls	r2, r4, #31
    sts |= SD_PARITY_ERROR;
 800730c:	bf48      	it	mi
 800730e:	f041 0120 	orrmi.w	r1, r1, #32
  if (isr & USART_ISR_FE)
 8007312:	07a3      	lsls	r3, r4, #30
    sts |= SD_FRAMING_ERROR;
 8007314:	bf48      	it	mi
 8007316:	f041 0140 	orrmi.w	r1, r1, #64	; 0x40
  if (isr & USART_ISR_NE)
 800731a:	0760      	lsls	r0, r4, #29
    sts |= SD_NOISE_ERROR;
 800731c:	bf48      	it	mi
 800731e:	f441 7180 	orrmi.w	r1, r1, #256	; 0x100
 8007322:	2320      	movs	r3, #32
 8007324:	f383 8811 	msr	BASEPRI, r3
 8007328:	4828      	ldr	r0, [pc, #160]	; (80073cc <VectorD8+0x16c>)
 800732a:	f7f9 ff09 	bl	8001140 <chEvtBroadcastFlagsI>
 800732e:	2300      	movs	r3, #0
 8007330:	f383 8811 	msr	BASEPRI, r3
 8007334:	e79d      	b.n	8007272 <VectorD8+0x12>
 8007336:	2320      	movs	r3, #32
 8007338:	f383 8811 	msr	BASEPRI, r3
  if (!oqIsEmptyI(oqp)) {
 800733c:	e9d5 2311 	ldrd	r2, r3, [r5, #68]	; 0x44
 8007340:	429a      	cmp	r2, r3
 8007342:	d033      	beq.n	80073ac <VectorD8+0x14c>
    oqp->q_counter++;
 8007344:	6baa      	ldr	r2, [r5, #56]	; 0x38
    if (oqp->q_rdptr >= oqp->q_top) {
 8007346:	6c29      	ldr	r1, [r5, #64]	; 0x40
    b = *oqp->q_rdptr++;
 8007348:	1c58      	adds	r0, r3, #1
    oqp->q_counter++;
 800734a:	3201      	adds	r2, #1
 800734c:	63aa      	str	r2, [r5, #56]	; 0x38
    b = *oqp->q_rdptr++;
 800734e:	64a8      	str	r0, [r5, #72]	; 0x48
    if (oqp->q_rdptr >= oqp->q_top) {
 8007350:	4288      	cmp	r0, r1
    b = *oqp->q_rdptr++;
 8007352:	f893 8000 	ldrb.w	r8, [r3]
    if (oqp->q_rdptr >= oqp->q_top) {
 8007356:	d301      	bcc.n	800735c <VectorD8+0xfc>
      oqp->q_rdptr = oqp->q_buffer;
 8007358:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 800735a:	64ab      	str	r3, [r5, #72]	; 0x48
  chThdDequeueNextI(tqp, msg);
 800735c:	481c      	ldr	r0, [pc, #112]	; (80073d0 <VectorD8+0x170>)
      u->TDR = b;
 800735e:	fa1f f888 	uxth.w	r8, r8
 8007362:	f7f9 fe1d 	bl	8000fa0 <chThdDequeueNextI.constprop.75>
 8007366:	f8a6 8028 	strh.w	r8, [r6, #40]	; 0x28
 800736a:	2300      	movs	r3, #0
 800736c:	f383 8811 	msr	BASEPRI, r3
 8007370:	e787      	b.n	8007282 <VectorD8+0x22>
      iqp->q_wrptr = iqp->q_buffer;
 8007372:	69ab      	ldr	r3, [r5, #24]
 8007374:	622b      	str	r3, [r5, #32]
 8007376:	e7b0      	b.n	80072da <VectorD8+0x7a>
  chEvtBroadcastFlagsI(esp, flags);
 8007378:	2104      	movs	r1, #4
 800737a:	4814      	ldr	r0, [pc, #80]	; (80073cc <VectorD8+0x16c>)
 800737c:	f7f9 fee0 	bl	8001140 <chEvtBroadcastFlagsI>
 8007380:	e79c      	b.n	80072bc <VectorD8+0x5c>
  if (!iqIsFullI(iqp)) {
 8007382:	696a      	ldr	r2, [r5, #20]
 8007384:	2a00      	cmp	r2, #0
 8007386:	d09d      	beq.n	80072c4 <VectorD8+0x64>
 8007388:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800738c:	480f      	ldr	r0, [pc, #60]	; (80073cc <VectorD8+0x16c>)
 800738e:	f7f9 fed7 	bl	8001140 <chEvtBroadcastFlagsI>
 8007392:	e7a5      	b.n	80072e0 <VectorD8+0x80>
    if (oqIsEmptyI(&sdp->oqueue)) {
 8007394:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8007396:	2b00      	cmp	r3, #0
 8007398:	f43f af7e 	beq.w	8007298 <VectorD8+0x38>
 800739c:	2110      	movs	r1, #16
 800739e:	480b      	ldr	r0, [pc, #44]	; (80073cc <VectorD8+0x16c>)
      u->CR1 = cr1 & ~USART_CR1_TCIE;
 80073a0:	f027 0740 	bic.w	r7, r7, #64	; 0x40
 80073a4:	f7f9 fecc 	bl	8001140 <chEvtBroadcastFlagsI>
 80073a8:	6037      	str	r7, [r6, #0]
 80073aa:	e775      	b.n	8007298 <VectorD8+0x38>
  if (!oqIsEmptyI(oqp)) {
 80073ac:	6baa      	ldr	r2, [r5, #56]	; 0x38
 80073ae:	2a00      	cmp	r2, #0
 80073b0:	d0c8      	beq.n	8007344 <VectorD8+0xe4>
 80073b2:	2108      	movs	r1, #8
 80073b4:	4805      	ldr	r0, [pc, #20]	; (80073cc <VectorD8+0x16c>)
 80073b6:	f7f9 fec3 	bl	8001140 <chEvtBroadcastFlagsI>
      u->CR1 = cr1 & ~USART_CR1_TXEIE;
 80073ba:	f027 0380 	bic.w	r3, r7, #128	; 0x80
 80073be:	6033      	str	r3, [r6, #0]
 80073c0:	e7d3      	b.n	800736a <VectorD8+0x10a>
 80073c2:	bf00      	nop
 80073c4:	20000890 	.word	0x20000890
 80073c8:	2000089c 	.word	0x2000089c
 80073cc:	20000894 	.word	0x20000894
 80073d0:	200008c0 	.word	0x200008c0
	...

080073e0 <VectorB0>:
OSAL_IRQ_HANDLER(ST_HANDLER) {
 80073e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if ((STM32_ST_TIM->SR & TIM_SR_CC1IF) != 0U) {
 80073e4:	f04f 4780 	mov.w	r7, #1073741824	; 0x40000000
 80073e8:	693b      	ldr	r3, [r7, #16]
 80073ea:	079b      	lsls	r3, r3, #30
 80073ec:	d403      	bmi.n	80073f6 <VectorB0+0x16>
}
 80073ee:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  OSAL_IRQ_EPILOGUE();
 80073f2:	f7f9 bb85 	b.w	8000b00 <_port_irq_epilogue>
    STM32_ST_TIM->SR = 0U;
 80073f6:	2100      	movs	r1, #0
 80073f8:	6139      	str	r1, [r7, #16]
 80073fa:	2320      	movs	r3, #32
 80073fc:	f383 8811 	msr	BASEPRI, r3
  virtual_timer_t *vtp;
  systime_t now;
  sysinterval_t delta, nowdelta;

  /* Looping through timers.*/
  vtp = ch.vtlist.next;
 8007400:	4c1d      	ldr	r4, [pc, #116]	; (8007478 <VectorB0+0x98>)
 8007402:	46a1      	mov	r9, r4
      nowdelta -= vtp->delta;

      vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
      ch.vtlist.next = vtp->next;
      fn = vtp->func;
      vtp->func = NULL;
 8007404:	4688      	mov	r8, r1
  vtp = ch.vtlist.next;
 8007406:	f859 3f1c 	ldr.w	r3, [r9, #28]!
 800740a:	689a      	ldr	r2, [r3, #8]
 800740c:	6a78      	ldr	r0, [r7, #36]	; 0x24
    nowdelta = chTimeDiffX(ch.vtlist.lasttime, now);
 800740e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
  return (sysinterval_t)((systime_t)(end - start));
 8007410:	1a45      	subs	r5, r0, r1
    if (nowdelta < vtp->delta) {
 8007412:	4295      	cmp	r5, r2
 8007414:	d31c      	bcc.n	8007450 <VectorB0+0x70>
 8007416:	2620      	movs	r6, #32
      vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
 8007418:	6818      	ldr	r0, [r3, #0]
      fn = vtp->func;
 800741a:	f8d3 a00c 	ldr.w	sl, [r3, #12]
      ch.vtlist.lasttime += vtp->delta;
 800741e:	4411      	add	r1, r2

      /* if the list becomes empty then the timer is stopped.*/
      if (ch.vtlist.next == (virtual_timer_t *)&ch.vtlist) {
 8007420:	4548      	cmp	r0, r9
      ch.vtlist.lasttime += vtp->delta;
 8007422:	62a1      	str	r1, [r4, #40]	; 0x28
      nowdelta -= vtp->delta;
 8007424:	eba5 0502 	sub.w	r5, r5, r2
      vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
 8007428:	f8c0 9004 	str.w	r9, [r0, #4]
      ch.vtlist.next = vtp->next;
 800742c:	61e0      	str	r0, [r4, #28]
      vtp->func = NULL;
 800742e:	f8c3 800c 	str.w	r8, [r3, #12]
  STM32_ST_TIM->DIER = 0;
 8007432:	bf08      	it	eq
 8007434:	f8c7 800c 	streq.w	r8, [r7, #12]
 8007438:	f388 8811 	msr	BASEPRI, r8
        port_timer_stop_alarm();
      }

      /* The callback is invoked outside the kernel critical zone.*/
      chSysUnlockFromISR();
      fn(vtp->par);
 800743c:	6918      	ldr	r0, [r3, #16]
 800743e:	47d0      	blx	sl
 8007440:	f386 8811 	msr	BASEPRI, r6
      chSysLockFromISR();

      /* Next element in the list.*/
      vtp = ch.vtlist.next;
 8007444:	69e3      	ldr	r3, [r4, #28]
    }
    while (vtp->delta <= nowdelta);
 8007446:	689a      	ldr	r2, [r3, #8]
 8007448:	4295      	cmp	r5, r2
 800744a:	d3df      	bcc.n	800740c <VectorB0+0x2c>
 800744c:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800744e:	e7e3      	b.n	8007418 <VectorB0+0x38>
  }

  /* if the list is empty, nothing else to do.*/
  if (ch.vtlist.next == (virtual_timer_t *)&ch.vtlist) {
 8007450:	69e2      	ldr	r2, [r4, #28]
 8007452:	454a      	cmp	r2, r9
 8007454:	d009      	beq.n	800746a <VectorB0+0x8a>
  }

  /* The "unprocessed nowdelta" time slice is added to "last time"
     and subtracted to next timer's delta.*/
  ch.vtlist.lasttime += nowdelta;
  ch.vtlist.next->delta -= nowdelta;
 8007456:	6891      	ldr	r1, [r2, #8]
  ch.vtlist.lasttime += nowdelta;
 8007458:	62a0      	str	r0, [r4, #40]	; 0x28
  ch.vtlist.next->delta -= nowdelta;
 800745a:	1b4d      	subs	r5, r1, r5
 800745c:	6095      	str	r5, [r2, #8]
  return systime + (systime_t)interval;
 800745e:	689b      	ldr	r3, [r3, #8]
 8007460:	2b02      	cmp	r3, #2
 8007462:	bf2c      	ite	cs
 8007464:	18c0      	addcs	r0, r0, r3
 8007466:	3002      	addcc	r0, #2
  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 8007468:	6378      	str	r0, [r7, #52]	; 0x34
 800746a:	2300      	movs	r3, #0
 800746c:	f383 8811 	msr	BASEPRI, r3
}
 8007470:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  OSAL_IRQ_EPILOGUE();
 8007474:	f7f9 bb44 	b.w	8000b00 <_port_irq_epilogue>
 8007478:	200008f0 	.word	0x200008f0
 800747c:	00000000 	.word	0x00000000

08007480 <__init_ram_areas>:
}

/**
 * @brief   Performs the initialization of the various RAM areas.
 */
void __init_ram_areas(void) {
 8007480:	b4f0      	push	{r4, r5, r6, r7}
 8007482:	4e14      	ldr	r6, [pc, #80]	; (80074d4 <__init_ram_areas+0x54>)
 8007484:	4d14      	ldr	r5, [pc, #80]	; (80074d8 <__init_ram_areas+0x58>)
 8007486:	4c15      	ldr	r4, [pc, #84]	; (80074dc <__init_ram_areas+0x5c>)
 8007488:	4b15      	ldr	r3, [pc, #84]	; (80074e0 <__init_ram_areas+0x60>)
 800748a:	4916      	ldr	r1, [pc, #88]	; (80074e4 <__init_ram_areas+0x64>)
 800748c:	f106 0c70 	add.w	ip, r6, #112	; 0x70
      tp++;
    }

    /* Zeroing clear area.*/
    while (p < rap->no_init_area) {
      *p = 0;
 8007490:	2700      	movs	r7, #0
    while (p < rap->clear_area) {
 8007492:	429c      	cmp	r4, r3
 8007494:	d911      	bls.n	80074ba <__init_ram_areas+0x3a>
 8007496:	3904      	subs	r1, #4
 8007498:	461a      	mov	r2, r3
      *p = *tp;
 800749a:	f851 0f04 	ldr.w	r0, [r1, #4]!
 800749e:	f842 0b04 	str.w	r0, [r2], #4
    while (p < rap->clear_area) {
 80074a2:	4294      	cmp	r4, r2
 80074a4:	d8f9      	bhi.n	800749a <__init_ram_areas+0x1a>
 80074a6:	43da      	mvns	r2, r3
 80074a8:	4414      	add	r4, r2
 80074aa:	f024 0403 	bic.w	r4, r4, #3
 80074ae:	3404      	adds	r4, #4
 80074b0:	4423      	add	r3, r4
    while (p < rap->no_init_area) {
 80074b2:	429d      	cmp	r5, r3
 80074b4:	d903      	bls.n	80074be <__init_ram_areas+0x3e>
      *p = 0;
 80074b6:	f843 7b04 	str.w	r7, [r3], #4
    while (p < rap->no_init_area) {
 80074ba:	429d      	cmp	r5, r3
 80074bc:	d8fb      	bhi.n	80074b6 <__init_ram_areas+0x36>
      p++;
    }
    rap++;
  }
  while (rap < &ram_areas[CRT1_AREAS_NUMBER]);
 80074be:	4566      	cmp	r6, ip
 80074c0:	d005      	beq.n	80074ce <__init_ram_areas+0x4e>
 80074c2:	e9d6 1304 	ldrd	r1, r3, [r6, #16]
 80074c6:	e9d6 4506 	ldrd	r4, r5, [r6, #24]
 80074ca:	3610      	adds	r6, #16
 80074cc:	e7e1      	b.n	8007492 <__init_ram_areas+0x12>
#endif
}
 80074ce:	bcf0      	pop	{r4, r5, r6, r7}
 80074d0:	4770      	bx	lr
 80074d2:	bf00      	nop
 80074d4:	08007aa8 	.word	0x08007aa8
 80074d8:	200013f8 	.word	0x200013f8
 80074dc:	200013f8 	.word	0x200013f8
 80074e0:	200013f8 	.word	0x200013f8
 80074e4:	0800991c 	.word	0x0800991c
	...

080074f0 <__default_exit>:
void __default_exit(void) {
 80074f0:	e7fe      	b.n	80074f0 <__default_exit>
 80074f2:	bf00      	nop
	...

08007500 <__late_init>:
 8007500:	4770      	bx	lr
 8007502:	bf00      	nop
	...

08007510 <__core_init>:
}
 8007510:	4770      	bx	lr
 8007512:	bf00      	nop

08007514 <memset>:
 8007514:	b4f0      	push	{r4, r5, r6, r7}
 8007516:	0786      	lsls	r6, r0, #30
 8007518:	d043      	beq.n	80075a2 <memset+0x8e>
 800751a:	1e54      	subs	r4, r2, #1
 800751c:	2a00      	cmp	r2, #0
 800751e:	d03e      	beq.n	800759e <memset+0x8a>
 8007520:	b2ca      	uxtb	r2, r1
 8007522:	4603      	mov	r3, r0
 8007524:	e002      	b.n	800752c <memset+0x18>
 8007526:	f114 34ff 	adds.w	r4, r4, #4294967295	; 0xffffffff
 800752a:	d338      	bcc.n	800759e <memset+0x8a>
 800752c:	f803 2b01 	strb.w	r2, [r3], #1
 8007530:	079d      	lsls	r5, r3, #30
 8007532:	d1f8      	bne.n	8007526 <memset+0x12>
 8007534:	2c03      	cmp	r4, #3
 8007536:	d92b      	bls.n	8007590 <memset+0x7c>
 8007538:	b2cd      	uxtb	r5, r1
 800753a:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 800753e:	2c0f      	cmp	r4, #15
 8007540:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 8007544:	d916      	bls.n	8007574 <memset+0x60>
 8007546:	f1a4 0710 	sub.w	r7, r4, #16
 800754a:	093f      	lsrs	r7, r7, #4
 800754c:	f103 0620 	add.w	r6, r3, #32
 8007550:	eb06 1607 	add.w	r6, r6, r7, lsl #4
 8007554:	f103 0210 	add.w	r2, r3, #16
 8007558:	e942 5504 	strd	r5, r5, [r2, #-16]
 800755c:	e942 5502 	strd	r5, r5, [r2, #-8]
 8007560:	3210      	adds	r2, #16
 8007562:	42b2      	cmp	r2, r6
 8007564:	d1f8      	bne.n	8007558 <memset+0x44>
 8007566:	f004 040f 	and.w	r4, r4, #15
 800756a:	3701      	adds	r7, #1
 800756c:	2c03      	cmp	r4, #3
 800756e:	eb03 1307 	add.w	r3, r3, r7, lsl #4
 8007572:	d90d      	bls.n	8007590 <memset+0x7c>
 8007574:	461e      	mov	r6, r3
 8007576:	4622      	mov	r2, r4
 8007578:	3a04      	subs	r2, #4
 800757a:	2a03      	cmp	r2, #3
 800757c:	f846 5b04 	str.w	r5, [r6], #4
 8007580:	d8fa      	bhi.n	8007578 <memset+0x64>
 8007582:	1f22      	subs	r2, r4, #4
 8007584:	f022 0203 	bic.w	r2, r2, #3
 8007588:	3204      	adds	r2, #4
 800758a:	4413      	add	r3, r2
 800758c:	f004 0403 	and.w	r4, r4, #3
 8007590:	b12c      	cbz	r4, 800759e <memset+0x8a>
 8007592:	b2c9      	uxtb	r1, r1
 8007594:	441c      	add	r4, r3
 8007596:	f803 1b01 	strb.w	r1, [r3], #1
 800759a:	429c      	cmp	r4, r3
 800759c:	d1fb      	bne.n	8007596 <memset+0x82>
 800759e:	bcf0      	pop	{r4, r5, r6, r7}
 80075a0:	4770      	bx	lr
 80075a2:	4614      	mov	r4, r2
 80075a4:	4603      	mov	r3, r0
 80075a6:	e7c5      	b.n	8007534 <memset+0x20>

080075a8 <strncmp>:
 80075a8:	2a00      	cmp	r2, #0
 80075aa:	d041      	beq.n	8007630 <strncmp+0x88>
 80075ac:	ea40 0301 	orr.w	r3, r0, r1
 80075b0:	f013 0303 	ands.w	r3, r3, #3
 80075b4:	b4f0      	push	{r4, r5, r6, r7}
 80075b6:	d125      	bne.n	8007604 <strncmp+0x5c>
 80075b8:	2a03      	cmp	r2, #3
 80075ba:	d923      	bls.n	8007604 <strncmp+0x5c>
 80075bc:	6804      	ldr	r4, [r0, #0]
 80075be:	680d      	ldr	r5, [r1, #0]
 80075c0:	42ac      	cmp	r4, r5
 80075c2:	d11f      	bne.n	8007604 <strncmp+0x5c>
 80075c4:	3a04      	subs	r2, #4
 80075c6:	d035      	beq.n	8007634 <strncmp+0x8c>
 80075c8:	f1a4 3501 	sub.w	r5, r4, #16843009	; 0x1010101
 80075cc:	ea25 0404 	bic.w	r4, r5, r4
 80075d0:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
 80075d4:	d131      	bne.n	800763a <strncmp+0x92>
 80075d6:	1d07      	adds	r7, r0, #4
 80075d8:	1d0d      	adds	r5, r1, #4
 80075da:	e00d      	b.n	80075f8 <strncmp+0x50>
 80075dc:	f857 3b04 	ldr.w	r3, [r7], #4
 80075e0:	680e      	ldr	r6, [r1, #0]
 80075e2:	f1a3 3401 	sub.w	r4, r3, #16843009	; 0x1010101
 80075e6:	42b3      	cmp	r3, r6
 80075e8:	ea24 0403 	bic.w	r4, r4, r3
 80075ec:	d10a      	bne.n	8007604 <strncmp+0x5c>
 80075ee:	3a04      	subs	r2, #4
 80075f0:	d020      	beq.n	8007634 <strncmp+0x8c>
 80075f2:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
 80075f6:	d11d      	bne.n	8007634 <strncmp+0x8c>
 80075f8:	2a03      	cmp	r2, #3
 80075fa:	4629      	mov	r1, r5
 80075fc:	4638      	mov	r0, r7
 80075fe:	f105 0504 	add.w	r5, r5, #4
 8007602:	d8eb      	bhi.n	80075dc <strncmp+0x34>
 8007604:	7803      	ldrb	r3, [r0, #0]
 8007606:	780c      	ldrb	r4, [r1, #0]
 8007608:	429c      	cmp	r4, r3
 800760a:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 800760e:	d10c      	bne.n	800762a <strncmp+0x82>
 8007610:	b182      	cbz	r2, 8007634 <strncmp+0x8c>
 8007612:	b914      	cbnz	r4, 800761a <strncmp+0x72>
 8007614:	e00e      	b.n	8007634 <strncmp+0x8c>
 8007616:	b16a      	cbz	r2, 8007634 <strncmp+0x8c>
 8007618:	b17b      	cbz	r3, 800763a <strncmp+0x92>
 800761a:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 800761e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8007622:	42a3      	cmp	r3, r4
 8007624:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 8007628:	d0f5      	beq.n	8007616 <strncmp+0x6e>
 800762a:	1b18      	subs	r0, r3, r4
 800762c:	bcf0      	pop	{r4, r5, r6, r7}
 800762e:	4770      	bx	lr
 8007630:	4610      	mov	r0, r2
 8007632:	4770      	bx	lr
 8007634:	2000      	movs	r0, #0
 8007636:	bcf0      	pop	{r4, r5, r6, r7}
 8007638:	4770      	bx	lr
 800763a:	4618      	mov	r0, r3
 800763c:	e7f6      	b.n	800762c <strncmp+0x84>
 800763e:	bf00      	nop

08007640 <strncpy>:
 8007640:	ea40 0301 	orr.w	r3, r0, r1
 8007644:	079b      	lsls	r3, r3, #30
 8007646:	b470      	push	{r4, r5, r6}
 8007648:	d12a      	bne.n	80076a0 <strncpy+0x60>
 800764a:	2a03      	cmp	r2, #3
 800764c:	d928      	bls.n	80076a0 <strncpy+0x60>
 800764e:	460c      	mov	r4, r1
 8007650:	4603      	mov	r3, r0
 8007652:	4621      	mov	r1, r4
 8007654:	f854 6b04 	ldr.w	r6, [r4], #4
 8007658:	f1a6 3501 	sub.w	r5, r6, #16843009	; 0x1010101
 800765c:	ea25 0506 	bic.w	r5, r5, r6
 8007660:	f015 3f80 	tst.w	r5, #2155905152	; 0x80808080
 8007664:	d106      	bne.n	8007674 <strncpy+0x34>
 8007666:	3a04      	subs	r2, #4
 8007668:	2a03      	cmp	r2, #3
 800766a:	f843 6b04 	str.w	r6, [r3], #4
 800766e:	4621      	mov	r1, r4
 8007670:	d8ef      	bhi.n	8007652 <strncpy+0x12>
 8007672:	b19a      	cbz	r2, 800769c <strncpy+0x5c>
 8007674:	780c      	ldrb	r4, [r1, #0]
 8007676:	701c      	strb	r4, [r3, #0]
 8007678:	3a01      	subs	r2, #1
 800767a:	3301      	adds	r3, #1
 800767c:	b13c      	cbz	r4, 800768e <strncpy+0x4e>
 800767e:	b16a      	cbz	r2, 800769c <strncpy+0x5c>
 8007680:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8007684:	f803 4b01 	strb.w	r4, [r3], #1
 8007688:	3a01      	subs	r2, #1
 800768a:	2c00      	cmp	r4, #0
 800768c:	d1f7      	bne.n	800767e <strncpy+0x3e>
 800768e:	b12a      	cbz	r2, 800769c <strncpy+0x5c>
 8007690:	441a      	add	r2, r3
 8007692:	2100      	movs	r1, #0
 8007694:	f803 1b01 	strb.w	r1, [r3], #1
 8007698:	4293      	cmp	r3, r2
 800769a:	d1fb      	bne.n	8007694 <strncpy+0x54>
 800769c:	bc70      	pop	{r4, r5, r6}
 800769e:	4770      	bx	lr
 80076a0:	4603      	mov	r3, r0
 80076a2:	e7e6      	b.n	8007672 <strncpy+0x32>
